<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ShareFile.Api.Client</name>
    </assembly>
    <members>
        <member name="P:ShareFile.Api.Client.Configuration.UseHttpMethodOverride">
            <summary>
            Ensure all API requests are executed as POST reqeusts with an override header specified
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.AutoComposeUri">
            <summary>
            Automatically compose object uri before returning result
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.HttpTimeout">
            <summary>
            Timeout, in milliseconds, for API requests (excluding uploads transfer)
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.HttpClientFactory">
            <summary>
            Optional. If set, all non-upload API requests use the HttpClient instance provided by this factory
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.ProxyConfiguration">
            <summary>
            Register ProxyConfiguration to be used for all requests
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.LogPersonalInformation">
            <summary>
            If true, then personal information (e.g. name and email) will be logged.
            <para>This should probably only be changed to true in a development environment.</para>
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.LogFullResponse">
            <summary>
            If true, then the full json object will be logged doing API calls. Otherwise, collections on the json object
            will not be logged. Metadata about the collection will be logged instead.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.LogCookiesAndHeaders">
            <summary>
            If true, all cookies and headers associated with a request will be logged.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.SupportedCultures">
            <summary>
            Header value to send on every API call.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.ClientCapabilities">
            <summary>
            Key represents providers for the collection of capabilities to be sent as a header on each API call.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.IsNetCore">
            <summary>
            If true, then an extra progress notification will be sent for uploads. This is a workaround for the 
            behavior that .Net Core apps use (the normal progress notification is not sent for that runtime).
            <para>Default credentials are also handled differently.</para>
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.AlwaysPresentCredentials">
            <summary>
            Always includes OAuth Access Token when requesting a resource from the ShareFile provider.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Configuration.UserAgent">
            <summary>
            User-Agent header value to be passed on each API call
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Converters.LoggingConverter">
            <summary>
            This converter is used for logging. It is one-way (write only) and does not necessarily produce valid JSON.
            <para>The purpose of the converter is to optionally exclude personal information and 
            optionally only log metadata about IEnumerable properties.</para>
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Converters.ODataConverter.Create(System.Type,ShareFile.Api.Client.Models.ODataObject,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a ShareFile ODataObject instance given a jObject instance. 
            </summary>
            <remarks>
            This method will look first for the odata.metadata property in the jObject instance. If
            not found, it will fallback to the URL representation, and finally, to the object ID. If
            all of these fail, the method will instantiate the requested type from JSON.NET, which 
            matches the type of the attribute. 
            The ODataFactory class provide create methods for each of these matches. 
            Metadata and URL are the "proper" ways to handle ODATA deserialization; the ID fallback is
            convinient for certain operations, but uses the ShareFile ID prefixes and should be avoided.
            </remarks>
            <param name="objectType"></param>
            <param name="oDataObject"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:ShareFile.Api.Client.Converters.ODataFactory">
            <summary>
            This class handles the creation of OData Objects from string-based specifications, mainly
            for deserialization operations. It uses several method to identify the serialized classes:
            the Odata metadata, the Odata Url, and the ID in certain cases - based on ShareFile ID 
            prefixes
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Converters.ODataFactory.RegisterType``2">
            <summary>
            Allow consumers to regsiter type substitutions.
            </summary>
            <typeparam name="TNew">Type constructor to use in place of TReplace</typeparam>
            <typeparam name="TReplace">Type you want to replace</typeparam>
        </member>
        <member name="M:ShareFile.Api.Client.Converters.ODataFactory.Create(System.String)">
            <summary>
            Creates a Model class based on the type name, as a string.
            </summary>
            <remarks>
            This is not a terribly efficient method, should be used as catch-22 if you want a generic
            handler. If you know the return type, or at least the superclass, use Create passing the
            .NET Type object, which is more efficient.
            </remarks>
            <param name="cast">Type name. Either full namespace or just name will work. Entity set names 
            are also supported (e.g., Items for Item)</param>
            <param name="context">Optional request context</param>
            <param name="id">Optional id if you already know it. This method will use the ShareFile ID 
            prefixes to handle superclasses (e.g., cast=Items and id=fi* instantiate a File instance)</param>
            <returns>A subtype of ODataObject, matching the requested type/id. Returns null if type doesnt
            match any known type</returns>
        </member>
        <member name="M:ShareFile.Api.Client.Converters.ODataFactory.Create(System.Type,System.String,ShareFile.Api.Client.Models.ODataObject,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a new instance of ODataObject of the specified type. 
            </summary>
            <remarks>
            If Type is Item or
            Principal, the appropriate sub-type is instantiated based on ID. This is not kosher from
            ODATA perspective: the Type Cast parameter in metadata should be used instead.. 
            The method will use reflection to find the type constructor. Objects must have a
            constructor (string, context) or (string, context, string) to be found. Otherwise,
            a ODataObject instance is created instead.
            </remarks>
            <param name="type"></param>
            <param name="cast"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccessControlsEntity.Get(System.Uri)">
            <summary>
            Get AccessControl by ID
            </summary>
            <remarks>
            Retrieves a single Access Control entry for a given Item and Principal
            </remarks>
            <returns>
            A single AccessControl object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccessControlsEntity.GetByItem(System.Uri)">
            <summary>
            Get AccessControl List By Item
            </summary>
            <remarks>
            Retrieves the Access Control List for a given Item.
            </remarks>
            <param name="url"></param>
            <returns>
            Access Control List of the given object ID.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccessControlsEntity.CreateByItem(System.Uri,ShareFile.Api.Client.Models.AccessControl,System.Boolean,System.Boolean,System.String)">
            <summary>
            Create AccessControl
            </summary>
            <example>
            {
            "Principal":{"url":"https://account.sf-api.com/v3/Groups(id)"},
            "CanUpload":true,
            "CanDownload":true,
            "CanView":true,
            "CanDelete":true,
            "CanManagePermissions":true,
            "Message":"Message"
            }
            </example>
            <remarks>
            Creates a new Access Controls entry for a given Item. Access controls can only define a single Principal,
            which can be either a Group or User. The 'Principal' element is specified as an object - you should populate
            either the URL or the ID reference.
            
            If CanDownload is set to true, CanView will automatically be set to true.
            If CanDownload is set to false, CanDelete will be set to false.
            In order for a user/group to be able to manage permissions, they must be able to upload, download, and delete. Otherwise it will be set to false.
            
            This endpoint can return an AsyncOperation if the request is to be fulfilled asynchronously
            </remarks>
            <param name="url"></param>
            <param name="accessControl"></param>
            <param name="recursive"></param>
            <param name="message"></param>
            <param name="sendDefaultNotification"></param>
            <returns>
            the created or modified AccessControl instance, or AsyncOperation
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccessControlsEntity.UpdateByItem(System.Uri,ShareFile.Api.Client.Models.AccessControl,System.Boolean)">
            <summary>
            Update AccessControl
            </summary>
            <example>
            {
            "Principal":{"Email":"user@domain.com"},
            "CanUpload":true,
            "CanDownload":true,
            "CanView":true,
            "CanDelete":true,
            "CanManagePermissions":true
            }
            </example>
            <remarks>
            Updates an existing Access Controls of a given Item. The Principal element cannot be modified, it is provided
            in the Body to identity the AccessControl element to be modified. You can provide an ID, Email or URL on the
            Principal object.
            
            This endpoint can return an AsyncOperation if the request is to be fulfilled asynchronously
            </remarks>
            <param name="url"></param>
            <param name="accessControl"></param>
            <param name="recursive"></param>
            <returns>
            the created or modified AccessControl instance, or AsyncOperation
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccessControlsEntity.Delete(System.Uri)">
            <summary>
            Delete AccessControl
            </summary>
            <remarks>
            Deletes an AccessControl entry by itemID and principalID. This method does not return any object, a 204 (No Content)
            response indicates success.
            </remarks>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccessControlsEntity.BulkSet(System.Uri,ShareFile.Api.Client.Models.AccessControlsBulkParams)">
            <summary>
            Create or Update multiple AccessControls for a given Item
            </summary>
            <example>
            {
            "NotifyUser":true,
            "NotifyMessage":"msg",
            
            "AccessControlParams":
            [
            {
            "AccessControl":
            {
            "Principal" : { "Id":"existing_user_id" },
            "CanUpload" : true,
            "CanDownload" : false,
            "CanView" : true
            },
            "NotifyUser":false
            },
            {
            "AccessControl":
            {
            "Principal" : { "Id":"group_id" },
            "CanUpload" : false,
            "CanDownload" : true,
            "CanView" : true
            },
            "Recursive":true
            },
            {
            "AccessControl":
            {
            "Principal" : { "Email":"new_or_existing_user@a.com" },
            "CanUpload" : false,
            "CanDownload" : true,
            "CanView" : true
            }
            }
            ]
            }
            </example>
            <remarks>
            All the AccessControls are created or updated for a single Item identified by the Item id in the URI. AccessControl.Item Ids are not allowed.
            If an AccessControl doesn't specify NotifyUser or NotifyMessage property their values are inherited from the corresponding
            top-level properties.
            The Principal can be identified by Id or Email (Users). If a User with the specified email does not exist it will be created.
            Defaults for NotifyUser and Recursive are false.
            See AccessControlsBulkParams for other details.
            </remarks>
            <param name="url"></param>
            <param name="bulkParams"></param>
            <returns>
            AccessControlBulkResult
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccessControlsEntity.BulkSetForPrincipal(ShareFile.Api.Client.Models.AccessControlsBulkParams,System.String)">
            <summary>
            Update multiple access controls for a single principal
            </summary>
            <example>
            {
            "NotifyUser":true,
            "NotifyMessage":"msg",
            
            "AccessControlParams":
            [
            {
            "AccessControl":
            {
            "Item": { "Id": "item-id-1" },
            "Principal" : { "Id":"existing_user_id" },
            "CanUpload" : true,
            "CanDownload" : false,
            "CanView" : true
            },
            "NotifyUser":false
            },
            {
            "AccessControl":
            {
            "Item": { "Id": "item-id-3" },
            "Principal" : { "Id":"group_id" },
            "CanUpload" : false,
            "CanDownload" : true,
            "CanView" : true
            },
            "Recursive":true
            },
            {
            "AccessControl":
            {
            "Item": { "Id": "item-id-2" },
            "Principal" : { "Email":"new_or_existing_user@a.com" },
            "CanUpload" : false,
            "CanDownload" : true,
            "CanView" : true
            }
            }
            ]
            }
            </example>
            <param name="principalId"></param>
            <param name="bulkParams"></param>
            <returns>
            AccessControlBulkResult
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccessControlsEntity.Clone(ShareFile.Api.Client.Models.AccessControlsCloneParams)">
            <summary>
            Recursively clones multiple access controls for multiple principals
            </summary>
            <example>
            {
            "FolderId":"top-level-folder-id",
            "PrincipalId":"source-user-or-group-id",
            "ClonePrincipalIds":
            [
            "clone-user-or-group-id-1",
            "clone-user-or-group-id-2",
            "clone-user-or-group-id-3"
            ]
            }
            </example>
            <param name="accessControlsCloneParams"></param>
            <returns>
            Cloned access controls
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccessControlsEntity.BulkDelete(System.Uri,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Delete multiple access controls
            </summary>
            <example>
            ["id1","id2"]
            </example>
            <param name="folderUrl"></param>
            <param name="principalIds"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccessControlsEntity.BulkDeleteForPrincipal(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Delete multiple access controls for principal
            </summary>
            <example>
            ["id1","id2"]
            </example>
            <param name="principalId"></param>
            <param name="folderIds"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccessControlsEntity.NotifyUsers(System.Uri,ShareFile.Api.Client.Models.NotifyUsersParams)">
            <summary>
            Notify users that they have access to the parent folder
            </summary>
            <example>
            {
            UserIds: ["id1", "id2"],
            CustomMessage: "Message content goes here"
            }
            </example>
            <remarks>
            All users should have access to the parent folder
            </remarks>
            <param name="folderUrl"></param>
            <param name="notifyUsersParams"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccessControlsEntity.NotifyUsersPreview(System.Uri,ShareFile.Api.Client.Models.NotifyUsersParams)">
            <summary>
            Shows preview of the folder user email
            </summary>
            <param name="folderUrl"></param>
            <param name="notifyUsersParams"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccessControlsEntity.Get(System.Uri)">
            <summary>
            Get AccessControl by ID
            </summary>
            <remarks>
            Retrieves a single Access Control entry for a given Item and Principal
            </remarks>
            <returns>
            A single AccessControl object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccessControlsEntity.GetByItem(System.Uri)">
            <summary>
            Get AccessControl List By Item
            </summary>
            <remarks>
            Retrieves the Access Control List for a given Item.
            </remarks>
            <param name="url"></param>
            <returns>
            Access Control List of the given object ID.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccessControlsEntity.CreateByItem(System.Uri,ShareFile.Api.Client.Models.AccessControl,System.Boolean,System.Boolean,System.String)">
            <summary>
            Create AccessControl
            </summary>
            <example>
            {
            "Principal":{"url":"https://account.sf-api.com/v3/Groups(id)"},
            "CanUpload":true,
            "CanDownload":true,
            "CanView":true,
            "CanDelete":true,
            "CanManagePermissions":true,
            "Message":"Message"
            }
            </example>
            <remarks>
            Creates a new Access Controls entry for a given Item. Access controls can only define a single Principal,
            which can be either a Group or User. The 'Principal' element is specified as an object - you should populate
            either the URL or the ID reference.
            
            If CanDownload is set to true, CanView will automatically be set to true.
            If CanDownload is set to false, CanDelete will be set to false.
            In order for a user/group to be able to manage permissions, they must be able to upload, download, and delete. Otherwise it will be set to false.
            
            This endpoint can return an AsyncOperation if the request is to be fulfilled asynchronously
            </remarks>
            <param name="url"></param>
            <param name="accessControl"></param>
            <param name="recursive"></param>
            <param name="message"></param>
            <param name="sendDefaultNotification"></param>
            <returns>
            the created or modified AccessControl instance, or AsyncOperation
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccessControlsEntity.UpdateByItem(System.Uri,ShareFile.Api.Client.Models.AccessControl,System.Boolean)">
            <summary>
            Update AccessControl
            </summary>
            <example>
            {
            "Principal":{"Email":"user@domain.com"},
            "CanUpload":true,
            "CanDownload":true,
            "CanView":true,
            "CanDelete":true,
            "CanManagePermissions":true
            }
            </example>
            <remarks>
            Updates an existing Access Controls of a given Item. The Principal element cannot be modified, it is provided
            in the Body to identity the AccessControl element to be modified. You can provide an ID, Email or URL on the
            Principal object.
            
            This endpoint can return an AsyncOperation if the request is to be fulfilled asynchronously
            </remarks>
            <param name="url"></param>
            <param name="accessControl"></param>
            <param name="recursive"></param>
            <returns>
            the created or modified AccessControl instance, or AsyncOperation
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccessControlsEntity.Delete(System.Uri)">
            <summary>
            Delete AccessControl
            </summary>
            <remarks>
            Deletes an AccessControl entry by itemID and principalID. This method does not return any object, a 204 (No Content)
            response indicates success.
            </remarks>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccessControlsEntity.BulkSet(System.Uri,ShareFile.Api.Client.Models.AccessControlsBulkParams)">
            <summary>
            Create or Update multiple AccessControls for a given Item
            </summary>
            <example>
            {
            "NotifyUser":true,
            "NotifyMessage":"msg",
            
            "AccessControlParams":
            [
            {
            "AccessControl":
            {
            "Principal" : { "Id":"existing_user_id" },
            "CanUpload" : true,
            "CanDownload" : false,
            "CanView" : true
            },
            "NotifyUser":false
            },
            {
            "AccessControl":
            {
            "Principal" : { "Id":"group_id" },
            "CanUpload" : false,
            "CanDownload" : true,
            "CanView" : true
            },
            "Recursive":true
            },
            {
            "AccessControl":
            {
            "Principal" : { "Email":"new_or_existing_user@a.com" },
            "CanUpload" : false,
            "CanDownload" : true,
            "CanView" : true
            }
            }
            ]
            }
            </example>
            <remarks>
            All the AccessControls are created or updated for a single Item identified by the Item id in the URI. AccessControl.Item Ids are not allowed.
            If an AccessControl doesn't specify NotifyUser or NotifyMessage property their values are inherited from the corresponding
            top-level properties.
            The Principal can be identified by Id or Email (Users). If a User with the specified email does not exist it will be created.
            Defaults for NotifyUser and Recursive are false.
            See AccessControlsBulkParams for other details.
            </remarks>
            <param name="url"></param>
            <param name="bulkParams"></param>
            <returns>
            AccessControlBulkResult
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccessControlsEntity.BulkSetForPrincipal(ShareFile.Api.Client.Models.AccessControlsBulkParams,System.String)">
            <summary>
            Update multiple access controls for a single principal
            </summary>
            <example>
            {
            "NotifyUser":true,
            "NotifyMessage":"msg",
            
            "AccessControlParams":
            [
            {
            "AccessControl":
            {
            "Item": { "Id": "item-id-1" },
            "Principal" : { "Id":"existing_user_id" },
            "CanUpload" : true,
            "CanDownload" : false,
            "CanView" : true
            },
            "NotifyUser":false
            },
            {
            "AccessControl":
            {
            "Item": { "Id": "item-id-3" },
            "Principal" : { "Id":"group_id" },
            "CanUpload" : false,
            "CanDownload" : true,
            "CanView" : true
            },
            "Recursive":true
            },
            {
            "AccessControl":
            {
            "Item": { "Id": "item-id-2" },
            "Principal" : { "Email":"new_or_existing_user@a.com" },
            "CanUpload" : false,
            "CanDownload" : true,
            "CanView" : true
            }
            }
            ]
            }
            </example>
            <param name="principalId"></param>
            <param name="bulkParams"></param>
            <returns>
            AccessControlBulkResult
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccessControlsEntity.Clone(ShareFile.Api.Client.Models.AccessControlsCloneParams)">
            <summary>
            Recursively clones multiple access controls for multiple principals
            </summary>
            <example>
            {
            "FolderId":"top-level-folder-id",
            "PrincipalId":"source-user-or-group-id",
            "ClonePrincipalIds":
            [
            "clone-user-or-group-id-1",
            "clone-user-or-group-id-2",
            "clone-user-or-group-id-3"
            ]
            }
            </example>
            <param name="accessControlsCloneParams"></param>
            <returns>
            Cloned access controls
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccessControlsEntity.BulkDelete(System.Uri,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Delete multiple access controls
            </summary>
            <example>
            ["id1","id2"]
            </example>
            <param name="folderUrl"></param>
            <param name="principalIds"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccessControlsEntity.BulkDeleteForPrincipal(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Delete multiple access controls for principal
            </summary>
            <example>
            ["id1","id2"]
            </example>
            <param name="principalId"></param>
            <param name="folderIds"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccessControlsEntity.NotifyUsers(System.Uri,ShareFile.Api.Client.Models.NotifyUsersParams)">
            <summary>
            Notify users that they have access to the parent folder
            </summary>
            <example>
            {
            UserIds: ["id1", "id2"],
            CustomMessage: "Message content goes here"
            }
            </example>
            <remarks>
            All users should have access to the parent folder
            </remarks>
            <param name="folderUrl"></param>
            <param name="notifyUsersParams"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccessControlsEntity.NotifyUsersPreview(System.Uri,ShareFile.Api.Client.Models.NotifyUsersParams)">
            <summary>
            Shows preview of the folder user email
            </summary>
            <param name="folderUrl"></param>
            <param name="notifyUsersParams"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.Get(System.String)">
            <summary>
            Get current Account
            </summary>
            <remarks>
            Retrieves information about the Account defined in the call subdomain
            </remarks>
            <param name="id"></param>
            <returns>
            The subdomain account information
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetBranding">
            <summary>
            Get current Account branding
            </summary>
            <remarks>
            Retrievs Branding information about the subdomain account.
            This operation does not require authentication.
            </remarks>
            <returns>
            Branding information for a given sharefile account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.UpdateBranding(ShareFile.Api.Client.Models.Account)">
            <summary>
            Modify the Branding for this account
            </summary>
            <remarks>
            Modifies Branding information about the subdomain account.
            This operation requires authentication.
            </remarks>
            <returns>
            Branding information for a given sharefile account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetEmployees(System.Boolean)">
            <summary>
            Get List of current Account Employees
            </summary>
            <remarks>
            Retrives the list of Employees in the Account
            Employees are named users in the Account.
            </remarks>
            <param name="withRightSignature"></param>
            <returns>
            A Feed containing all Employees Contacts in the account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetClients">
            <summary>
            Get List of current Account Clients
            </summary>
            <remarks>
            Retrieves the list of Clients in the Account.
            Clients are restricted users of an Account, that can receive and send files
            to Employees, but have no other permissions besides basic sharing with Employees.
            </remarks>
            <returns>
            A Feed containing all Clients in the account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetAddressBook(System.String,System.String)">
            <summary>
            Get Account AddressBooks
            </summary>
            <remarks>
            Retrieves an address book from the account.
            Address Books are the contacts of Eployees and Clients, maintained on a personal or
            account-wide basis (shared).
            </remarks>
            <param name="type"></param>
            <param name="searchTerm"></param>
            <returns>
            A Feed of Contact objects representing the Address Book retrieved
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetMobileSecuritySettings">
            <summary>
            Get Account Mobile Security Settings
            </summary>
            <remarks>
            Returns the Mobile device configuration settings for this account
            </remarks>
            <returns>
            The current mobile security configuration for this account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetProductDefaults">
            <summary>
            Get Account Product Defaults
            </summary>
            <returns>
            Account defaults
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetPreferences">
            <summary>
            Get Account Preferences
            </summary>
            <returns>
            Account preferences
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetSSO(System.String,System.String)">
            <summary>
            Get Account Single Sign-On Configuration
            </summary>
            <remarks>
            Retrieve the Single Sign-on configuration for the Account
            </remarks>
            <param name="provider"></param>
            <param name="idpEntityId"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.UpdateSSO(ShareFile.Api.Client.Models.SSOAccountProvider,System.String)">
            <summary>
            Update Account Single Sign-On Configuration
            </summary>
            <example>
            {
            "LogoutUrl":"",
            "LoginUrl":"https://idp.com/signin",
            "IPRestrictions":"+all",
            "ForceSSO":true,
            "EntityID":"http://account.sf-api.com/saml/info",
            "SFEntityID":"http://idp.com/saml/info",
            "SPInitatedAuthContext":"exact",
            "SPInitatedAuthMethod":"urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport"
            }
            </example>
            <remarks>
            Modifies the Single Sign-on Configuration for this account.
            </remarks>
            <param name="sso"></param>
            <param name="provider"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetByUser(ShareFile.Api.Client.Models.ODataObject,System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Get List of Accounts for User
            </summary>
            <example>
            {
            "password":"password"
            }
            </example>
            <remarks>
            Retrieve the list of Accounts associated with a given user
            All parameters to this call may be passed in the Post body as root JSON parameters, or in the URI -
            with the exception of password that must be provided in the POST body.
            This operation does not require authentication
            </remarks>
            <param name="username"></param>
            <param name="password"></param>
            <param name="employeesonly"></param>
            <param name="requirehomefolders"></param>
            <param name="singleplane"></param>
            <param name="clientId"></param>
            <returns>
            The list of Accounts associated with this username/password.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.SendToEmail(System.String)">
            <summary>
            Email List of Accounts to User
            </summary>
            <remarks>
            Sends the list of accounts to the specified email address
            This operation does not require authentication
            </remarks>
            <param name="email"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetLoginAccessControlDomains">
            <summary>
            Get the Login Access Control List of domains
            </summary>
            <remarks>
            Retrieve the list of domains that are allowed or disallowed to login.
            Whether the list is an allow or disallow list
            is configured by the AccessControlType property. The domain names are checked against the domains of all the
            email addresses of the user that attempts to log in to the Account.
            </remarks>
            <returns>
            The Login Access Control List of domains for the Account.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetFolderAccessControlDomains">
            <summary>
            Get the Folder Access Control List of domains
            </summary>
            <remarks>
            Retrieve the list of domains that are allowed or disallowed to have access to folders. Whether the list is an allow or disallow list
            is configured by the AccessControlType property.
            
            The list blocks user access to folders by preventing adding a user to distribution groups or folders.
            The domain names are checked against the domains of all the email addresses of the user.
            This is an account-wide setting.
            </remarks>
            <returns>
            The Folder Access Control List of domains for the Account, e.g.
            
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB"]
            }
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.CreateLoginAccessControlDomains(ShareFile.Api.Client.Models.AccessControlDomains)">
            <summary>
            Create or replace the Login Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB"]
            }
            </example>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            The new Login Access Control List of domains for the Account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.CreateFolderAccessControlDomains(ShareFile.Api.Client.Models.AccessControlDomains)">
            <summary>
            Create or replace the Folder Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB"]
            }
            </example>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            The new Folder Access Control List of domains for the Account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.UpdateLoginAccessControlDomains(ShareFile.Api.Client.Models.AccessControlDomains)">
            <summary>
            Update the Login Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB"]
            }
            </example>
            <remarks>
            Merges the specified domains with existing domains in the list, and/or updates the AccessControlType. One of the parameters needs to be specified.
            </remarks>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            The updated Login Access Control List of domains for the Account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.UpdateFolderAccessControlDomains(ShareFile.Api.Client.Models.AccessControlDomains)">
            <summary>
            Update the Folder Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB"]
            }
            </example>
            <remarks>
            Merges the specified domains with existing domains in the list, and/or updates the AccessControlType. One of the parameters needs to be specified. It
            allows to add new domains to the list.
            </remarks>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            The updated Folder Access Control List of domains for the Account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.DeleteLoginAccessControlDomains(ShareFile.Api.Client.Models.AccessControlDomains)">
            <summary>
            Delete domains from the Logins Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB"]
            }
            </example>
            <remarks>
            Deletes the specified domains from the list.
            </remarks>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            No content
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.DeleteFolderAccessControlDomains(ShareFile.Api.Client.Models.AccessControlDomains)">
            <summary>
            Delete domains from the Folder Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB"]
            }
            </example>
            <remarks>
            Deletes the specified domains from the list.
            </remarks>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            No content
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.RequireWebPop(System.String,System.String,System.Boolean)">
            <summary>
            Check if WebPop is required
            </summary>
            <param name="subdomain"></param>
            <param name="username"></param>
            <param name="singlePlane"></param>
            <returns>
            RequireWebPopResult
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.RequireSubdomain(System.String,System.Boolean)">
            <summary>
            Check if subdomain is required
            </summary>
            <param name="username"></param>
            <param name="singlePlane"></param>
            <returns>
            RequireSubdomainResult
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.FindSubdomain(ShareFile.Api.Client.Models.FindSubdomainParams,System.Boolean)">
            <summary>
            Find Subdomain
            </summary>
            <example>
            {
            "UsernameShort":"usernameShort",
            "Password":"pass",
            "EmployeeOnly":false
            }
            </example>
            <remarks>
            Find the user account information based on the short username
            </remarks>
            <param name="findSubdomainParams"></param>
            <param name="singlePlane"></param>
            <returns>
            FindSubdomainResult
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetOutlookInformation">
            <summary>
            Get Outlook Information
            </summary>
            <returns>
            OutlookInformation
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetSSOInfo(System.String)">
            <summary>
            Get SSO Info
            </summary>
            <param name="subdomain"></param>
            <returns>
            SSOInfo
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetTenants">
            <summary>
            Get the tenants of a partner account
            </summary>
            <returns>
            List of tenant accounts managed by this partner account, if any
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.GetZones(System.String)">
            <summary>
            Get list of multi-tenant zones assigned to a tenant.
            </summary>
            <param name="parentid"></param>
            <returns>
            List of multi-tenant zones assigned to the tenant
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAccountsEntity.WebAppAdmin">
            <summary>
            Create a one-time use login Uri for the Web App.
            </summary>
            <returns>
            Redirection populated with link in Uri field
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.Get(System.String)">
            <summary>
            Get current Account
            </summary>
            <remarks>
            Retrieves information about the Account defined in the call subdomain
            </remarks>
            <param name="id"></param>
            <returns>
            The subdomain account information
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetBranding">
            <summary>
            Get current Account branding
            </summary>
            <remarks>
            Retrievs Branding information about the subdomain account.
            This operation does not require authentication.
            </remarks>
            <returns>
            Branding information for a given sharefile account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.UpdateBranding(ShareFile.Api.Client.Models.Account)">
            <summary>
            Modify the Branding for this account
            </summary>
            <remarks>
            Modifies Branding information about the subdomain account.
            This operation requires authentication.
            </remarks>
            <returns>
            Branding information for a given sharefile account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetEmployees(System.Boolean)">
            <summary>
            Get List of current Account Employees
            </summary>
            <remarks>
            Retrives the list of Employees in the Account
            Employees are named users in the Account.
            </remarks>
            <param name="withRightSignature"></param>
            <returns>
            A Feed containing all Employees Contacts in the account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetClients">
            <summary>
            Get List of current Account Clients
            </summary>
            <remarks>
            Retrieves the list of Clients in the Account.
            Clients are restricted users of an Account, that can receive and send files
            to Employees, but have no other permissions besides basic sharing with Employees.
            </remarks>
            <returns>
            A Feed containing all Clients in the account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetAddressBook(System.String,System.String)">
            <summary>
            Get Account AddressBooks
            </summary>
            <remarks>
            Retrieves an address book from the account.
            Address Books are the contacts of Eployees and Clients, maintained on a personal or
            account-wide basis (shared).
            </remarks>
            <param name="type"></param>
            <param name="searchTerm"></param>
            <returns>
            A Feed of Contact objects representing the Address Book retrieved
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetMobileSecuritySettings">
            <summary>
            Get Account Mobile Security Settings
            </summary>
            <remarks>
            Returns the Mobile device configuration settings for this account
            </remarks>
            <returns>
            The current mobile security configuration for this account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetProductDefaults">
            <summary>
            Get Account Product Defaults
            </summary>
            <returns>
            Account defaults
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetPreferences">
            <summary>
            Get Account Preferences
            </summary>
            <returns>
            Account preferences
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetSSO(System.String,System.String)">
            <summary>
            Get Account Single Sign-On Configuration
            </summary>
            <remarks>
            Retrieve the Single Sign-on configuration for the Account
            </remarks>
            <param name="provider"></param>
            <param name="idpEntityId"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.UpdateSSO(ShareFile.Api.Client.Models.SSOAccountProvider,System.String)">
            <summary>
            Update Account Single Sign-On Configuration
            </summary>
            <example>
            {
            "LogoutUrl":"",
            "LoginUrl":"https://idp.com/signin",
            "IPRestrictions":"+all",
            "ForceSSO":true,
            "EntityID":"http://account.sf-api.com/saml/info",
            "SFEntityID":"http://idp.com/saml/info",
            "SPInitatedAuthContext":"exact",
            "SPInitatedAuthMethod":"urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport"
            }
            </example>
            <remarks>
            Modifies the Single Sign-on Configuration for this account.
            </remarks>
            <param name="sso"></param>
            <param name="provider"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetByUser(ShareFile.Api.Client.Models.ODataObject,System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Get List of Accounts for User
            </summary>
            <example>
            {
            "password":"password"
            }
            </example>
            <remarks>
            Retrieve the list of Accounts associated with a given user
            All parameters to this call may be passed in the Post body as root JSON parameters, or in the URI -
            with the exception of password that must be provided in the POST body.
            This operation does not require authentication
            </remarks>
            <param name="username"></param>
            <param name="password"></param>
            <param name="employeesonly"></param>
            <param name="requirehomefolders"></param>
            <param name="singleplane"></param>
            <param name="clientId"></param>
            <returns>
            The list of Accounts associated with this username/password.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.SendToEmail(System.String)">
            <summary>
            Email List of Accounts to User
            </summary>
            <remarks>
            Sends the list of accounts to the specified email address
            This operation does not require authentication
            </remarks>
            <param name="email"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetLoginAccessControlDomains">
            <summary>
            Get the Login Access Control List of domains
            </summary>
            <remarks>
            Retrieve the list of domains that are allowed or disallowed to login.
            Whether the list is an allow or disallow list
            is configured by the AccessControlType property. The domain names are checked against the domains of all the
            email addresses of the user that attempts to log in to the Account.
            </remarks>
            <returns>
            The Login Access Control List of domains for the Account.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetFolderAccessControlDomains">
            <summary>
            Get the Folder Access Control List of domains
            </summary>
            <remarks>
            Retrieve the list of domains that are allowed or disallowed to have access to folders. Whether the list is an allow or disallow list
            is configured by the AccessControlType property.
            
            The list blocks user access to folders by preventing adding a user to distribution groups or folders.
            The domain names are checked against the domains of all the email addresses of the user.
            This is an account-wide setting.
            </remarks>
            <returns>
            The Folder Access Control List of domains for the Account, e.g.
            
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB"]
            }
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.CreateLoginAccessControlDomains(ShareFile.Api.Client.Models.AccessControlDomains)">
            <summary>
            Create or replace the Login Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB"]
            }
            </example>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            The new Login Access Control List of domains for the Account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.CreateFolderAccessControlDomains(ShareFile.Api.Client.Models.AccessControlDomains)">
            <summary>
            Create or replace the Folder Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB"]
            }
            </example>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            The new Folder Access Control List of domains for the Account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.UpdateLoginAccessControlDomains(ShareFile.Api.Client.Models.AccessControlDomains)">
            <summary>
            Update the Login Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB"]
            }
            </example>
            <remarks>
            Merges the specified domains with existing domains in the list, and/or updates the AccessControlType. One of the parameters needs to be specified.
            </remarks>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            The updated Login Access Control List of domains for the Account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.UpdateFolderAccessControlDomains(ShareFile.Api.Client.Models.AccessControlDomains)">
            <summary>
            Update the Folder Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB"]
            }
            </example>
            <remarks>
            Merges the specified domains with existing domains in the list, and/or updates the AccessControlType. One of the parameters needs to be specified. It
            allows to add new domains to the list.
            </remarks>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            The updated Folder Access Control List of domains for the Account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.DeleteLoginAccessControlDomains(ShareFile.Api.Client.Models.AccessControlDomains)">
            <summary>
            Delete domains from the Logins Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB"]
            }
            </example>
            <remarks>
            Deletes the specified domains from the list.
            </remarks>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            No content
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.DeleteFolderAccessControlDomains(ShareFile.Api.Client.Models.AccessControlDomains)">
            <summary>
            Delete domains from the Folder Access Control List of domains
            </summary>
            <example>
            {
            "AccessControlType" : "AllowedDomains",
            "Domains": ["domainA", "domainB"]
            }
            </example>
            <remarks>
            Deletes the specified domains from the list.
            </remarks>
            <param name="AccessControlType"></param>
            <param name="Domains"></param>
            <returns>
            No content
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.RequireWebPop(System.String,System.String,System.Boolean)">
            <summary>
            Check if WebPop is required
            </summary>
            <param name="subdomain"></param>
            <param name="username"></param>
            <param name="singlePlane"></param>
            <returns>
            RequireWebPopResult
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.RequireSubdomain(System.String,System.Boolean)">
            <summary>
            Check if subdomain is required
            </summary>
            <param name="username"></param>
            <param name="singlePlane"></param>
            <returns>
            RequireSubdomainResult
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.FindSubdomain(ShareFile.Api.Client.Models.FindSubdomainParams,System.Boolean)">
            <summary>
            Find Subdomain
            </summary>
            <example>
            {
            "UsernameShort":"usernameShort",
            "Password":"pass",
            "EmployeeOnly":false
            }
            </example>
            <remarks>
            Find the user account information based on the short username
            </remarks>
            <param name="findSubdomainParams"></param>
            <param name="singlePlane"></param>
            <returns>
            FindSubdomainResult
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetOutlookInformation">
            <summary>
            Get Outlook Information
            </summary>
            <returns>
            OutlookInformation
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetSSOInfo(System.String)">
            <summary>
            Get SSO Info
            </summary>
            <param name="subdomain"></param>
            <returns>
            SSOInfo
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetTenants">
            <summary>
            Get the tenants of a partner account
            </summary>
            <returns>
            List of tenant accounts managed by this partner account, if any
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.GetZones(System.String)">
            <summary>
            Get list of multi-tenant zones assigned to a tenant.
            </summary>
            <param name="parentid"></param>
            <returns>
            List of multi-tenant zones assigned to the tenant
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AccountsEntity.WebAppAdmin">
            <summary>
            Create a one-time use login Uri for the Web App.
            </summary>
            <returns>
            Redirection populated with link in Uri field
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAppsEntity.Get">
            <summary>
            Get Apps for Current User
            </summary>
            <returns>
            A feed of ConnectedApp objects
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAppsEntity.GetByUser(System.Uri)">
            <summary>
            Get Apps for given User
            </summary>
            <param name="userUrl"></param>
            <returns>
            A feed of ConnectedApp objects
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAppsEntity.GetByUser(System.Uri,System.String)">
            <summary>
            Get App by ID
            </summary>
            <param name="userUrl"></param>
            <param name="appid"></param>
            <returns>
            ConnectedApp
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAppsEntity.Delete(System.Uri)">
            <summary>
            Revoke App access for Current User
            </summary>
            <param name="userid"></param>
            <param name="appUrl"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAppsEntity.DeleteByUser(System.Uri,System.String)">
            <summary>
            Revoke App access for a given User
            </summary>
            <param name="userUrl"></param>
            <param name="appid"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAppsEntity.TFA">
            <summary>
            Get all Two Factor Authentication Apps for the Current User
            </summary>
            <returns>
            A feed of TwoFactorAuthApp objects
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAppsEntity.TFA(System.String)">
            <summary>
            Get Two Factor Authentication App by ID for the Current User
            </summary>
            <param name="appid"></param>
            <returns>
            TwoFactorAuthApp
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAppsEntity.DeleteTFA(System.String)">
            <summary>
            Revoke Two Factor Auth App by ID
            </summary>
            <param name="tfaAppId"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAppsEntity.DeleteTFA(System.Uri,System.String)">
            <summary>
            Revoke Two Factor Auth App by ID
            </summary>
            <param name="userUrl"></param>
            <param name="tfaAppId"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AppsEntity.Get">
            <summary>
            Get Apps for Current User
            </summary>
            <returns>
            A feed of ConnectedApp objects
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AppsEntity.GetByUser(System.Uri)">
            <summary>
            Get Apps for given User
            </summary>
            <param name="userUrl"></param>
            <returns>
            A feed of ConnectedApp objects
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AppsEntity.GetByUser(System.Uri,System.String)">
            <summary>
            Get App by ID
            </summary>
            <param name="userUrl"></param>
            <param name="appid"></param>
            <returns>
            ConnectedApp
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AppsEntity.Delete(System.Uri)">
            <summary>
            Revoke App access for Current User
            </summary>
            <param name="userid"></param>
            <param name="appUrl"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AppsEntity.DeleteByUser(System.Uri,System.String)">
            <summary>
            Revoke App access for a given User
            </summary>
            <param name="userUrl"></param>
            <param name="appid"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AppsEntity.TFA">
            <summary>
            Get all Two Factor Authentication Apps for the Current User
            </summary>
            <returns>
            A feed of TwoFactorAuthApp objects
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AppsEntity.TFA(System.String)">
            <summary>
            Get Two Factor Authentication App by ID for the Current User
            </summary>
            <param name="appid"></param>
            <returns>
            TwoFactorAuthApp
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AppsEntity.DeleteTFA(System.String)">
            <summary>
            Revoke Two Factor Auth App by ID
            </summary>
            <param name="tfaAppId"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AppsEntity.DeleteTFA(System.Uri,System.String)">
            <summary>
            Revoke Two Factor Auth App by ID
            </summary>
            <param name="userUrl"></param>
            <param name="tfaAppId"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAsyncOperationsEntity.Get(System.Uri)">
            <summary>
            Get AsyncOperation by ID
            </summary>
            <remarks>
            Retrieve a single Async Op record by ID
            </remarks>
            <param name="url"></param>
            <returns>
            A single Async Operation record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAsyncOperationsEntity.GetByBatch(System.String)">
            <summary>
            Get List of AsyncOperations by Operation Batch ID
            </summary>
            <remarks>
            Retrieves all AsyncOperations on the specified batch
            </remarks>
            <param name="id"></param>
            <returns>
            A Feed of AsyncOperation objects, containing all items in the specified batch
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAsyncOperationsEntity.GetBatch(System.String)">
            <summary>
            Get progress of AsyncOperations by Operation Batch ID
            </summary>
            <remarks>
            Retrieves an AsyncOperation containing batch progress by Operation Batch ID
            </remarks>
            <param name="id"></param>
            <returns>
            An Async Operation object containing batch progress
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAsyncOperationsEntity.GetByFolder(System.String)">
            <summary>
            Get List of AsyncOperations by Folder
            </summary>
            <remarks>
            Retrieves all AsyncOperations associated with the calling user and the Item ID
            </remarks>
            <param name="id"></param>
            <returns>
            A Feed of AsyncOperation objects, containing all pending operations in the specific folder,
            for the authenticated SDK user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAsyncOperationsEntity.Cancel(System.Uri)">
            <summary>
            Cancel AsyncOperation
            </summary>
            <remarks>
            Cancels a single Async operation record
            </remarks>
            <param name="url"></param>
            <returns>
            The modified Async Operation record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAsyncOperationsEntity.Delete(System.Uri)">
            <summary>
            Delete AsyncOperation
            </summary>
            <remarks>
            Cancels a single Async operation record (same as /Cancel)
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAsyncOperationsEntity.CancelBatch(System.String)">
            <summary>
            Cancel an Operation Batch
            </summary>
            <remarks>
            Cancel an Async Operation batch - all unfinished Async Operation records in that batch
            will be moved to Cancelled state.
            </remarks>
            <param name="id"></param>
            <returns>
            A list of the modified Async Operations in the batch
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IAsyncOperationsEntity.Update(System.Uri,ShareFile.Api.Client.Models.AsyncOperation)">
            <summary>
            Changes the state of an AsyncOperation
            </summary>
            <example>
            { "State": "..." }
            </example>
            <remarks>
            Only the State parameter is updated, other fields are ignored
            </remarks>
            <param name="url"></param>
            <param name="newAsyncOp"></param>
            <returns>
            The modified Async Operation
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AsyncOperationsEntity.Get(System.Uri)">
            <summary>
            Get AsyncOperation by ID
            </summary>
            <remarks>
            Retrieve a single Async Op record by ID
            </remarks>
            <param name="url"></param>
            <returns>
            A single Async Operation record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AsyncOperationsEntity.GetByBatch(System.String)">
            <summary>
            Get List of AsyncOperations by Operation Batch ID
            </summary>
            <remarks>
            Retrieves all AsyncOperations on the specified batch
            </remarks>
            <param name="id"></param>
            <returns>
            A Feed of AsyncOperation objects, containing all items in the specified batch
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AsyncOperationsEntity.GetBatch(System.String)">
            <summary>
            Get progress of AsyncOperations by Operation Batch ID
            </summary>
            <remarks>
            Retrieves an AsyncOperation containing batch progress by Operation Batch ID
            </remarks>
            <param name="id"></param>
            <returns>
            An Async Operation object containing batch progress
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AsyncOperationsEntity.GetByFolder(System.String)">
            <summary>
            Get List of AsyncOperations by Folder
            </summary>
            <remarks>
            Retrieves all AsyncOperations associated with the calling user and the Item ID
            </remarks>
            <param name="id"></param>
            <returns>
            A Feed of AsyncOperation objects, containing all pending operations in the specific folder,
            for the authenticated SDK user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AsyncOperationsEntity.Cancel(System.Uri)">
            <summary>
            Cancel AsyncOperation
            </summary>
            <remarks>
            Cancels a single Async operation record
            </remarks>
            <param name="url"></param>
            <returns>
            The modified Async Operation record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AsyncOperationsEntity.Delete(System.Uri)">
            <summary>
            Delete AsyncOperation
            </summary>
            <remarks>
            Cancels a single Async operation record (same as /Cancel)
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AsyncOperationsEntity.CancelBatch(System.String)">
            <summary>
            Cancel an Operation Batch
            </summary>
            <remarks>
            Cancel an Async Operation batch - all unfinished Async Operation records in that batch
            will be moved to Cancelled state.
            </remarks>
            <param name="id"></param>
            <returns>
            A list of the modified Async Operations in the batch
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.AsyncOperationsEntity.Update(System.Uri,ShareFile.Api.Client.Models.AsyncOperation)">
            <summary>
            Changes the state of an AsyncOperation
            </summary>
            <example>
            { "State": "..." }
            </example>
            <remarks>
            Only the State parameter is updated, other fields are ignored
            </remarks>
            <param name="url"></param>
            <param name="newAsyncOp"></param>
            <returns>
            The modified Async Operation
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ICapabilitiesEntity.Get">
            <summary>
            Get List of Capabilities
            </summary>
            <remarks>
            Retrieves the capability list of a given provider.
            The URL for ShareFile API is of the form Domain/Provider/Version/EntityThe Domain is the server presenting the provider - typically sharefile.com,
            but can be any other when using Storage Zones. The Provider represent the kind of data storage connected by the API. Examples
            are 'sf' for ShareFile; 'cifs' for CIFS; and 'sp' for SharePoint. Other providers
            may be created, clients must not assume any particular string.Version specifies the API version - currently at V3. Any backward incompatible
            changes will be performed on a different version identifier, to avoid breaking
            existing clients.The Capability document is used to indicate to clients that certain features
            are not available on a given provider - allowing the client to suppress UX controls
            and avoid "Not Implemented" exceptions to the end-user.
            </remarks>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.CapabilitiesEntity.Get">
            <summary>
            Get List of Capabilities
            </summary>
            <remarks>
            Retrieves the capability list of a given provider.
            The URL for ShareFile API is of the form Domain/Provider/Version/EntityThe Domain is the server presenting the provider - typically sharefile.com,
            but can be any other when using Storage Zones. The Provider represent the kind of data storage connected by the API. Examples
            are 'sf' for ShareFile; 'cifs' for CIFS; and 'sp' for SharePoint. Other providers
            may be created, clients must not assume any particular string.Version specifies the API version - currently at V3. Any backward incompatible
            changes will be performed on a different version identifier, to avoid breaking
            existing clients.The Capability document is used to indicate to clients that certain features
            are not available on a given provider - allowing the client to suppress UX controls
            and avoid "Not Implemented" exceptions to the end-user.
            </remarks>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.Get">
            <summary>
            Get all Connector Groups in the account
            </summary>
            <remarks>
            Retrieves a Connector Group
            </remarks>
            <returns>
            A single ConnectorGroup object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.Get(System.Uri)">
            <summary>
            Get the Connector Group by Service ID
            </summary>
            <remarks>
            Retrieves a Connector Group
            </remarks>
            <param name="url"></param>
            <returns>
            A single ConnectorGroup object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.ByProvider(System.String)">
            <summary>
            Get the Connector Group by Provider
            </summary>
            <param name="provider"></param>
            <returns>
            A single ConnectorGroup matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.GetZones(System.Uri,System.String)">
            <summary>
            Get the Connector Group by Service ID
            </summary>
            <remarks>
            Retrieves a Connector Group
            </remarks>
            <param name="id"></param>
            <returns>
            A single ConnectorGroup object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.GetAccessControls(System.Uri,System.String)">
            <summary>
            Get an Access Control element
            </summary>
            <remarks>
            Retrieves a Connector Group Access Control of a given user
            </remarks>
            <param name="parentUrl"></param>
            <param name="id"></param>
            <returns>
            A single ConnectorGroup ACL object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.GetByZone(System.String)">
            <summary>
            Get Connector Groups in a Zone
            </summary>
            <remarks>
            Retrieves the Connector Groups defined in a Zone.
            </remarks>
            <param name="zoneid"></param>
            <returns>
            Access Control List of the given object ID.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.Create(ShareFile.Api.Client.Models.ConnectorGroup)">
            <summary>
            Create a Connector Group associated with a Zone
            </summary>
            <example>
            {
            "Zones":[ {
            "Zone": {"Id":"ZoneId"},
            "StorageCenter": [ { "Id":"StorageCenterId001" }, { "Id":"StorageCenterId002" } ],
            "ApiVersionMin":"v3",
            "ApiVersionMax":"v3",
            "IconUrl":"https://domain/icons",
            "FormUrl":"https://domain/forms"
            } ],
            "Id":"ServiceId",
            "Name":"Name",
            "Provider":"svc"
            }
            </example>
            <remarks>
            Creates a new Connector Group, or adds a Zone to an existing Connector Group if the Group is already associated
            with another Zone. The caller doesn't have to check if the group exists or not - just call this API passing
            the Service ID and the associated Zone information.
            </remarks>
            <param name="id"></param>
            <param name="connectorGroup"></param>
            <returns>
            the created or modified AccessControl instance
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.CreateZones(System.Uri,ShareFile.Api.Client.Models.ConnectorGroupZone)">
            <summary>
            Associates a Zone with an existing Connector Group
            </summary>
            <example>
            {
            "Zone": {"Id":"ZoneId"},
            "StorageCenter": [ { "Id":"StorageCenterId001" }, { "Id":"StorageCenterId002" } ],
            "ApiVersionMin":"v3",
            "ApiVersionMax":"v3",
            "IconUrl":"https://domain/icons",
            "FormUrl":"https://domain/forms"
            }
            </example>
            <remarks>
            Adds a Zone to an existing Connector Group.
            </remarks>
            <param name="url"></param>
            <param name="connectorGroupZone"></param>
            <returns>
            the created or modified ConnectorGroupZone instance
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.CreateAccessControls(System.Uri,ShareFile.Api.Client.Models.ConnectorGroupAccessControl)">
            <summary>
            Adds a new principal to the Connector Group Access Control List
            </summary>
            <example>
            {
            "Principal": {"Id":"PrincipalId"},
            "CanCreate":"true",
            "CanManage":"true"
            }
            </example>
            <param name="url"></param>
            <param name="connectorGroupAcl"></param>
            <returns>
            The created access control list object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.UpdateZones(System.Uri,System.String,ShareFile.Api.Client.Models.ConnectorGroupZone)">
            <summary>
            Modifies the parameters of a Connector Group in associated with a Zone
            </summary>
            <example>
            {
            "Zone": {"Id":"ZoneId"},
            "ApiVersionMin":"v3",
            "ApiVersionMax":"v3",
            "IconUrl":"https://domain/icons",
            "FormUrl":"https://domain/forms"
            }
            </example>
            <param name="url"></param>
            <param name="zoneId"></param>
            <param name="connectorGroupZone"></param>
            <returns>
            the created or modified ConnectorGroupZone instance
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.Delete(System.Uri)">
            <summary>
            Removes a Connector Group
            </summary>
            <remarks>
            Removes a Connector Group and all associations from Zones
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.DeleteZones(System.Uri,System.String)">
            <summary>
            Removes a Connector Group association with a Zone
            </summary>
            <remarks>
            Removes a Connector Group association with a Zone. Connector Groups are automatically removed
            once the groups is removed from all the Zones.
            </remarks>
            <param name="serviceUrl"></param>
            <param name="zoneid"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.DeleteAccessControls(System.Uri,System.String)">
            <summary>
            Removes a Connector Group Access Control object
            </summary>
            <remarks>
            Removes an Access Control object from the Connector Group ACL. This removes the permissions of
            the affected principal to use the Connector Group.
            </remarks>
            <param name="serviceUrl"></param>
            <param name="zoneid"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.GetStorageCenters(System.Uri,System.String)">
            <summary>
            Retrieve the list of Storage Centers associated with a Connector Group
            </summary>
            <remarks>
            Retrieve the list of storage centers associated with a Connector Group.
            </remarks>
            <param name="url"></param>
            <param name="zoneid"></param>
            <returns>
            The modified Connector Group
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IConnectorGroupsEntity.CreateStorageCenters(System.Uri,System.String,ShareFile.Api.Client.Models.StorageCenter)">
            <summary>
            Adds a Connector Group to a Storage Center
            </summary>
            <example>
            {
            "Id":"storageCenterId"
            }
            </example>
            <remarks>
            Associate a Connector Group with a Storage Center. The Connector Group has to be
            associated with the Storage Center Zone.
            </remarks>
            <param name="url"></param>
            <param name="zoneid"></param>
            <returns>
            The modified Connector Group
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.Get">
            <summary>
            Get all Connector Groups in the account
            </summary>
            <remarks>
            Retrieves a Connector Group
            </remarks>
            <returns>
            A single ConnectorGroup object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.Get(System.Uri)">
            <summary>
            Get the Connector Group by Service ID
            </summary>
            <remarks>
            Retrieves a Connector Group
            </remarks>
            <param name="url"></param>
            <returns>
            A single ConnectorGroup object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.ByProvider(System.String)">
            <summary>
            Get the Connector Group by Provider
            </summary>
            <param name="provider"></param>
            <returns>
            A single ConnectorGroup matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.GetZones(System.Uri,System.String)">
            <summary>
            Get the Connector Group by Service ID
            </summary>
            <remarks>
            Retrieves a Connector Group
            </remarks>
            <param name="id"></param>
            <returns>
            A single ConnectorGroup object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.GetAccessControls(System.Uri,System.String)">
            <summary>
            Get an Access Control element
            </summary>
            <remarks>
            Retrieves a Connector Group Access Control of a given user
            </remarks>
            <param name="parentUrl"></param>
            <param name="id"></param>
            <returns>
            A single ConnectorGroup ACL object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.GetByZone(System.String)">
            <summary>
            Get Connector Groups in a Zone
            </summary>
            <remarks>
            Retrieves the Connector Groups defined in a Zone.
            </remarks>
            <param name="zoneid"></param>
            <returns>
            Access Control List of the given object ID.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.Create(ShareFile.Api.Client.Models.ConnectorGroup)">
            <summary>
            Create a Connector Group associated with a Zone
            </summary>
            <example>
            {
            "Zones":[ {
            "Zone": {"Id":"ZoneId"},
            "StorageCenter": [ { "Id":"StorageCenterId001" }, { "Id":"StorageCenterId002" } ],
            "ApiVersionMin":"v3",
            "ApiVersionMax":"v3",
            "IconUrl":"https://domain/icons",
            "FormUrl":"https://domain/forms"
            } ],
            "Id":"ServiceId",
            "Name":"Name",
            "Provider":"svc"
            }
            </example>
            <remarks>
            Creates a new Connector Group, or adds a Zone to an existing Connector Group if the Group is already associated
            with another Zone. The caller doesn't have to check if the group exists or not - just call this API passing
            the Service ID and the associated Zone information.
            </remarks>
            <param name="id"></param>
            <param name="connectorGroup"></param>
            <returns>
            the created or modified AccessControl instance
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.CreateZones(System.Uri,ShareFile.Api.Client.Models.ConnectorGroupZone)">
            <summary>
            Associates a Zone with an existing Connector Group
            </summary>
            <example>
            {
            "Zone": {"Id":"ZoneId"},
            "StorageCenter": [ { "Id":"StorageCenterId001" }, { "Id":"StorageCenterId002" } ],
            "ApiVersionMin":"v3",
            "ApiVersionMax":"v3",
            "IconUrl":"https://domain/icons",
            "FormUrl":"https://domain/forms"
            }
            </example>
            <remarks>
            Adds a Zone to an existing Connector Group.
            </remarks>
            <param name="url"></param>
            <param name="connectorGroupZone"></param>
            <returns>
            the created or modified ConnectorGroupZone instance
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.CreateAccessControls(System.Uri,ShareFile.Api.Client.Models.ConnectorGroupAccessControl)">
            <summary>
            Adds a new principal to the Connector Group Access Control List
            </summary>
            <example>
            {
            "Principal": {"Id":"PrincipalId"},
            "CanCreate":"true",
            "CanManage":"true"
            }
            </example>
            <param name="url"></param>
            <param name="connectorGroupAcl"></param>
            <returns>
            The created access control list object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.UpdateZones(System.Uri,System.String,ShareFile.Api.Client.Models.ConnectorGroupZone)">
            <summary>
            Modifies the parameters of a Connector Group in associated with a Zone
            </summary>
            <example>
            {
            "Zone": {"Id":"ZoneId"},
            "ApiVersionMin":"v3",
            "ApiVersionMax":"v3",
            "IconUrl":"https://domain/icons",
            "FormUrl":"https://domain/forms"
            }
            </example>
            <param name="url"></param>
            <param name="zoneId"></param>
            <param name="connectorGroupZone"></param>
            <returns>
            the created or modified ConnectorGroupZone instance
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.Delete(System.Uri)">
            <summary>
            Removes a Connector Group
            </summary>
            <remarks>
            Removes a Connector Group and all associations from Zones
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.DeleteZones(System.Uri,System.String)">
            <summary>
            Removes a Connector Group association with a Zone
            </summary>
            <remarks>
            Removes a Connector Group association with a Zone. Connector Groups are automatically removed
            once the groups is removed from all the Zones.
            </remarks>
            <param name="serviceUrl"></param>
            <param name="zoneid"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.DeleteAccessControls(System.Uri,System.String)">
            <summary>
            Removes a Connector Group Access Control object
            </summary>
            <remarks>
            Removes an Access Control object from the Connector Group ACL. This removes the permissions of
            the affected principal to use the Connector Group.
            </remarks>
            <param name="serviceUrl"></param>
            <param name="zoneid"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.GetStorageCenters(System.Uri,System.String)">
            <summary>
            Retrieve the list of Storage Centers associated with a Connector Group
            </summary>
            <remarks>
            Retrieve the list of storage centers associated with a Connector Group.
            </remarks>
            <param name="url"></param>
            <param name="zoneid"></param>
            <returns>
            The modified Connector Group
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ConnectorGroupsEntity.CreateStorageCenters(System.Uri,System.String,ShareFile.Api.Client.Models.StorageCenter)">
            <summary>
            Adds a Connector Group to a Storage Center
            </summary>
            <example>
            {
            "Id":"storageCenterId"
            }
            </example>
            <remarks>
            Associate a Connector Group with a Storage Center. The Connector Group has to be
            associated with the Storage Center Zone.
            </remarks>
            <param name="url"></param>
            <param name="zoneid"></param>
            <returns>
            The modified Connector Group
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IDevicesEntity.Get">
            <summary>
            Get Device Users for Current User
            </summary>
            <returns>
            A feed of DeviceUser objects
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IDevicesEntity.Get(System.Uri)">
            <summary>
            Get Device by ID
            </summary>
            <param name="url"></param>
            <returns>
            Device
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IDevicesEntity.GetByUser(System.Uri)">
            <summary>
            Get Devices for given User
            </summary>
            <param name="parentUrl"></param>
            <returns>
            List of Devices
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IDevicesEntity.DeleteByUser(System.Uri,System.String)">
            <summary>
            Delete specific Device for given User
            </summary>
            <param name="parentUrl"></param>
            <param name="id"></param>
            <returns>
            No content
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IDevicesEntity.Wipe(System.Uri,System.String)">
            <summary>
            Wipe Device
            </summary>
            <param name="deviceUrl"></param>
            <param name="userid"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IDevicesEntity.Lock(System.Uri,System.String)">
            <summary>
            Lock Device
            </summary>
            <param name="deviceUrl"></param>
            <param name="userid"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IDevicesEntity.Unlock(System.Uri,System.String)">
            <summary>
            Unlock Device
            </summary>
            <param name="deviceUrl"></param>
            <param name="userid"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.DevicesEntity.Get">
            <summary>
            Get Device Users for Current User
            </summary>
            <returns>
            A feed of DeviceUser objects
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.DevicesEntity.Get(System.Uri)">
            <summary>
            Get Device by ID
            </summary>
            <param name="url"></param>
            <returns>
            Device
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.DevicesEntity.GetByUser(System.Uri)">
            <summary>
            Get Devices for given User
            </summary>
            <param name="parentUrl"></param>
            <returns>
            List of Devices
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.DevicesEntity.DeleteByUser(System.Uri,System.String)">
            <summary>
            Delete specific Device for given User
            </summary>
            <param name="parentUrl"></param>
            <param name="id"></param>
            <returns>
            No content
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.DevicesEntity.Wipe(System.Uri,System.String)">
            <summary>
            Wipe Device
            </summary>
            <param name="deviceUrl"></param>
            <param name="userid"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.DevicesEntity.Lock(System.Uri,System.String)">
            <summary>
            Lock Device
            </summary>
            <param name="deviceUrl"></param>
            <param name="userid"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.DevicesEntity.Unlock(System.Uri,System.String)">
            <summary>
            Unlock Device
            </summary>
            <param name="deviceUrl"></param>
            <param name="userid"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IEncryptedEmailsEntity.Get(System.Uri,System.String,System.String,System.String,System.String)">
            <summary>
            Get EncryptedEmail
            </summary>
            <remarks>
            Get EncryptedEmail by Id. If EncryptedEmail.RequireUserInfo is true, the user info query parameters are required.
            </remarks>
            <returns>
            EncryptedEmail with corresponding Id
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IEncryptedEmailsEntity.Thread(System.Uri,System.String,System.String,System.String,System.String)">
            <summary>
            Get EncryptedEmail Message Thread
            </summary>
            <remarks>
            Get list of EncryptedEmail objects in a single email thread.Only messages to which the current logged in User has access are returned.If EncryptedEmail.RequireUserInfo is true, the user info query parameters are required.
            </remarks>
            <returns>
            Feed of EncryptedEmail objects
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IEncryptedEmailsEntity.GetEncryptedEmailByShare(System.Uri)">
            <summary>
            Get EncryptedEmail by Share Id
            </summary>
            <remarks>
            Gets the EncryptedEmail associated with the Share.
            </remarks>
            <param name="shareUrl"></param>
            <returns>
            Associated EncryptedEmail
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IEncryptedEmailsEntity.Received">
            <summary>
            Get Received EncryptedEmails
            GET https://account.sf-api.com/sf/v3/EncryptedEmails/Received
            </summary>
            <remarks>
            Get list of EncryptedEmails received by the current User.
            </remarks>
            <returns>
            Feed of EncryptedEmails
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IEncryptedEmailsEntity.Sent">
            <summary>
            Get Sent EncryptedEmails
            GET https://account.sf-api.com/sf/v3/EncryptedEmails/Sent
            </summary>
            <remarks>
            Get list of EncryptedEmails sent by the current User.
            </remarks>
            <returns>
            Feed of EncryptedEmails
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IEncryptedEmailsEntity.Create(ShareFile.Api.Client.Models.EncryptedEmailCreateParams)">
            <summary>
            Create EncryptedEmail
            </summary>
            <example>
            {
            "ToRecipients":[{"Email":"email@domain.com"}, {"Email":"email2@domain.com"}],
            "CcRecipients":[{"Email":"email@domain.com"}, {"Email":"email2@domain.com"}],
            "Subject": "Email Subject",
            "NotifyOnUse": true,
            "ExpirationDays":180,
            "RequireUserInfo": false,
            "RequireLogin": true
            }
            </example>
            <remarks>
            Create a new empty EncryptedEmail without a body or attachments. This request does not Send the EncryptedEmail,
            see the "Send EncryptedEmail" endpoint for steps to send a new EncryptedEmail
            </remarks>
            <param name="encryptedEmailParams"></param>
            <returns>
            EncryptedEmail
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IEncryptedEmailsEntity.Reply(System.Uri,ShareFile.Api.Client.Models.EncryptedEmailReplyParams)">
            <summary>
            Reply to an EncryptedEmail
            </summary>
            <example>
            {
            "ToRecipients":[{"Email":"email@domain.com"}, {"Email":"email2@domain.com"}],
            "CcRecipients":[{"Email":"email@domain.com"}, {"Email":"email2@domain.com"}],
            "Subject": "Email Subject",
            "NotifyOnUse": true,
            "ExpirationDays":180
            }
            </example>
            <remarks>
            Create a new EncryptedEmail in reply to another EncryptedEmail. This request does not Send the EncryptedEmail,
            see the "Send EncryptedEmail" endpoint for steps to send a new EncryptedEmail
            </remarks>
            <param name="url"></param>
            <param name="encryptedEmailParams"></param>
            <returns>
            Created EncryptedEmail
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IEncryptedEmailsEntity.ReplyAll(System.Uri,ShareFile.Api.Client.Models.EncryptedEmailParams)">
            <summary>
            Reply to all EncryptedEmail Recipients
            </summary>
            <example>
            {
            "Subject":"subject",
            "ExpirationDays":180
            }
            </example>
            <remarks>
            Create EncryptedEmail in Reply to all recipients in the EncryptedEmail identified by the provided Id, including
            ToRecipients, CcRecipients, and BccRecipients. This request does not Send the EncryptedEmail,
            see the "Send EncryptedEmail" endpoint for steps to send a new EncryptedEmail
            </remarks>
            <param name="url"></param>
            <param name="encryptedEmailParams"></param>
            <returns>
            Create EncryptedEmail
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IEncryptedEmailsEntity.Send(System.Uri,ShareFile.Api.Client.Models.EncryptedEmailSendParams)">
            <summary>
            Send EncryptedEmail
            </summary>
            <example>
            {
            "Message": {"Id": "messageFileId"},
            "Attachments": [{"Id": "id1"}, {"Id": "id2"}],
            }
            </example>
            <remarks>
            Sending an EncryptedEmail is a multi-step process:1. Create an empty EncryptedEmail using the "Create EncryptedEmail" or "Reply to EncryptedEmail" endpoints 2. Upload the message body as raw text or a text file using the "Upload EncryptedEmail Message" endpoint 3. Send the EncryptedEmail using the "Send EncryptedEmail" endpoint, providing the fileId uploaded in step 2 as
            the "Message" Item parameter. Provide a list of optional Item attachments during this step as well
            </remarks>
            <param name="url"></param>
            <param name="encryptedEmailSendParams"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IEncryptedEmailsEntity.Upload2(System.Uri,ShareFile.Api.Client.Models.UploadRequestParams,System.Nullable{System.Int32})">
            <summary>
            Upload EncryptedEmail Message
            </summary>
            <example>
            {
            "Method":"Standard",
            "Raw": true,
            "FileName":"message.txt",
            "FileSize": 0
            }
            </example>
            <remarks>
            Upload EncryptedEmail message. For simplicity, it is recommended to send the request with the body parameter
            "Raw": true. The Api endpoint will respond with an UploadSpecification object with a ChunkUri value, which is the url
            to which the message body can be POSTed as a file. The "Raw" flag allows you to POST the EncryptedEmail body as a text
            string in the Http request, instead of the traditional multi-part file approach, which is preferable for a simple text file.
            This endpoint behaves the same way as Items(id)/Upload2, which can be referenced for more details
            </remarks>
            <param name="parentUrl"></param>
            <param name="uploadParams"></param>
            <param name="expirationDays"></param>
            <returns>
            UploadSpecification object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IEncryptedEmailsEntity.Message(System.Uri,System.String,System.Boolean)">
            <summary>
            Download EncryptedEmail Message
            </summary>
            <param name="url"></param>
            <param name="aliasId"></param>
            <param name="redirect"></param>
            <returns>
            File if redirect=true, DownloadSpecification object otherwise
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IEncryptedEmailsEntity.Delete(System.Uri)">
            <summary>
            Delete EncryptedEmail
            </summary>
            <remarks>
            Access to message and attachments via created ShareAliases will be revoked as well.
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.EncryptedEmailsEntity.Get(System.Uri,System.String,System.String,System.String,System.String)">
            <summary>
            Get EncryptedEmail
            </summary>
            <remarks>
            Get EncryptedEmail by Id. If EncryptedEmail.RequireUserInfo is true, the user info query parameters are required.
            </remarks>
            <returns>
            EncryptedEmail with corresponding Id
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.EncryptedEmailsEntity.Thread(System.Uri,System.String,System.String,System.String,System.String)">
            <summary>
            Get EncryptedEmail Message Thread
            </summary>
            <remarks>
            Get list of EncryptedEmail objects in a single email thread.Only messages to which the current logged in User has access are returned.If EncryptedEmail.RequireUserInfo is true, the user info query parameters are required.
            </remarks>
            <returns>
            Feed of EncryptedEmail objects
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.EncryptedEmailsEntity.GetEncryptedEmailByShare(System.Uri)">
            <summary>
            Get EncryptedEmail by Share Id
            </summary>
            <remarks>
            Gets the EncryptedEmail associated with the Share.
            </remarks>
            <param name="shareUrl"></param>
            <returns>
            Associated EncryptedEmail
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.EncryptedEmailsEntity.Received">
            <summary>
            Get Received EncryptedEmails
            GET https://account.sf-api.com/sf/v3/EncryptedEmails/Received
            </summary>
            <remarks>
            Get list of EncryptedEmails received by the current User.
            </remarks>
            <returns>
            Feed of EncryptedEmails
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.EncryptedEmailsEntity.Sent">
            <summary>
            Get Sent EncryptedEmails
            GET https://account.sf-api.com/sf/v3/EncryptedEmails/Sent
            </summary>
            <remarks>
            Get list of EncryptedEmails sent by the current User.
            </remarks>
            <returns>
            Feed of EncryptedEmails
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.EncryptedEmailsEntity.Create(ShareFile.Api.Client.Models.EncryptedEmailCreateParams)">
            <summary>
            Create EncryptedEmail
            </summary>
            <example>
            {
            "ToRecipients":[{"Email":"email@domain.com"}, {"Email":"email2@domain.com"}],
            "CcRecipients":[{"Email":"email@domain.com"}, {"Email":"email2@domain.com"}],
            "Subject": "Email Subject",
            "NotifyOnUse": true,
            "ExpirationDays":180,
            "RequireUserInfo": false,
            "RequireLogin": true
            }
            </example>
            <remarks>
            Create a new empty EncryptedEmail without a body or attachments. This request does not Send the EncryptedEmail,
            see the "Send EncryptedEmail" endpoint for steps to send a new EncryptedEmail
            </remarks>
            <param name="encryptedEmailParams"></param>
            <returns>
            EncryptedEmail
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.EncryptedEmailsEntity.Reply(System.Uri,ShareFile.Api.Client.Models.EncryptedEmailReplyParams)">
            <summary>
            Reply to an EncryptedEmail
            </summary>
            <example>
            {
            "ToRecipients":[{"Email":"email@domain.com"}, {"Email":"email2@domain.com"}],
            "CcRecipients":[{"Email":"email@domain.com"}, {"Email":"email2@domain.com"}],
            "Subject": "Email Subject",
            "NotifyOnUse": true,
            "ExpirationDays":180
            }
            </example>
            <remarks>
            Create a new EncryptedEmail in reply to another EncryptedEmail. This request does not Send the EncryptedEmail,
            see the "Send EncryptedEmail" endpoint for steps to send a new EncryptedEmail
            </remarks>
            <param name="url"></param>
            <param name="encryptedEmailParams"></param>
            <returns>
            Created EncryptedEmail
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.EncryptedEmailsEntity.ReplyAll(System.Uri,ShareFile.Api.Client.Models.EncryptedEmailParams)">
            <summary>
            Reply to all EncryptedEmail Recipients
            </summary>
            <example>
            {
            "Subject":"subject",
            "ExpirationDays":180
            }
            </example>
            <remarks>
            Create EncryptedEmail in Reply to all recipients in the EncryptedEmail identified by the provided Id, including
            ToRecipients, CcRecipients, and BccRecipients. This request does not Send the EncryptedEmail,
            see the "Send EncryptedEmail" endpoint for steps to send a new EncryptedEmail
            </remarks>
            <param name="url"></param>
            <param name="encryptedEmailParams"></param>
            <returns>
            Create EncryptedEmail
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.EncryptedEmailsEntity.Send(System.Uri,ShareFile.Api.Client.Models.EncryptedEmailSendParams)">
            <summary>
            Send EncryptedEmail
            </summary>
            <example>
            {
            "Message": {"Id": "messageFileId"},
            "Attachments": [{"Id": "id1"}, {"Id": "id2"}],
            }
            </example>
            <remarks>
            Sending an EncryptedEmail is a multi-step process:1. Create an empty EncryptedEmail using the "Create EncryptedEmail" or "Reply to EncryptedEmail" endpoints 2. Upload the message body as raw text or a text file using the "Upload EncryptedEmail Message" endpoint 3. Send the EncryptedEmail using the "Send EncryptedEmail" endpoint, providing the fileId uploaded in step 2 as
            the "Message" Item parameter. Provide a list of optional Item attachments during this step as well
            </remarks>
            <param name="url"></param>
            <param name="encryptedEmailSendParams"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.EncryptedEmailsEntity.Upload2(System.Uri,ShareFile.Api.Client.Models.UploadRequestParams,System.Nullable{System.Int32})">
            <summary>
            Upload EncryptedEmail Message
            </summary>
            <example>
            {
            "Method":"Standard",
            "Raw": true,
            "FileName":"message.txt",
            "FileSize": 0
            }
            </example>
            <remarks>
            Upload EncryptedEmail message. For simplicity, it is recommended to send the request with the body parameter
            "Raw": true. The Api endpoint will respond with an UploadSpecification object with a ChunkUri value, which is the url
            to which the message body can be POSTed as a file. The "Raw" flag allows you to POST the EncryptedEmail body as a text
            string in the Http request, instead of the traditional multi-part file approach, which is preferable for a simple text file.
            This endpoint behaves the same way as Items(id)/Upload2, which can be referenced for more details
            </remarks>
            <param name="parentUrl"></param>
            <param name="uploadParams"></param>
            <param name="expirationDays"></param>
            <returns>
            UploadSpecification object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.EncryptedEmailsEntity.Message(System.Uri,System.String,System.Boolean)">
            <summary>
            Download EncryptedEmail Message
            </summary>
            <param name="url"></param>
            <param name="aliasId"></param>
            <param name="redirect"></param>
            <returns>
            File if redirect=true, DownloadSpecification object otherwise
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.EncryptedEmailsEntity.Delete(System.Uri)">
            <summary>
            Delete EncryptedEmail
            </summary>
            <remarks>
            Access to message and attachments via created ShareAliases will be revoked as well.
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFavoriteFoldersEntity.GetByUser(System.Uri)">
            <summary>
            Get List of FavoriteFolders
            </summary>
            <remarks>
            Retrieves the list of Favorite folders for a given user.
            </remarks>
            <param name="url"></param>
            <returns>
            A list of Favorite Folders specified by this user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFavoriteFoldersEntity.GetByUser(System.Uri,System.String)">
            <summary>
            Get FavoriteFolder
            </summary>
            <remarks>
            Retrieves a single Favorite Folder
            </remarks>
            <param name="userid"></param>
            <param name="itemUrl"></param>
            <returns>
            A list of Favorite Folders specified by this user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFavoriteFoldersEntity.GetFavoriteFolderByItem(System.Uri)">
            <summary>
            Get Item as Favorite Folder
            </summary>
            <remarks>
            Retrieves a Favorite Folder representation of a given parent Item
            </remarks>
            <param name="parentUrl"></param>
            <returns>
            The specified Favorite Folder if it belongs to the specified parent Item
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFavoriteFoldersEntity.Get(System.Uri)">
            <summary>
            Get FavoriteFolder
            </summary>
            <remarks>
            Retrieve a single Favorite Folder from a give user
            </remarks>
            <returns>
            The selected Favorite Folder
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFavoriteFoldersEntity.CreateByUser(System.Uri,ShareFile.Api.Client.Models.FavoriteFolder)">
            <summary>
            Create FavoriteFolder
            </summary>
            <example>
            {
            "Folder": { "Id":"fo96aec5-d637-4124-bcc9-c86fd7301e4d" },
            "FolderAlias" : "alias"
            }
            </example>
            <remarks>
            Adds an existing folder to the list of favorites of a given user.
            </remarks>
            <param name="url"></param>
            <param name="folder"></param>
            <returns>
            A new FavoriteFolder record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFavoriteFoldersEntity.PatchByUser(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Client.Models.FavoriteFolder})">
            <summary>
            Create or Update FavoriteFolders
            </summary>
            <example>
            [{
            Folder: {
            "Id":"fo96aec5-d637-4124-bcc9-c86fd7301e4d"
            }
            }]
            </example>
            <remarks>
            Replaces existing favorite folders with the folders provided. Any exisitng folders that are not specified will be removed.
            </remarks>
            <param name="url"></param>
            <param name="favoriteFolderList"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFavoriteFoldersEntity.Delete(System.Uri,System.String)">
            <summary>
            Delete FavoriteFolder
            </summary>
            <remarks>
            Removes a favorite folder from a user's list.
            </remarks>
            <param name="url"></param>
            <param name="itemid"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FavoriteFoldersEntity.GetByUser(System.Uri)">
            <summary>
            Get List of FavoriteFolders
            </summary>
            <remarks>
            Retrieves the list of Favorite folders for a given user.
            </remarks>
            <param name="url"></param>
            <returns>
            A list of Favorite Folders specified by this user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FavoriteFoldersEntity.GetByUser(System.Uri,System.String)">
            <summary>
            Get FavoriteFolder
            </summary>
            <remarks>
            Retrieves a single Favorite Folder
            </remarks>
            <param name="userid"></param>
            <param name="itemUrl"></param>
            <returns>
            A list of Favorite Folders specified by this user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FavoriteFoldersEntity.GetFavoriteFolderByItem(System.Uri)">
            <summary>
            Get Item as Favorite Folder
            </summary>
            <remarks>
            Retrieves a Favorite Folder representation of a given parent Item
            </remarks>
            <param name="parentUrl"></param>
            <returns>
            The specified Favorite Folder if it belongs to the specified parent Item
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FavoriteFoldersEntity.Get(System.Uri)">
            <summary>
            Get FavoriteFolder
            </summary>
            <remarks>
            Retrieve a single Favorite Folder from a give user
            </remarks>
            <returns>
            The selected Favorite Folder
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FavoriteFoldersEntity.CreateByUser(System.Uri,ShareFile.Api.Client.Models.FavoriteFolder)">
            <summary>
            Create FavoriteFolder
            </summary>
            <example>
            {
            "Folder": { "Id":"fo96aec5-d637-4124-bcc9-c86fd7301e4d" },
            "FolderAlias" : "alias"
            }
            </example>
            <remarks>
            Adds an existing folder to the list of favorites of a given user.
            </remarks>
            <param name="url"></param>
            <param name="folder"></param>
            <returns>
            A new FavoriteFolder record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FavoriteFoldersEntity.PatchByUser(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Client.Models.FavoriteFolder})">
            <summary>
            Create or Update FavoriteFolders
            </summary>
            <example>
            [{
            Folder: {
            "Id":"fo96aec5-d637-4124-bcc9-c86fd7301e4d"
            }
            }]
            </example>
            <remarks>
            Replaces existing favorite folders with the folders provided. Any exisitng folders that are not specified will be removed.
            </remarks>
            <param name="url"></param>
            <param name="favoriteFolderList"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FavoriteFoldersEntity.Delete(System.Uri,System.String)">
            <summary>
            Delete FavoriteFolder
            </summary>
            <remarks>
            Removes a favorite folder from a user's list.
            </remarks>
            <param name="url"></param>
            <param name="itemid"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFavoritesEntity.GetByUser(System.Uri)">
            <summary>
            Get a list of all Favorite Items marked by the user
            </summary>
            <param name="userUrl"></param>
            <returns>
            A list of Favorite Items
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFavoritesEntity.GetByFavoriteItem(System.Uri)">
            <summary>
            Get a single Favorite Item for a User with a given streamid of the Item
            </summary>
            <returns>
            A single Favorite Item
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFavoritesEntity.CreateByUser(System.Uri,ShareFile.Api.Client.Models.Favorite)">
            <summary>
            Mark an Item as Favorite
            </summary>
            <example>
            {
            "Item": { "StreamID" : "itemStreamId" },
            "Alias" : "FileName",
            "DisplayPosition" : 1
            }
            </example>
            <remarks>
            Alias and DisplayPostion are not mandatory, the API assigns them if not provided
            </remarks>
            <param name="userUrl"></param>
            <param name="itemToMarkFavorite"></param>
            <returns>
            A single Favorite Item which was created with this request
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFavoritesEntity.PatchByUser(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Client.Models.Favorite})">
            <summary>
            Replace the Favorite Items for a User with the given list of new Favorite Items
            </summary>
            <example>
            [
            {
            "Item": { "StreamID" : "item1StreamId" },
            "Alias" : "FileName1",
            "DisplayPosition" : 1
            },
            {
            "Item": { "StreamID" : "item2StreamId" },
            "Alias" : "FileName2",
            "DisplayPosition" : 2
            }
            ]
            </example>
            <remarks>
            The DisplayPosition and Alias for each Item should be unique
            </remarks>
            <param name="userUrl"></param>
            <param name="favoriteItems"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFavoritesEntity.Delete(System.Uri)">
            <summary>
            Remove the given Favorite Item for a User
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFavoritesEntity.DeleteInBulkByUser(System.Uri)">
            <summary>
            Remove all Favorite Items for a User
            </summary>
            <param name="userUrl"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FavoritesEntity.GetByUser(System.Uri)">
            <summary>
            Get a list of all Favorite Items marked by the user
            </summary>
            <param name="userUrl"></param>
            <returns>
            A list of Favorite Items
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FavoritesEntity.GetByFavoriteItem(System.Uri)">
            <summary>
            Get a single Favorite Item for a User with a given streamid of the Item
            </summary>
            <returns>
            A single Favorite Item
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FavoritesEntity.CreateByUser(System.Uri,ShareFile.Api.Client.Models.Favorite)">
            <summary>
            Mark an Item as Favorite
            </summary>
            <example>
            {
            "Item": { "StreamID" : "itemStreamId" },
            "Alias" : "FileName",
            "DisplayPosition" : 1
            }
            </example>
            <remarks>
            Alias and DisplayPostion are not mandatory, the API assigns them if not provided
            </remarks>
            <param name="userUrl"></param>
            <param name="itemToMarkFavorite"></param>
            <returns>
            A single Favorite Item which was created with this request
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FavoritesEntity.PatchByUser(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Client.Models.Favorite})">
            <summary>
            Replace the Favorite Items for a User with the given list of new Favorite Items
            </summary>
            <example>
            [
            {
            "Item": { "StreamID" : "item1StreamId" },
            "Alias" : "FileName1",
            "DisplayPosition" : 1
            },
            {
            "Item": { "StreamID" : "item2StreamId" },
            "Alias" : "FileName2",
            "DisplayPosition" : 2
            }
            ]
            </example>
            <remarks>
            The DisplayPosition and Alias for each Item should be unique
            </remarks>
            <param name="userUrl"></param>
            <param name="favoriteItems"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FavoritesEntity.Delete(System.Uri)">
            <summary>
            Remove the given Favorite Item for a User
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FavoritesEntity.DeleteInBulkByUser(System.Uri)">
            <summary>
            Remove all Favorite Items for a User
            </summary>
            <param name="userUrl"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFileLockEntity.GetByItem(System.Uri)">
            <summary>
            Get Item Lock info
            </summary>
            <remarks>
            Retrieves the lock info for a given Item.
            </remarks>
            <param name="url"></param>
            <returns>
            Lock info
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFileLockEntity.CreateByItem(System.Uri,ShareFile.Api.Client.Models.FileLock)">
            <summary>
            Create Lock
            </summary>
            <example>
            {
            "Owner":{Id:"ownerid"},
            "ExpirationTimeInMinutes":180
            }
            </example>
            <remarks>
            Expiration can be set either using ExpirationDate or ExpirationTimeInMinutes. If both are provided
            ExpirationDate takes precedence.
            </remarks>
            <param name="url"></param>
            <param name="fileLock"></param>
            <returns>
            The created item Lock object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFileLockEntity.UpdateByItem(System.Uri,ShareFile.Api.Client.Models.FileLock)">
            <summary>
            Update FileLock. Updates expiration time and/or LockType
            </summary>
            <example>
            {
            "LockId":"lockid",
            "Owner":{Id:"ownerid"},
            "ExpirationDate": "2016-02-18T21:23:53.373Z"
            }
            </example>
            <remarks>
            Expiration can be set either using ExpirationDate or ExpirationTimeInMinutes. If both are provided
            ExpirationDate takes precedence.
            </remarks>
            <param name="url"></param>
            <param name="fileLock"></param>
            <returns>
            The updated lock object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFileLockEntity.DeleteByItem(System.Uri,System.String)">
            <summary>
            Unlock File
            </summary>
            <remarks>
            Unlock a locked file.
            </remarks>
            <param name="url"></param>
            <param name="lockid"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFileLockEntity.Discard(System.Uri,System.String)">
            <summary>
            Discard checkout on a File
            </summary>
            <remarks>
            Discard a checkout on a file
            </remarks>
            <param name="url"></param>
            <param name="lockid"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FileLockEntity.GetByItem(System.Uri)">
            <summary>
            Get Item Lock info
            </summary>
            <remarks>
            Retrieves the lock info for a given Item.
            </remarks>
            <param name="url"></param>
            <returns>
            Lock info
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FileLockEntity.CreateByItem(System.Uri,ShareFile.Api.Client.Models.FileLock)">
            <summary>
            Create Lock
            </summary>
            <example>
            {
            "Owner":{Id:"ownerid"},
            "ExpirationTimeInMinutes":180
            }
            </example>
            <remarks>
            Expiration can be set either using ExpirationDate or ExpirationTimeInMinutes. If both are provided
            ExpirationDate takes precedence.
            </remarks>
            <param name="url"></param>
            <param name="fileLock"></param>
            <returns>
            The created item Lock object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FileLockEntity.UpdateByItem(System.Uri,ShareFile.Api.Client.Models.FileLock)">
            <summary>
            Update FileLock. Updates expiration time and/or LockType
            </summary>
            <example>
            {
            "LockId":"lockid",
            "Owner":{Id:"ownerid"},
            "ExpirationDate": "2016-02-18T21:23:53.373Z"
            }
            </example>
            <remarks>
            Expiration can be set either using ExpirationDate or ExpirationTimeInMinutes. If both are provided
            ExpirationDate takes precedence.
            </remarks>
            <param name="url"></param>
            <param name="fileLock"></param>
            <returns>
            The updated lock object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FileLockEntity.DeleteByItem(System.Uri,System.String)">
            <summary>
            Unlock File
            </summary>
            <remarks>
            Unlock a locked file.
            </remarks>
            <param name="url"></param>
            <param name="lockid"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FileLockEntity.Discard(System.Uri,System.String)">
            <summary>
            Discard checkout on a File
            </summary>
            <remarks>
            Discard a checkout on a file
            </remarks>
            <param name="url"></param>
            <param name="lockid"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFolderTemplatesEntity.Get">
            <summary>
            Get Folder Templates for Current Account
            </summary>
            <remarks>
            Returns all folder templates for the current account.
            </remarks>
            <returns>
            Folder templates for current account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFolderTemplatesEntity.Create(ShareFile.Api.Client.Models.FolderTemplate)">
            <summary>
            Create Folder Template
            </summary>
            <example>
            {
            "Name": "Client Folder",
            "Description": "For all client folders created in 2014 or after",
            "Items": [
            {
            "Name": "Folder 1",
            "Items": [
            {
            "Name": "Subfolder1"
            }
            ]
            },
            {
            "Name": "Folder 2"
            }
            ]
            }
            </example>
            <remarks>
            Creates a new folder template.
            </remarks>
            <returns>
            The created folder template
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFolderTemplatesEntity.Update(ShareFile.Api.Client.Models.FolderTemplate,System.Boolean)">
            <summary>
            Update Folder Template
            </summary>
            <example>
            {
            "Name": "Client Folder",
            "Description": "For all client folders created in 2014 or after",
            "Items": [
            {
            "Name": "A new folder",
            "Items": [
            {
            "TemplateId": "ft-12345-abdef-abdef-12345-abdef",
            "Name": "A new subfolder"
            }
            ]
            },
            {
            "Id": "fti-xxxxx-xxxxx-xxxxx-xxxxx",
            "Name": "An existing folder with a different name"
            }
            ]
            }
            </example>
            <remarks>
            Updates an existing folder template
            </remarks>
            <param name="template"></param>
            <param name="overwrite"></param>
            <returns>
            The updated folder template
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFolderTemplatesEntity.Delete(System.Uri)">
            <summary>
            Delete Folder Template
            </summary>
            <remarks>
            Removes a folder template
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IFolderTemplatesEntity.BulkApply(System.Uri,System.String,System.Int32)">
            <summary>
            Apply folder template to folders in bulk
            </summary>
            <remarks>
            Applies the specified folder template to all subfolders of provided folder ID
            </remarks>
            <param name="templateUrl"></param>
            <param name="folderId"></param>
            <param name="batchSize"></param>
            <returns>
            The status of the operation: how many subfolders are left, and how many subfolders in total
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FolderTemplatesEntity.Get">
            <summary>
            Get Folder Templates for Current Account
            </summary>
            <remarks>
            Returns all folder templates for the current account.
            </remarks>
            <returns>
            Folder templates for current account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FolderTemplatesEntity.Create(ShareFile.Api.Client.Models.FolderTemplate)">
            <summary>
            Create Folder Template
            </summary>
            <example>
            {
            "Name": "Client Folder",
            "Description": "For all client folders created in 2014 or after",
            "Items": [
            {
            "Name": "Folder 1",
            "Items": [
            {
            "Name": "Subfolder1"
            }
            ]
            },
            {
            "Name": "Folder 2"
            }
            ]
            }
            </example>
            <remarks>
            Creates a new folder template.
            </remarks>
            <returns>
            The created folder template
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FolderTemplatesEntity.Update(ShareFile.Api.Client.Models.FolderTemplate,System.Boolean)">
            <summary>
            Update Folder Template
            </summary>
            <example>
            {
            "Name": "Client Folder",
            "Description": "For all client folders created in 2014 or after",
            "Items": [
            {
            "Name": "A new folder",
            "Items": [
            {
            "TemplateId": "ft-12345-abdef-abdef-12345-abdef",
            "Name": "A new subfolder"
            }
            ]
            },
            {
            "Id": "fti-xxxxx-xxxxx-xxxxx-xxxxx",
            "Name": "An existing folder with a different name"
            }
            ]
            }
            </example>
            <remarks>
            Updates an existing folder template
            </remarks>
            <param name="template"></param>
            <param name="overwrite"></param>
            <returns>
            The updated folder template
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FolderTemplatesEntity.Delete(System.Uri)">
            <summary>
            Delete Folder Template
            </summary>
            <remarks>
            Removes a folder template
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.FolderTemplatesEntity.BulkApply(System.Uri,System.String,System.Int32)">
            <summary>
            Apply folder template to folders in bulk
            </summary>
            <remarks>
            Applies the specified folder template to all subfolders of provided folder ID
            </remarks>
            <param name="templateUrl"></param>
            <param name="folderId"></param>
            <param name="batchSize"></param>
            <returns>
            The status of the operation: how many subfolders are left, and how many subfolders in total
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IGroupsEntity.Get">
            <summary>
            Get Group List
            </summary>
            <remarks>
            Retrieves all Distribution Groups this user has permissions to View in this account
            </remarks>
            <returns>
            a list of Groups this user has access to
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IGroupsEntity.Get(System.Uri)">
            <summary>
            Get Group By ID
            </summary>
            <remarks>
            Retrives a single Group by id
            </remarks>
            <param name="url"></param>
            <returns>
            A single Group object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IGroupsEntity.Delete(System.Uri)">
            <summary>
            Delete Group
            </summary>
            <remarks>
            Removes a single Group by id
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IGroupsEntity.Create(ShareFile.Api.Client.Models.Group)">
            <summary>
            Create Group
            </summary>
            <example>
            {
            "Name":"Name",
            "IsShared":true,
            "Contacts":[{"Email":"user.one@domain.com"},{"Email":"user.two@domain.com"}]
            }
            </example>
            <remarks>
            Creates a new group. The Post body must include the specification of the group.
            </remarks>
            <param name="group"></param>
            <returns>
            the new group instance
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IGroupsEntity.Update(System.Uri,ShareFile.Api.Client.Models.Group)">
            <summary>
            Update Group
            </summary>
            <example>
            {
            "Name":"Name",
            "IsShared":true,
            }
            </example>
            <remarks>
            Updates an existing group.
            This operation will ignore the provided clients list. Use the \Contacts navigation link to
            add/remove elements from a group
            </remarks>
            <param name="url"></param>
            <param name="group"></param>
            <returns>
            the modified group object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IGroupsEntity.GetContacts(System.Uri)">
            <summary>
            Get Group Contacts
            </summary>
            <remarks>
            Retrieves the Contacts navigation property of a Group
            </remarks>
            <param name="url"></param>
            <returns>
            A feed of Contacts representing the members of the Group
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IGroupsEntity.CreateContacts(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Client.Models.Contact})">
            <summary>
            Add Contacts to Group
            </summary>
            <example>
            [{"Email":"user.one@domain.com"},{"Id":"abcd"}]
            </example>
            <remarks>
            Adds a list of contacts to a group
            The contact list may contain either contact ID (same as User ID) or Email.
            </remarks>
            <param name="url"></param>
            <param name="contacts"></param>
            <returns>
            The updated list of contacts for this group
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IGroupsEntity.DeleteContacts(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Client.Models.Contact})">
            <summary>
            Remove Contacts from Group
            </summary>
            <example>
            [{"Email":"user.one@domain.com"},{"Id":"abcd"}]
            </example>
            <remarks>
            Removes contacts from a group
            The contact list may contain either contact ID (same as User ID) or Email.
            This method will ignore missing references in the provided list - i.e., if an email in the contacts
            list is not present in the group, it will be ignored.
            The method will not enforce that ID and Email match inside a single Contact instance: Id will be
            looked up first, then Email.
            </remarks>
            <param name="url"></param>
            <param name="contacts"></param>
            <returns>
            The updated list of contacts for this group
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IGroupsEntity.GetByUser(System.Uri)">
            <summary>
            Retrieve Groups associated with a User
            </summary>
            <remarks>
            Returns all groups the user is associated. This is currently limited to the authenticated user.
            </remarks>
            <param name="url"></param>
            <returns>
            Feed of Groups
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.GroupsEntity.Get">
            <summary>
            Get Group List
            </summary>
            <remarks>
            Retrieves all Distribution Groups this user has permissions to View in this account
            </remarks>
            <returns>
            a list of Groups this user has access to
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.GroupsEntity.Get(System.Uri)">
            <summary>
            Get Group By ID
            </summary>
            <remarks>
            Retrives a single Group by id
            </remarks>
            <param name="url"></param>
            <returns>
            A single Group object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.GroupsEntity.Delete(System.Uri)">
            <summary>
            Delete Group
            </summary>
            <remarks>
            Removes a single Group by id
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.GroupsEntity.Create(ShareFile.Api.Client.Models.Group)">
            <summary>
            Create Group
            </summary>
            <example>
            {
            "Name":"Name",
            "IsShared":true,
            "Contacts":[{"Email":"user.one@domain.com"},{"Email":"user.two@domain.com"}]
            }
            </example>
            <remarks>
            Creates a new group. The Post body must include the specification of the group.
            </remarks>
            <param name="group"></param>
            <returns>
            the new group instance
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.GroupsEntity.Update(System.Uri,ShareFile.Api.Client.Models.Group)">
            <summary>
            Update Group
            </summary>
            <example>
            {
            "Name":"Name",
            "IsShared":true,
            }
            </example>
            <remarks>
            Updates an existing group.
            This operation will ignore the provided clients list. Use the \Contacts navigation link to
            add/remove elements from a group
            </remarks>
            <param name="url"></param>
            <param name="group"></param>
            <returns>
            the modified group object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.GroupsEntity.GetContacts(System.Uri)">
            <summary>
            Get Group Contacts
            </summary>
            <remarks>
            Retrieves the Contacts navigation property of a Group
            </remarks>
            <param name="url"></param>
            <returns>
            A feed of Contacts representing the members of the Group
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.GroupsEntity.CreateContacts(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Client.Models.Contact})">
            <summary>
            Add Contacts to Group
            </summary>
            <example>
            [{"Email":"user.one@domain.com"},{"Id":"abcd"}]
            </example>
            <remarks>
            Adds a list of contacts to a group
            The contact list may contain either contact ID (same as User ID) or Email.
            </remarks>
            <param name="url"></param>
            <param name="contacts"></param>
            <returns>
            The updated list of contacts for this group
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.GroupsEntity.DeleteContacts(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Client.Models.Contact})">
            <summary>
            Remove Contacts from Group
            </summary>
            <example>
            [{"Email":"user.one@domain.com"},{"Id":"abcd"}]
            </example>
            <remarks>
            Removes contacts from a group
            The contact list may contain either contact ID (same as User ID) or Email.
            This method will ignore missing references in the provided list - i.e., if an email in the contacts
            list is not present in the group, it will be ignored.
            The method will not enforce that ID and Email match inside a single Contact instance: Id will be
            looked up first, then Email.
            </remarks>
            <param name="url"></param>
            <param name="contacts"></param>
            <returns>
            The updated list of contacts for this group
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.GroupsEntity.GetByUser(System.Uri)">
            <summary>
            Retrieve Groups associated with a User
            </summary>
            <remarks>
            Returns all groups the user is associated. This is currently limited to the authenticated user.
            </remarks>
            <param name="url"></param>
            <returns>
            Feed of Groups
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ShareFile.Api.Client.Entities.IItemsEntity.Get" -->
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.Get(System.Uri,System.Boolean)">
            <summary>
            Get Item by ID
            </summary>
            <remarks>
            Returns a single Item.
            Special Id's:home, favorites, allshared, connectors, box, top. home - Return home folder.
            favorites - Return parent favorite item; use .../Items(favorites)/Children to get the favorite folders.
            allshared - Return parent Shared Folders item; use .../Items(allshared)/Children to get the shared folders.
            connectors - Return parent Connectors item; use .../Items(connectors)/Children to get indiviual connectors.
            box - Return the FileBox folder. top - Returns the Top item; use .../Items(top)/Children to get the home, favorites, and shared folders as well as the connectors
            </remarks>
            <param name="url"></param>
            <param name="includeDeleted"></param>
            <returns>
            a single Item
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.Get(System.Uri,ShareFile.Api.Client.Models.TreeMode,System.String,System.Boolean,System.Boolean)">
            <summary>
            Get TreeView
            </summary>
            <remarks>
            Retrieves a folder list structure tailored for TreeView navigation - used by clients
            to create folder trees for specific operations.
            This operation will enforce a specific $select and $expand operators. You can provide
            additional $expand, for example Children, which is not added by default. The $select
            operator will apply to the expanded objects as well. You can also specify additional
            $select elements.
            </remarks>
            <param name="url"></param>
            <param name="treeMode"></param>
            <param name="sourceId"></param>
            <param name="canCreateRootFolder"></param>
            <param name="fileBox"></param>
            <returns>
            A tree root element.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.GetChildrenByConnectorGroup(System.Uri)">
            <summary>
            Get Symbolic Links of a Connector Group
            </summary>
            <remarks>
            Retrieves the Symbolic Links of the provided Connector Group type. Connector Groups define
            classes of external data connectors - such as SharePoint, Network Shares. Symbolic Links
            represent a single Connector point to such classes - for example, a single SharePoint site,
            or a network share drive.
            </remarks>
            <param name="parentUrl"></param>
            <returns>
            The list of Symbolic Links associated with the given connector group.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.Stream(System.Uri,System.Boolean)">
            <summary>
            Get Stream
            </summary>
            <remarks>
            Retrieves the versions of a given Stream. The ID parameter must be a StreamID, otherwise an empty list is returned.
            StreamID is a property of all Items, representing the "Stream", ie., the collection of all versions of a file. In
            contrast, an Item ID represents a single version of a file.
            For example, when users upload or modify an existing file, a new Item
            is created with the same StreamID. All default Item enumerations return only the latest version of a given stream.
            Use this method to retrieve previous versions of a given stream.
            This method carries a default OData $top parameter of 20. If more versions are required, specify the $top query
            option with the desired parameter.
            </remarks>
            <param name="url"></param>
            <param name="includeDeleted"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.ByPath(System.String)">
            <summary>
            Get Item by Path
            </summary>
            <remarks>
            Retrieves an item from its path. The path is of format /foldername/foldername/filename
            This call may redirect the client to another API provider, if the path
            contains a symbolic link.
            </remarks>
            <param name="path"></param>
            <returns>
            An item identified by a path
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.ByPath(System.Uri,System.String)">
            <summary>
            Get Item by relative Path from ID
            </summary>
            <remarks>
            Retrieves an item from its path, relative to the provided ID.
            The path is of format /foldername/foldername/filename
            This call may redirect the client to another API provider, if the path
            contains a symbolic link.
            </remarks>
            <param name="url"></param>
            <param name="path"></param>
            <returns>
            An item identified by a path
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.GetParent(System.Uri)">
            <summary>
            Get Parent Item
            </summary>
            <remarks>
            Retrieves the Parent navigation property of a single Item.
            </remarks>
            <param name="url"></param>
            <returns>
            the Parent Item of the give object ID.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.GetChildren(System.Uri,System.Boolean,ShareFile.Api.Client.Models.ItemOrderingMode)">
            <summary>
            Get Children
            </summary>
            <remarks>
            Handler for the Children navigation property of a given Item.
            A 302 redirection is returned if the folder is a SymbolicLink. The redirection
            will enumerate the children of the remote connector
            </remarks>
            <param name="url"></param>
            <param name="includeDeleted"></param>
            <param name="orderingMode"></param>
            <returns>
            the list of children under the given object ID
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.GetInfo(System.Uri)">
            <summary>
            Get Folder Access Info
            </summary>
            <remarks>
            Returns the effective Access Controls for the current authenticated user for the
            selected folder - i.e., the resulting set of Access Controls for the Item/User context.This operation applies to Folders only, will return an error for other Item types.
            </remarks>
            <param name="url"></param>
            <returns>
            The Folder Access Control Information
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.Download(System.Uri,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Download Item Content
            </summary>
            <remarks>
            Initiate the download operation for an item. It will return 302 redirection to the
            actual download link. For Folders, the download link will retrieve a ZIP archive
            with the contents of the Folder.
            </remarks>
            <param name="url"></param>
            <param name="redirect"></param>
            <param name="includeAllVersions"></param>
            <param name="includeDeleted"></param>
            <returns>
            the download link for the provided item content.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.BulkDownload(System.Uri,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Download Multiple Items
            </summary>
            <example>
            ["id1","id2"]
            </example>
            <remarks>
            Initiate the download operation for items. It will return 302 redirection to the
            actual download link.
            </remarks>
            <param name="parentUrl"></param>
            <param name="ids"></param>
            <param name="redirect"></param>
            <returns>
            the download link for the provided item content.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.CreateFolder(System.Uri,ShareFile.Api.Client.Models.Folder,System.Boolean,System.Boolean)">
            <summary>
            Create Folder
            </summary>
            <example>
            {
            "Name":"Folder Name",
            "Description":"Description",
            "Zone":{ "Id":"ZoneId" },
            "ExpirationDate": "9999-12-31T23:59:59.9999999Z"
            }
            </example>
            <remarks>
            Creates a new Folder.
            The POST body must contain the serialized object.
            For top-level folders, use Items/Folder.
            The Zone object may only be provided for top-level folders. The Zone object must
            contain a zone ID.
            </remarks>
            <param name="parentUrl"></param>
            <param name="folder"></param>
            <param name="overwrite"></param>
            <param name="passthrough"></param>
            <returns>
            the new Folder
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.CreateNote(System.Uri,ShareFile.Api.Client.Models.Note)">
            <summary>
            Create Note
            </summary>
            <example>
            {
            "Name":"Note Name",
            "Description":"Description"
            }
            </example>
            <remarks>
            Creates a new Note.
            </remarks>
            <param name="parentUrl"></param>
            <param name="note"></param>
            <returns>
            the new Note
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.CreateLink(System.Uri,ShareFile.Api.Client.Models.Link)">
            <summary>
            Create Link
            </summary>
            <example>
            {
            "Name":"Link Name",
            "Description":"Description",
            "Uri":"https://server/path"
            }
            </example>
            <remarks>
            Creates a new Link
            </remarks>
            <param name="parentUrl"></param>
            <param name="link"></param>
            <returns>
            the new Link
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.CreateSymbolicLink(System.Uri,ShareFile.Api.Client.Models.SymbolicLink,System.Boolean)">
            <summary>
            Create SymbolicLink
            </summary>
            <example>
            {
            "Name":"RemoteFileName",
            "Description":"Description",
            "Zone":{ "Id":"z014766e-8e96-4615-86aa-57132a69843c" },
            "ConnectorGroup": { "Id":"1" }
            }
            </example>
            <remarks>
            Creates a Symbolic Link
            The body must contain either a "Link" parameter with a fully qualified URI; or use
            FileName + Zone to have sharefile.com attempt to convert the Connector path to an
            URI using a call to the Zone - using ShareFile Hash authentication mode. For active
            clients, it's recommended to make the convertion call to the Zone directly, using
            Items/ByPath=name, retriving the resulting URL, and calling this method with the
            Link parameter.SymbolicLinks must be created as top-level folders - i.e., this call requires
            the parent to be the Item(accountid) element.Zone defines the location of the SymbolicLink target - for example, for
            Network Shares connectors, the SymbolicLink will point to the StorageZone Controller
            that will serve the file browsing requests.The ConnectorGroup parameter indicates the kind of symbolic link - e.g., Network
            Share, or SharePoint.
            </remarks>
            <param name="parentUrl"></param>
            <param name="symlink"></param>
            <param name="overwrite"></param>
            <returns>
            the new SymbolicLink
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.CreateChildrenByConnectorGroup(System.Uri,ShareFile.Api.Client.Models.SymbolicLink,System.Boolean)">
            <summary>
            Creates SymbolicLink
            </summary>
            <example>
            {
            "Name":"RemoteFileName",
            "Description":"Description",
            "Link":"https://server/provider/version/Items(id)",
            "Zone":{ "Id":"z014766e-8e96-4615-86aa-57132a69843c" },
            "ConnectorGroup": { "Id":"1" }
            }
            </example>
            <param name="url"></param>
            <param name="symlink"></param>
            <param name="overwrite"></param>
            <returns>
            the new SymbolicLink
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.Update(System.Uri,ShareFile.Api.Client.Models.Item,System.String,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Update Item
            </summary>
            <example>
            {
            "Name":"Name",
            "FileName":"FileName",
            "Description":"Description",
            "ExpirationDate": "date",
            "Parent": { "Id": "parentid" },
            "Zone": { "Id": "zoneid" }
            }
            </example>
            <remarks>
            Updates an Item object. Please note that for a Folder, the Name and FileName properties must be consistent.
            If a new Name is provided, the FileName will also be updated with the new name, and viceversa.
            If both Name and FileName are provided, FileName is disregarded and Name will be used to update both properties.
            </remarks>
            <param name="url"></param>
            <param name="item"></param>
            <param name="forceSync"></param>
            <param name="notify"></param>
            <returns>
            A modified Item object. If the item Zone or Parent Zone is modified, then this
            method will return an Asynchronous operation record instead. Note: the parameters listed in the
            body of the request are the only parameters that can be updated through this call.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.UpdateLink(System.String,ShareFile.Api.Client.Models.Link,System.Boolean)">
            <summary>
            Update Link
            </summary>
            <example>
            {
            "Name":"Name",
            "Uri":"https://server/path",
            "Description":"Description",
            "Parent": { "Id": "parentid" }
            }
            </example>
            <remarks>
            Updates a Link object
            </remarks>
            <param name="id"></param>
            <param name="link"></param>
            <param name="notify"></param>
            <returns>
            A modified Link object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.UpdateNote(System.String,ShareFile.Api.Client.Models.Note,System.Boolean)">
            <summary>
            Update Note
            </summary>
            <example>
            {
            "Name":"Name",
            "Description":"Description",
            "Parent": { "Id": "parentid" }
            }
            </example>
            <remarks>
            Updates a Note object
            </remarks>
            <param name="id"></param>
            <param name="note"></param>
            <param name="notify"></param>
            <returns>
            The modified Note object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.UpdateSymbolicLink(System.String,ShareFile.Api.Client.Models.SymbolicLink)">
            <summary>
            Update SymbolicLink
            </summary>
            <example>
            {
            "Name":"Name",
            "Description":"Description",
            "Link": "https://server/path"
            }
            </example>
            <remarks>
            Updates a Symbolic Link object
            </remarks>
            <param name="id"></param>
            <param name="symlink"></param>
            <returns>
            The modified SymbolicLink object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.Delete(System.Uri,System.Boolean,System.Boolean)">
            <summary>
            Delete Item
            </summary>
            <remarks>
            Removes an item
            </remarks>
            <param name="url"></param>
            <param name="singleversion"></param>
            <param name="forceSync"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.BulkDelete(System.Uri,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
            <summary>
            Delete Multiple Items
            </summary>
            <example>
            ["id1","id2"]
            </example>
            <remarks>
            All items in bulk delete must be children of the same parent, identified in the URI
            </remarks>
            <param name="parentUrl"></param>
            <param name="ids"></param>
            <param name="forceSync"></param>
            <param name="deletePermanently"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.GetThumbnail(System.Uri,System.Int32,System.Boolean)">
            <summary>
            Get Thumbnail
            </summary>
            <remarks>
            Retrieve a thumbnail link from the specified Item.
            </remarks>
            <param name="url"></param>
            <param name="size"></param>
            <param name="redirect"></param>
            <returns>
            A 302 redirection to the Thumbnail link
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.GetBreadcrumbs(System.Uri,System.String,System.Boolean)">
            <summary>
            Get Breadcrumbs
            </summary>
            <remarks>
            Retrieves the path from an item from the root. The return list is a Feed of Items, with the top-level
            folder at the first position. If this item is in a Connection path, the breadcrumbs may contain URL
            reference back to the parent account - and the Item in the feed will contain just the URL reference.
            </remarks>
            <param name="url"></param>
            <param name="path"></param>
            <param name="bubbleSharedPassthroughs"></param>
            <returns>
            A feed containing the path of folders from the specified root to the item, in order
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.Copy(System.Uri,System.String,System.Boolean)">
            <summary>
            Copy Item
            </summary>
            <remarks>
            Copies an item to a new target Folder. If the target folder is in another zone, the operation will
            return an AsyncOperation record instead. Clients may query the /AsyncOperation Entity to determine
            operation progress and result.
            </remarks>
            <param name="url"></param>
            <param name="targetid"></param>
            <param name="overwrite"></param>
            <returns>
            the modified source object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.Upload(System.Uri,ShareFile.Api.Client.Models.UploadMethod,System.Boolean,System.String,System.Int64,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String)">
            <summary>
            Upload File
            </summary>
            <example>
            POST https://account.sf-api.com/sf/v3/Items(id)/Upload2
            {
            "Method":"Method",
            "Raw": false,
            "FileName":"FileName",
            "FileSize": 2048
            }
            </example>
            <remarks>
            Prepares the links for uploading files to the target Folder.
            This method returns an Upload Specification object. The fields are
            populated based on the upload method, provider, and canResume parameters passed to the
            upload call.
            The Method determines how the URLs must be called.
            
            There are two different URLs for upload: /sf/v3/Items(id)/Upload accepts parameters
            through the URL query string, while /sf/v3/Items(id)/Upload2 uses the HTTP POST message body.
            If using 'Upload2', the parameters must be capitalized.
            
            Standard uploads use a single HTTP POST message to the ChunkUri address provided in
            the response. All other fields will be empty. Standard uploads do not support Resume.
            
            Streamed uploads use multiple HTTP POST calls to the ChunkUri address. For each call, the client
            must append the parameters index, byteOffset and hash to the ChunkUri address. Index is a
            sequential number (zero-based) identifying the position of the chunk relative to others;
            byteOffset represents how many bytes precede the chunk relative to the beginning of the file;
            and hash contains the MD5 hash of the chunk. The last HTTP POST must also include the parameters
            finish=true and filehash=[MD5 hash of entire file].
            
            Threaded uploads use multiple HTTP POST calls to ChunkUri, and can have a number of
            threads issuing chunks in parallel. Clients must append index, byteOffset and hash to
            the end of ChunkUri, as explained for Streamed uploads. After all chunks are sent, the client
            must call the FinishUri provided in the Upload Specification response.
            
            If using the Threaded Uploader, the client can add the parameter fmt=json to the ChunkUri
            to retrieve the Item ID of the file after the upload is completed.
            
            For all uploaders, the contents of the POST Body can either be "raw" (if the parameter raw=true
            is provided to the Uploader) or use MIME multi-part form encoding otherwise. Raw uploads
            provide the chunk content directly in the POST body and the Content-Length header specifies the size.
            Multi-part form encoding requires passing the file as a Form parameter named "Filedata".
            
            For Streamed and Threaded uploads, if the CanResume parameter is specified in the call to Upload,
            then the fields IsResume, ResumeIndex, ResumeOffset and ResumeFileHash may be populated in the
            Upload Specification response. If they are, it indicates that the server has identified a partial
            upload with that specification and is ready to resume the upload process. The client can
            verify the file has not been modified based on the value of ResumeFileHash, then continue issuing
            calls to the ChunkUri starting from the position represented by the values of ResumeIndex and
            ResumeOffset. If the client decides to restart the upload, it should simply ignore the resume
            fields and send chunks starting from Index 0.
            
            For all upload methods, successful HTTP POST calls to ChunkUri and FinishUri will return response
            code 200 with either no Content Body or with a Body of 'OK'. The response code for failed calls can
            be 401, indicating authentication is required; 4xx/5xx, indicating some kind of error; or
            200 with Content Body of format 'ERROR:[message]'.
            </remarks>
            <param name="url"></param>
            <param name="method"></param>
            <param name="raw"></param>
            <param name="fileName"></param>
            <param name="fileSize"></param>
            <param name="batchId"></param>
            <param name="batchLast"></param>
            <param name="canResume"></param>
            <param name="startOver"></param>
            <param name="unzip"></param>
            <param name="tool"></param>
            <param name="overwrite"></param>
            <param name="title"></param>
            <param name="details"></param>
            <param name="isSend"></param>
            <param name="sendGuid"></param>
            <param name="opid"></param>
            <param name="threadCount"></param>
            <param name="responseFormat"></param>
            <param name="notify"></param>
            <param name="clientCreatedDateUTC"></param>
            <param name="clientModifiedDateUTC"></param>
            <param name="baseFileId"></param>
            <returns>
            an Upload Specification element, containing the links for uploading, and the parameters for resume.
            The caller must know the protocol for sending the prepare, chunk and finish URLs returned in the spec; as well as
            negotiate the resume upload.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.CheckIn(System.Uri,System.String)">
            <summary>
            Unlock File
            </summary>
            <remarks>
            Unlock a locked file.
            This operation is only implemented in Sharepoint providers (/sp)
            </remarks>
            <param name="url"></param>
            <param name="message"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.CheckOut(System.Uri)">
            <summary>
            Lock File
            </summary>
            <remarks>
            Locks a file.
            This operation is only implemented in Sharepoint providers (/sp)
            </remarks>
            <param name="url"></param>
            <param name="lockdata"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.DiscardCheckOut(System.Uri)">
            <summary>
            Discard CheckOut
            </summary>
            <remarks>
            Discards the existing lock on the file
            This operation is only implemented in Sharepoint providers (/sp)
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.Search(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Search
            </summary>
            <remarks>
            Search for Items matching the criteria of the query parameter
            </remarks>
            <param name="query"></param>
            <param name="maxResults"></param>
            <param name="skip"></param>
            <param name="homeFolderOnly"></param>
            <returns>
            SearchResults
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.Search(System.Uri,System.String,System.Int32,System.Int32)">
            <summary>
            Search
            </summary>
            <remarks>
            Search for Items matching the criteria of the query parameter
            </remarks>
            <param name="query"></param>
            <param name="maxResults"></param>
            <param name="skip"></param>
            <param name="homeFolderOnly"></param>
            <returns>
            SearchResults
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.AdvancedSimpleSearch(ShareFile.Api.Client.Models.SimpleSearchQuery)">
            <summary>
            Advanced Simple Search
            </summary>
            <example>
            {
            "Query":{
            "ItemType":"",
            "ParentID":"",
            "CreatorID":"",
            "SearchQuery":"",
            "CreateStartDate":"",
            "CreateEndDate":"",
            "ItemNameOnly":false
            },
            "Paging":{
            "Count": 50,
            "Skip": 0
            },
            "Sort":{
            "SortBy":"",
            "Ascending":false
            },
            "TimeoutInSeconds":10
            }
            </example>
            <remarks>
            Search for Items matching the criteria of the query parameter. Paging.PageNumber and Paging.PageSize are deprecated.
            </remarks>
            <param name="simpleSearchQuery"></param>
            <returns>
            AdvancedSearchResults
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.AdvancedSearch(ShareFile.Api.Client.Models.SearchQuery)">
            <summary>
            Advanced Search
            </summary>
            <example>
            {
            "Query":{
            "ItemTypes":["type1", "type2"],
            "ParentID":["id1", "id2"],
            "CreatorID":["id1", "id2"],
            "SearchQuery":"",
            "CreateStartDate":"",
            "CreateEndDate":"",
            "ItemNameOnly":false
            },
            "Paging":{
            "Count":50,
            "Skip":0
            },
            "Sort":{
            "SortBy":"",
            "Ascending":false
            },
            "TimeoutInSeconds":10
            }
            </example>
            <remarks>
            Search for Items matching the criteria of the query parameter. Paging.PageNumber and Paging.PageSize are deprecated.
            Default values for Paging.Count is 50 and Paging.Skip is 0.
            </remarks>
            <param name="searchQuery"></param>
            <returns>
            AdvancedSearchResults
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.WebView(System.Uri)">
            <summary>
            Get Web Preview Link
            </summary>
            <remarks>
            Redirects the caller to the Web Edit application for the selected item.
            </remarks>
            <param name="url"></param>
            <returns>
            A redirection message to the Web Edit app for this item. It returns 404 (Not Found)
            if the Web Preview app doesn't support the file type.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.GetProtocolLinks(System.Uri,ShareFile.Api.Client.Models.PreviewPlatform)">
            <summary>
            Get List of Item Protocol Links
            </summary>
            <param name="url"></param>
            <param name="platform"></param>
            <returns>
            A list of protocol links depending on the input parameter 'platform', 404 (Not Found) if not supported by the item
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.GetRedirection(System.Uri)">
            <summary>
            Get Redirection endpoint Information
            </summary>
            <remarks>
            Returns the redirection endpoint for this Item.This operation applies to Folders and SymbolicLinks only, will return an error for other Item types.
            </remarks>
            <param name="url"></param>
            <returns>
            The Redirection endpoint Information
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.GetDeletedChildren(System.Uri)">
            <summary>
            Get a collection of recoverable/deleted items in a folder
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.GetUserDeletedItems(System.String,System.String)">
            <summary>
            Get a collection of recoverable/deleted items for a user
            </summary>
            <param name="userid"></param>
            <param name="zone"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.BulkRestore(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Restore expired items to their original locations
            </summary>
            <param name="ids"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.BulkDeletePermanently(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Permanently delete multiple items
            </summary>
            <param name="itemIds"></param>
            <param name="ids"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.WebAppLink(System.Uri)">
            <summary>
            Create a one-time use login Uri for the Web App.
            </summary>
            <remarks>
            The user will be logged in and routed to the parent folder of the Item.If the Item is a Folder, the user will be routed to that Folder.
            </remarks>
            <param name="url"></param>
            <returns>
            Redirection populated with link in Uri field
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.RemoveTemplateAssociation(System.Uri)">
            <summary>
            Remove folder template association from folder
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.CheckTemplateOwned(System.Uri)">
            <summary>
            Check if template is already part of an existing template structure
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IItemsEntity.CheckVersioningViolation(System.Uri,System.Int32)">
            <summary>
            Check if a versioning change would result in file deletions
            </summary>
            <param name="url"></param>
            <param name="newMaxVersions"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ShareFile.Api.Client.Entities.ItemsEntity.Get" -->
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.Get(System.Uri,System.Boolean)">
            <summary>
            Get Item by ID
            </summary>
            <remarks>
            Returns a single Item.
            Special Id's:home, favorites, allshared, connectors, box, top. home - Return home folder.
            favorites - Return parent favorite item; use .../Items(favorites)/Children to get the favorite folders.
            allshared - Return parent Shared Folders item; use .../Items(allshared)/Children to get the shared folders.
            connectors - Return parent Connectors item; use .../Items(connectors)/Children to get indiviual connectors.
            box - Return the FileBox folder. top - Returns the Top item; use .../Items(top)/Children to get the home, favorites, and shared folders as well as the connectors
            </remarks>
            <param name="url"></param>
            <param name="includeDeleted"></param>
            <returns>
            a single Item
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.Get(System.Uri,ShareFile.Api.Client.Models.TreeMode,System.String,System.Boolean,System.Boolean)">
            <summary>
            Get TreeView
            </summary>
            <remarks>
            Retrieves a folder list structure tailored for TreeView navigation - used by clients
            to create folder trees for specific operations.
            This operation will enforce a specific $select and $expand operators. You can provide
            additional $expand, for example Children, which is not added by default. The $select
            operator will apply to the expanded objects as well. You can also specify additional
            $select elements.
            </remarks>
            <param name="url"></param>
            <param name="treeMode"></param>
            <param name="sourceId"></param>
            <param name="canCreateRootFolder"></param>
            <param name="fileBox"></param>
            <returns>
            A tree root element.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.GetChildrenByConnectorGroup(System.Uri)">
            <summary>
            Get Symbolic Links of a Connector Group
            </summary>
            <remarks>
            Retrieves the Symbolic Links of the provided Connector Group type. Connector Groups define
            classes of external data connectors - such as SharePoint, Network Shares. Symbolic Links
            represent a single Connector point to such classes - for example, a single SharePoint site,
            or a network share drive.
            </remarks>
            <param name="parentUrl"></param>
            <returns>
            The list of Symbolic Links associated with the given connector group.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.Stream(System.Uri,System.Boolean)">
            <summary>
            Get Stream
            </summary>
            <remarks>
            Retrieves the versions of a given Stream. The ID parameter must be a StreamID, otherwise an empty list is returned.
            StreamID is a property of all Items, representing the "Stream", ie., the collection of all versions of a file. In
            contrast, an Item ID represents a single version of a file.
            For example, when users upload or modify an existing file, a new Item
            is created with the same StreamID. All default Item enumerations return only the latest version of a given stream.
            Use this method to retrieve previous versions of a given stream.
            This method carries a default OData $top parameter of 20. If more versions are required, specify the $top query
            option with the desired parameter.
            </remarks>
            <param name="url"></param>
            <param name="includeDeleted"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.ByPath(System.String)">
            <summary>
            Get Item by Path
            </summary>
            <remarks>
            Retrieves an item from its path. The path is of format /foldername/foldername/filename
            This call may redirect the client to another API provider, if the path
            contains a symbolic link.
            </remarks>
            <param name="path"></param>
            <returns>
            An item identified by a path
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.ByPath(System.Uri,System.String)">
            <summary>
            Get Item by relative Path from ID
            </summary>
            <remarks>
            Retrieves an item from its path, relative to the provided ID.
            The path is of format /foldername/foldername/filename
            This call may redirect the client to another API provider, if the path
            contains a symbolic link.
            </remarks>
            <param name="url"></param>
            <param name="path"></param>
            <returns>
            An item identified by a path
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.GetParent(System.Uri)">
            <summary>
            Get Parent Item
            </summary>
            <remarks>
            Retrieves the Parent navigation property of a single Item.
            </remarks>
            <param name="url"></param>
            <returns>
            the Parent Item of the give object ID.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.GetChildren(System.Uri,System.Boolean,ShareFile.Api.Client.Models.ItemOrderingMode)">
            <summary>
            Get Children
            </summary>
            <remarks>
            Handler for the Children navigation property of a given Item.
            A 302 redirection is returned if the folder is a SymbolicLink. The redirection
            will enumerate the children of the remote connector
            </remarks>
            <param name="url"></param>
            <param name="includeDeleted"></param>
            <param name="orderingMode"></param>
            <returns>
            the list of children under the given object ID
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.GetInfo(System.Uri)">
            <summary>
            Get Folder Access Info
            </summary>
            <remarks>
            Returns the effective Access Controls for the current authenticated user for the
            selected folder - i.e., the resulting set of Access Controls for the Item/User context.This operation applies to Folders only, will return an error for other Item types.
            </remarks>
            <param name="url"></param>
            <returns>
            The Folder Access Control Information
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.Download(System.Uri,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Download Item Content
            </summary>
            <remarks>
            Initiate the download operation for an item. It will return 302 redirection to the
            actual download link. For Folders, the download link will retrieve a ZIP archive
            with the contents of the Folder.
            </remarks>
            <param name="url"></param>
            <param name="redirect"></param>
            <param name="includeAllVersions"></param>
            <param name="includeDeleted"></param>
            <returns>
            the download link for the provided item content.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.BulkDownload(System.Uri,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Download Multiple Items
            </summary>
            <example>
            ["id1","id2"]
            </example>
            <remarks>
            Initiate the download operation for items. It will return 302 redirection to the
            actual download link.
            </remarks>
            <param name="parentUrl"></param>
            <param name="ids"></param>
            <param name="redirect"></param>
            <returns>
            the download link for the provided item content.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.CreateFolder(System.Uri,ShareFile.Api.Client.Models.Folder,System.Boolean,System.Boolean)">
            <summary>
            Create Folder
            </summary>
            <example>
            {
            "Name":"Folder Name",
            "Description":"Description",
            "Zone":{ "Id":"ZoneId" },
            "ExpirationDate": "9999-12-31T23:59:59.9999999Z"
            }
            </example>
            <remarks>
            Creates a new Folder.
            The POST body must contain the serialized object.
            For top-level folders, use Items/Folder.
            The Zone object may only be provided for top-level folders. The Zone object must
            contain a zone ID.
            </remarks>
            <param name="parentUrl"></param>
            <param name="folder"></param>
            <param name="overwrite"></param>
            <param name="passthrough"></param>
            <returns>
            the new Folder
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.CreateNote(System.Uri,ShareFile.Api.Client.Models.Note)">
            <summary>
            Create Note
            </summary>
            <example>
            {
            "Name":"Note Name",
            "Description":"Description"
            }
            </example>
            <remarks>
            Creates a new Note.
            </remarks>
            <param name="parentUrl"></param>
            <param name="note"></param>
            <returns>
            the new Note
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.CreateLink(System.Uri,ShareFile.Api.Client.Models.Link)">
            <summary>
            Create Link
            </summary>
            <example>
            {
            "Name":"Link Name",
            "Description":"Description",
            "Uri":"https://server/path"
            }
            </example>
            <remarks>
            Creates a new Link
            </remarks>
            <param name="parentUrl"></param>
            <param name="link"></param>
            <returns>
            the new Link
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.CreateSymbolicLink(System.Uri,ShareFile.Api.Client.Models.SymbolicLink,System.Boolean)">
            <summary>
            Create SymbolicLink
            </summary>
            <example>
            {
            "Name":"RemoteFileName",
            "Description":"Description",
            "Zone":{ "Id":"z014766e-8e96-4615-86aa-57132a69843c" },
            "ConnectorGroup": { "Id":"1" }
            }
            </example>
            <remarks>
            Creates a Symbolic Link
            The body must contain either a "Link" parameter with a fully qualified URI; or use
            FileName + Zone to have sharefile.com attempt to convert the Connector path to an
            URI using a call to the Zone - using ShareFile Hash authentication mode. For active
            clients, it's recommended to make the convertion call to the Zone directly, using
            Items/ByPath=name, retriving the resulting URL, and calling this method with the
            Link parameter.SymbolicLinks must be created as top-level folders - i.e., this call requires
            the parent to be the Item(accountid) element.Zone defines the location of the SymbolicLink target - for example, for
            Network Shares connectors, the SymbolicLink will point to the StorageZone Controller
            that will serve the file browsing requests.The ConnectorGroup parameter indicates the kind of symbolic link - e.g., Network
            Share, or SharePoint.
            </remarks>
            <param name="parentUrl"></param>
            <param name="symlink"></param>
            <param name="overwrite"></param>
            <returns>
            the new SymbolicLink
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.CreateChildrenByConnectorGroup(System.Uri,ShareFile.Api.Client.Models.SymbolicLink,System.Boolean)">
            <summary>
            Creates SymbolicLink
            </summary>
            <example>
            {
            "Name":"RemoteFileName",
            "Description":"Description",
            "Link":"https://server/provider/version/Items(id)",
            "Zone":{ "Id":"z014766e-8e96-4615-86aa-57132a69843c" },
            "ConnectorGroup": { "Id":"1" }
            }
            </example>
            <param name="url"></param>
            <param name="symlink"></param>
            <param name="overwrite"></param>
            <returns>
            the new SymbolicLink
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.Update(System.Uri,ShareFile.Api.Client.Models.Item,System.String,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Update Item
            </summary>
            <example>
            {
            "Name":"Name",
            "FileName":"FileName",
            "Description":"Description",
            "ExpirationDate": "date",
            "Parent": { "Id": "parentid" },
            "Zone": { "Id": "zoneid" }
            }
            </example>
            <remarks>
            Updates an Item object. Please note that for a Folder, the Name and FileName properties must be consistent.
            If a new Name is provided, the FileName will also be updated with the new name, and viceversa.
            If both Name and FileName are provided, FileName is disregarded and Name will be used to update both properties.
            </remarks>
            <param name="url"></param>
            <param name="item"></param>
            <param name="forceSync"></param>
            <param name="notify"></param>
            <returns>
            A modified Item object. If the item Zone or Parent Zone is modified, then this
            method will return an Asynchronous operation record instead. Note: the parameters listed in the
            body of the request are the only parameters that can be updated through this call.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.UpdateLink(System.String,ShareFile.Api.Client.Models.Link,System.Boolean)">
            <summary>
            Update Link
            </summary>
            <example>
            {
            "Name":"Name",
            "Uri":"https://server/path",
            "Description":"Description",
            "Parent": { "Id": "parentid" }
            }
            </example>
            <remarks>
            Updates a Link object
            </remarks>
            <param name="id"></param>
            <param name="link"></param>
            <param name="notify"></param>
            <returns>
            A modified Link object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.UpdateNote(System.String,ShareFile.Api.Client.Models.Note,System.Boolean)">
            <summary>
            Update Note
            </summary>
            <example>
            {
            "Name":"Name",
            "Description":"Description",
            "Parent": { "Id": "parentid" }
            }
            </example>
            <remarks>
            Updates a Note object
            </remarks>
            <param name="id"></param>
            <param name="note"></param>
            <param name="notify"></param>
            <returns>
            The modified Note object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.UpdateSymbolicLink(System.String,ShareFile.Api.Client.Models.SymbolicLink)">
            <summary>
            Update SymbolicLink
            </summary>
            <example>
            {
            "Name":"Name",
            "Description":"Description",
            "Link": "https://server/path"
            }
            </example>
            <remarks>
            Updates a Symbolic Link object
            </remarks>
            <param name="id"></param>
            <param name="symlink"></param>
            <returns>
            The modified SymbolicLink object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.Delete(System.Uri,System.Boolean,System.Boolean)">
            <summary>
            Delete Item
            </summary>
            <remarks>
            Removes an item
            </remarks>
            <param name="url"></param>
            <param name="singleversion"></param>
            <param name="forceSync"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.BulkDelete(System.Uri,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
            <summary>
            Delete Multiple Items
            </summary>
            <example>
            ["id1","id2"]
            </example>
            <remarks>
            All items in bulk delete must be children of the same parent, identified in the URI
            </remarks>
            <param name="parentUrl"></param>
            <param name="ids"></param>
            <param name="forceSync"></param>
            <param name="deletePermanently"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.GetThumbnail(System.Uri,System.Int32,System.Boolean)">
            <summary>
            Get Thumbnail
            </summary>
            <remarks>
            Retrieve a thumbnail link from the specified Item.
            </remarks>
            <param name="url"></param>
            <param name="size"></param>
            <param name="redirect"></param>
            <returns>
            A 302 redirection to the Thumbnail link
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.GetBreadcrumbs(System.Uri,System.String,System.Boolean)">
            <summary>
            Get Breadcrumbs
            </summary>
            <remarks>
            Retrieves the path from an item from the root. The return list is a Feed of Items, with the top-level
            folder at the first position. If this item is in a Connection path, the breadcrumbs may contain URL
            reference back to the parent account - and the Item in the feed will contain just the URL reference.
            </remarks>
            <param name="url"></param>
            <param name="path"></param>
            <param name="bubbleSharedPassthroughs"></param>
            <returns>
            A feed containing the path of folders from the specified root to the item, in order
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.Copy(System.Uri,System.String,System.Boolean)">
            <summary>
            Copy Item
            </summary>
            <remarks>
            Copies an item to a new target Folder. If the target folder is in another zone, the operation will
            return an AsyncOperation record instead. Clients may query the /AsyncOperation Entity to determine
            operation progress and result.
            </remarks>
            <param name="url"></param>
            <param name="targetid"></param>
            <param name="overwrite"></param>
            <returns>
            the modified source object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.Upload(System.Uri,ShareFile.Api.Client.Models.UploadMethod,System.Boolean,System.String,System.Int64,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String)">
            <summary>
            Upload File
            </summary>
            <example>
            POST https://account.sf-api.com/sf/v3/Items(id)/Upload2
            {
            "Method":"Method",
            "Raw": false,
            "FileName":"FileName",
            "FileSize": 2048
            }
            </example>
            <remarks>
            Prepares the links for uploading files to the target Folder.
            This method returns an Upload Specification object. The fields are
            populated based on the upload method, provider, and canResume parameters passed to the
            upload call.
            The Method determines how the URLs must be called.
            
            There are two different URLs for upload: /sf/v3/Items(id)/Upload accepts parameters
            through the URL query string, while /sf/v3/Items(id)/Upload2 uses the HTTP POST message body.
            If using 'Upload2', the parameters must be capitalized.
            
            Standard uploads use a single HTTP POST message to the ChunkUri address provided in
            the response. All other fields will be empty. Standard uploads do not support Resume.
            
            Streamed uploads use multiple HTTP POST calls to the ChunkUri address. For each call, the client
            must append the parameters index, byteOffset and hash to the ChunkUri address. Index is a
            sequential number (zero-based) identifying the position of the chunk relative to others;
            byteOffset represents how many bytes precede the chunk relative to the beginning of the file;
            and hash contains the MD5 hash of the chunk. The last HTTP POST must also include the parameters
            finish=true and filehash=[MD5 hash of entire file].
            
            Threaded uploads use multiple HTTP POST calls to ChunkUri, and can have a number of
            threads issuing chunks in parallel. Clients must append index, byteOffset and hash to
            the end of ChunkUri, as explained for Streamed uploads. After all chunks are sent, the client
            must call the FinishUri provided in the Upload Specification response.
            
            If using the Threaded Uploader, the client can add the parameter fmt=json to the ChunkUri
            to retrieve the Item ID of the file after the upload is completed.
            
            For all uploaders, the contents of the POST Body can either be "raw" (if the parameter raw=true
            is provided to the Uploader) or use MIME multi-part form encoding otherwise. Raw uploads
            provide the chunk content directly in the POST body and the Content-Length header specifies the size.
            Multi-part form encoding requires passing the file as a Form parameter named "Filedata".
            
            For Streamed and Threaded uploads, if the CanResume parameter is specified in the call to Upload,
            then the fields IsResume, ResumeIndex, ResumeOffset and ResumeFileHash may be populated in the
            Upload Specification response. If they are, it indicates that the server has identified a partial
            upload with that specification and is ready to resume the upload process. The client can
            verify the file has not been modified based on the value of ResumeFileHash, then continue issuing
            calls to the ChunkUri starting from the position represented by the values of ResumeIndex and
            ResumeOffset. If the client decides to restart the upload, it should simply ignore the resume
            fields and send chunks starting from Index 0.
            
            For all upload methods, successful HTTP POST calls to ChunkUri and FinishUri will return response
            code 200 with either no Content Body or with a Body of 'OK'. The response code for failed calls can
            be 401, indicating authentication is required; 4xx/5xx, indicating some kind of error; or
            200 with Content Body of format 'ERROR:[message]'.
            </remarks>
            <param name="url"></param>
            <param name="method"></param>
            <param name="raw"></param>
            <param name="fileName"></param>
            <param name="fileSize"></param>
            <param name="batchId"></param>
            <param name="batchLast"></param>
            <param name="canResume"></param>
            <param name="startOver"></param>
            <param name="unzip"></param>
            <param name="tool"></param>
            <param name="overwrite"></param>
            <param name="title"></param>
            <param name="details"></param>
            <param name="isSend"></param>
            <param name="sendGuid"></param>
            <param name="opid"></param>
            <param name="threadCount"></param>
            <param name="responseFormat"></param>
            <param name="notify"></param>
            <param name="clientCreatedDateUTC"></param>
            <param name="clientModifiedDateUTC"></param>
            <param name="baseFileId"></param>
            <returns>
            an Upload Specification element, containing the links for uploading, and the parameters for resume.
            The caller must know the protocol for sending the prepare, chunk and finish URLs returned in the spec; as well as
            negotiate the resume upload.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.CheckIn(System.Uri,System.String)">
            <summary>
            Unlock File
            </summary>
            <remarks>
            Unlock a locked file.
            This operation is only implemented in Sharepoint providers (/sp)
            </remarks>
            <param name="url"></param>
            <param name="message"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.CheckOut(System.Uri)">
            <summary>
            Lock File
            </summary>
            <remarks>
            Locks a file.
            This operation is only implemented in Sharepoint providers (/sp)
            </remarks>
            <param name="url"></param>
            <param name="lockdata"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.DiscardCheckOut(System.Uri)">
            <summary>
            Discard CheckOut
            </summary>
            <remarks>
            Discards the existing lock on the file
            This operation is only implemented in Sharepoint providers (/sp)
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.Search(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Search
            </summary>
            <remarks>
            Search for Items matching the criteria of the query parameter
            </remarks>
            <param name="query"></param>
            <param name="maxResults"></param>
            <param name="skip"></param>
            <param name="homeFolderOnly"></param>
            <returns>
            SearchResults
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.Search(System.Uri,System.String,System.Int32,System.Int32)">
            <summary>
            Search
            </summary>
            <remarks>
            Search for Items matching the criteria of the query parameter
            </remarks>
            <param name="query"></param>
            <param name="maxResults"></param>
            <param name="skip"></param>
            <param name="homeFolderOnly"></param>
            <returns>
            SearchResults
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.AdvancedSimpleSearch(ShareFile.Api.Client.Models.SimpleSearchQuery)">
            <summary>
            Advanced Simple Search
            </summary>
            <example>
            {
            "Query":{
            "ItemType":"",
            "ParentID":"",
            "CreatorID":"",
            "SearchQuery":"",
            "CreateStartDate":"",
            "CreateEndDate":"",
            "ItemNameOnly":false
            },
            "Paging":{
            "Count": 50,
            "Skip": 0
            },
            "Sort":{
            "SortBy":"",
            "Ascending":false
            },
            "TimeoutInSeconds":10
            }
            </example>
            <remarks>
            Search for Items matching the criteria of the query parameter. Paging.PageNumber and Paging.PageSize are deprecated.
            </remarks>
            <param name="simpleSearchQuery"></param>
            <returns>
            AdvancedSearchResults
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.AdvancedSearch(ShareFile.Api.Client.Models.SearchQuery)">
            <summary>
            Advanced Search
            </summary>
            <example>
            {
            "Query":{
            "ItemTypes":["type1", "type2"],
            "ParentID":["id1", "id2"],
            "CreatorID":["id1", "id2"],
            "SearchQuery":"",
            "CreateStartDate":"",
            "CreateEndDate":"",
            "ItemNameOnly":false
            },
            "Paging":{
            "Count":50,
            "Skip":0
            },
            "Sort":{
            "SortBy":"",
            "Ascending":false
            },
            "TimeoutInSeconds":10
            }
            </example>
            <remarks>
            Search for Items matching the criteria of the query parameter. Paging.PageNumber and Paging.PageSize are deprecated.
            Default values for Paging.Count is 50 and Paging.Skip is 0.
            </remarks>
            <param name="searchQuery"></param>
            <returns>
            AdvancedSearchResults
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.WebView(System.Uri)">
            <summary>
            Get Web Preview Link
            </summary>
            <remarks>
            Redirects the caller to the Web Edit application for the selected item.
            </remarks>
            <param name="url"></param>
            <returns>
            A redirection message to the Web Edit app for this item. It returns 404 (Not Found)
            if the Web Preview app doesn't support the file type.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.GetProtocolLinks(System.Uri,ShareFile.Api.Client.Models.PreviewPlatform)">
            <summary>
            Get List of Item Protocol Links
            </summary>
            <param name="url"></param>
            <param name="platform"></param>
            <returns>
            A list of protocol links depending on the input parameter 'platform', 404 (Not Found) if not supported by the item
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.GetRedirection(System.Uri)">
            <summary>
            Get Redirection endpoint Information
            </summary>
            <remarks>
            Returns the redirection endpoint for this Item.This operation applies to Folders and SymbolicLinks only, will return an error for other Item types.
            </remarks>
            <param name="url"></param>
            <returns>
            The Redirection endpoint Information
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.GetDeletedChildren(System.Uri)">
            <summary>
            Get a collection of recoverable/deleted items in a folder
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.GetUserDeletedItems(System.String,System.String)">
            <summary>
            Get a collection of recoverable/deleted items for a user
            </summary>
            <param name="userid"></param>
            <param name="zone"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.BulkRestore(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Restore expired items to their original locations
            </summary>
            <param name="ids"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.BulkDeletePermanently(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Permanently delete multiple items
            </summary>
            <param name="itemIds"></param>
            <param name="ids"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.WebAppLink(System.Uri)">
            <summary>
            Create a one-time use login Uri for the Web App.
            </summary>
            <remarks>
            The user will be logged in and routed to the parent folder of the Item.If the Item is a Folder, the user will be routed to that Folder.
            </remarks>
            <param name="url"></param>
            <returns>
            Redirection populated with link in Uri field
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.RemoveTemplateAssociation(System.Uri)">
            <summary>
            Remove folder template association from folder
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.CheckTemplateOwned(System.Uri)">
            <summary>
            Check if template is already part of an existing template structure
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ItemsEntity.CheckVersioningViolation(System.Uri,System.Int32)">
            <summary>
            Check if a versioning change would result in file deletions
            </summary>
            <param name="url"></param>
            <param name="newMaxVersions"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IMetadataEntity.Get(System.Uri)">
            <summary>
            Get Metadata by ID
            </summary>
            <remarks>
            Retrieves a single Metadata entry that has a given Name for a given Item.
            Note:
            'GET https://account.sf-api.com/sf/v3/Items(parentid)/Metadata(id)' is unsupported.
            Current routing doesn't support the URI to retrieve a single Metadata enntry since it is aliased with the GetByItem feed.
            So for now we support only the same syntax as for AccessControls, i.e. .../Metadata(name=name,itemid=itemid)
            </remarks>
            <returns>
            A single Metadata object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IMetadataEntity.GetByItem(System.Uri)">
            <summary>
            Get Metadata List By Item
            </summary>
            <remarks>
            Retrieves the Metadata List for a given Item.
            </remarks>
            <param name="url"></param>
            <returns>
            The Metadata list of the given object ID.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IMetadataEntity.CreateByItem(System.Uri,ShareFile.Api.Client.Models.Metadata)">
            <summary>
            Create Metadata
            </summary>
            <example>
            {
            "Name":"metadata name",
            "Value":"metadata value"
            }
            </example>
            <remarks>
            Creates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name already exists for this Item.
            </remarks>
            <param name="url"></param>
            <returns>
            The created Metadata object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IMetadataEntity.UpdateByItem(System.Uri,System.String,ShareFile.Api.Client.Models.Metadata)">
            <summary>
            Update Metadata
            </summary>
            <example>
            {
            "Value":"metadata value"
            }
            </example>
            <remarks>
            Updates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
            </remarks>
            <param name="url"></param>
            <param name="metadataId"></param>
            <returns>
            The updated Metadata object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IMetadataEntity.Update(System.Uri,ShareFile.Api.Client.Models.Metadata)">
            <summary>
            Update Metadata
            </summary>
            <example>
            {
            "Value":"metadata value"
            }
            </example>
            <remarks>
            Updates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
            </remarks>
            <returns>
            The updated Metadata object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IMetadataEntity.UpdateItem(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Client.Models.Metadata})">
            <summary>
            Update Item Metadata
            </summary>
            <example>
            [{
            "Value":"metadata value"
            },{
            "Value":"metadata value"
            }]
            </example>
            <remarks>
            Update the item corresponding to the supplied id with the provided key-value Metadata models.
            If a metadata key is not already associated with the item, the item is updated with the new key-value pair.
            </remarks>
            <param name="url"></param>
            <returns>
            The updated Metadata list for the given object ID.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IMetadataEntity.DeleteByItem(System.Uri,System.String)">
            <summary>
            Delete Metadata
            </summary>
            <remarks>
            Deletes a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
            </remarks>
            <param name="url"></param>
            <param name="metadataId"></param>
            <returns>
            (no data)
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IMetadataEntity.Delete(System.Uri)">
            <summary>
            Delete Metadata
            </summary>
            <remarks>
            Deletes a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
            </remarks>
            <returns>
            (no data)
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.MetadataEntity.Get(System.Uri)">
            <summary>
            Get Metadata by ID
            </summary>
            <remarks>
            Retrieves a single Metadata entry that has a given Name for a given Item.
            Note:
            'GET https://account.sf-api.com/sf/v3/Items(parentid)/Metadata(id)' is unsupported.
            Current routing doesn't support the URI to retrieve a single Metadata enntry since it is aliased with the GetByItem feed.
            So for now we support only the same syntax as for AccessControls, i.e. .../Metadata(name=name,itemid=itemid)
            </remarks>
            <returns>
            A single Metadata object matching the query
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.MetadataEntity.GetByItem(System.Uri)">
            <summary>
            Get Metadata List By Item
            </summary>
            <remarks>
            Retrieves the Metadata List for a given Item.
            </remarks>
            <param name="url"></param>
            <returns>
            The Metadata list of the given object ID.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.MetadataEntity.CreateByItem(System.Uri,ShareFile.Api.Client.Models.Metadata)">
            <summary>
            Create Metadata
            </summary>
            <example>
            {
            "Name":"metadata name",
            "Value":"metadata value"
            }
            </example>
            <remarks>
            Creates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name already exists for this Item.
            </remarks>
            <param name="url"></param>
            <returns>
            The created Metadata object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.MetadataEntity.UpdateByItem(System.Uri,System.String,ShareFile.Api.Client.Models.Metadata)">
            <summary>
            Update Metadata
            </summary>
            <example>
            {
            "Value":"metadata value"
            }
            </example>
            <remarks>
            Updates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
            </remarks>
            <param name="url"></param>
            <param name="metadataId"></param>
            <returns>
            The updated Metadata object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.MetadataEntity.Update(System.Uri,ShareFile.Api.Client.Models.Metadata)">
            <summary>
            Update Metadata
            </summary>
            <example>
            {
            "Value":"metadata value"
            }
            </example>
            <remarks>
            Updates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
            </remarks>
            <returns>
            The updated Metadata object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.MetadataEntity.UpdateItem(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Client.Models.Metadata})">
            <summary>
            Update Item Metadata
            </summary>
            <example>
            [{
            "Value":"metadata value"
            },{
            "Value":"metadata value"
            }]
            </example>
            <remarks>
            Update the item corresponding to the supplied id with the provided key-value Metadata models.
            If a metadata key is not already associated with the item, the item is updated with the new key-value pair.
            </remarks>
            <param name="url"></param>
            <returns>
            The updated Metadata list for the given object ID.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.MetadataEntity.DeleteByItem(System.Uri,System.String)">
            <summary>
            Delete Metadata
            </summary>
            <remarks>
            Deletes a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
            </remarks>
            <param name="url"></param>
            <param name="metadataId"></param>
            <returns>
            (no data)
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.MetadataEntity.Delete(System.Uri)">
            <summary>
            Delete Metadata
            </summary>
            <remarks>
            Deletes a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
            </remarks>
            <returns>
            (no data)
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IPoliciesEntity.Get">
            <summary>
            Get List of Account Policies
            </summary>
            <remarks>
            The Policies endpoint returns the list of policies that have been defined for current account.
            </remarks>
            <returns>
            List of account policies
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IPoliciesEntity.Get(System.Uri)">
            <summary>
            Get Policy
            </summary>
            <remarks>
            Returns information for a specific Policy.
            </remarks>
            <param name="url"></param>
            <returns>
            A single Policy
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IPoliciesEntity.PatchByUser(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Client.Models.UserPolicy})">
            <summary>
            Set user Policy
            </summary>
            <example>
            [{
            "Active": true,
            "Policy": {
            "Id": "123"
            }
            },
            {
            "Active": false,
            "Policy": {
            "Id": "456"
            }
            }]
            </example>
            <remarks>
            Replace all policies associated with user
            Leaving any category out will effectively disable PBA for that category. At most one policy per category is allowed.
            </remarks>
            <param name="url"></param>
            <param name="policyIds"></param>
            <returns>
            Returns user policies
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IPoliciesEntity.CreateByUser(System.Uri,ShareFile.Api.Client.Models.UserPolicy)">
            <summary>
            Create User Policy
            </summary>
            <example>
            {
            "Active": true,
            "Policy": {
            "Id": "123"
            }
            }
            </example>
            <remarks>
            Assigns a Policy to a user
            </remarks>
            <param name="url"></param>
            <param name="policy"></param>
            <returns>
            Returns newly assigned Policy
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IPoliciesEntity.DeleteByUser(System.Uri)">
            <summary>
            Delete User Policies
            </summary>
            <remarks>
            Remove user from policy based admin
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IPoliciesEntity.UpdateByUser(System.Uri,System.String,ShareFile.Api.Client.Models.UserPolicy)">
            <summary>
            Update a single UserPolicy
            </summary>
            <example>
            {
            "Active": false
            }
            </example>
            <remarks>
            Updates a single user Policy. Currently this only allows an update to the Active flag.
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.PoliciesEntity.Get">
            <summary>
            Get List of Account Policies
            </summary>
            <remarks>
            The Policies endpoint returns the list of policies that have been defined for current account.
            </remarks>
            <returns>
            List of account policies
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.PoliciesEntity.Get(System.Uri)">
            <summary>
            Get Policy
            </summary>
            <remarks>
            Returns information for a specific Policy.
            </remarks>
            <param name="url"></param>
            <returns>
            A single Policy
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.PoliciesEntity.PatchByUser(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Client.Models.UserPolicy})">
            <summary>
            Set user Policy
            </summary>
            <example>
            [{
            "Active": true,
            "Policy": {
            "Id": "123"
            }
            },
            {
            "Active": false,
            "Policy": {
            "Id": "456"
            }
            }]
            </example>
            <remarks>
            Replace all policies associated with user
            Leaving any category out will effectively disable PBA for that category. At most one policy per category is allowed.
            </remarks>
            <param name="url"></param>
            <param name="policyIds"></param>
            <returns>
            Returns user policies
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.PoliciesEntity.CreateByUser(System.Uri,ShareFile.Api.Client.Models.UserPolicy)">
            <summary>
            Create User Policy
            </summary>
            <example>
            {
            "Active": true,
            "Policy": {
            "Id": "123"
            }
            }
            </example>
            <remarks>
            Assigns a Policy to a user
            </remarks>
            <param name="url"></param>
            <param name="policy"></param>
            <returns>
            Returns newly assigned Policy
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.PoliciesEntity.DeleteByUser(System.Uri)">
            <summary>
            Delete User Policies
            </summary>
            <remarks>
            Remove user from policy based admin
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.PoliciesEntity.UpdateByUser(System.Uri,System.String,ShareFile.Api.Client.Models.UserPolicy)">
            <summary>
            Update a single UserPolicy
            </summary>
            <example>
            {
            "Active": false
            }
            </example>
            <remarks>
            Updates a single user Policy. Currently this only allows an update to the Active flag.
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.Get">
            <summary>
            Get Reports for Current Account
            </summary>
            <remarks>
            Returns all the reports configured for the current account. By expanding the Records property, a list of all ReportRecords can be accessed as well.
            </remarks>
            <returns>
            Reports for current account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.Get(System.Uri)">
            <summary>
            Get Report by ID
            </summary>
            <remarks>
            Returns a single report specified by id. The Records property is expandable.
            </remarks>
            <param name="url"></param>
            <returns>
            Single Report
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.GetRecent(System.Int32)">
            <summary>
            Get recent reports
            </summary>
            <remarks>
            Returns the most recent reports run for the current account. 10 reports are returned unless otherwise specified.
            </remarks>
            <param name="maxReports"></param>
            <returns>
            List of reports
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.GetRecurring">
            <summary>
            Get recurring reports
            </summary>
            <remarks>
            Returns all recurring reports for the current account.
            </remarks>
            <returns>
            List of reports
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.GetRecord(System.String)">
            <summary>
            Get Report Record by ID
            </summary>
            <remarks>
            Returns a single record.
            </remarks>
            <param name="id"></param>
            <returns>
            Single Record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.GetRecords(System.Uri)">
            <summary>
            Get all Records by Report ID
            </summary>
            <remarks>
            Returns all records for a single report.
            </remarks>
            <param name="url"></param>
            <returns>
            Records for a Report
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.Create(ShareFile.Api.Client.Models.Report,System.Boolean)">
            <summary>
            Create Report
            </summary>
            <example>
            {
            "Title": "Usage Report",
            "ReportType": "Activity",
            "ActivityTypes": "Login,Upload,Download,View",
            "ObjectType": "Account",
            "ObjectId": "accountId",
            "DateOption": "Last30Days",
            "SaveFormat": "Excel"
            }
            </example>
            <remarks>
            Creates a new Report. The sample above is for an Account Activity Report. For more options please refer to the Report
            model documentation.
            </remarks>
            <param name="report"></param>
            <param name="runOnCreate"></param>
            <returns>
            Created Report
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.Update(ShareFile.Api.Client.Models.Report)">
            <summary>
            Update Report
            </summary>
            <example>
            {
            "Title": "Usage Report",
            "ReportType": "Activity",
            "ObjectType": "Account",
            "ObjectId": "a024f83e-b147-437e-9f28-e7d03634af42",
            "DateOption": "Last30Days",
            "Frequency": "Once"
            }
            </example>
            <remarks>
            Updates an existing report
            </remarks>
            <param name="report"></param>
            <returns>
            the updated report
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.Delete(System.Uri)">
            <summary>
            Delete Report
            </summary>
            <remarks>
            Removes a report from the system
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.GetRun(System.Uri)">
            <summary>
            Run Report
            </summary>
            <remarks>
            Run a report and get the run id.
            </remarks>
            <returns>
            ReportRecord
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.Preview(System.Uri)">
            <summary>
            Get a preview location for the report
            </summary>
            <param name="reportUrl"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.GetJsonData(System.String)">
            <summary>
            Get JSON Data
            </summary>
            <remarks>
            Get the JSON data for a report
            </remarks>
            <param name="id"></param>
            <returns>
            JSON Formatted Report Results
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.Move(System.Uri,System.String)">
            <summary>
            Save a folder to a folder location
            </summary>
            <param name="reportUrl"></param>
            <param name="folderId"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IReportsEntity.DownloadData(System.String,System.Boolean)">
            <summary>
            Get spreadsheet data
            </summary>
            <remarks>
            Download spreadsheet data for a report. If parameter "getSigndedUrl" is true,
            this endpoint returns a Download Specification object with a "url" parameter, which will point to the file's location
            </remarks>
            <param name="id"></param>
            <param name="getSignedUrl"></param>
            <returns>
            Excel Formatted Report Results or Download Specification
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.Get">
            <summary>
            Get Reports for Current Account
            </summary>
            <remarks>
            Returns all the reports configured for the current account. By expanding the Records property, a list of all ReportRecords can be accessed as well.
            </remarks>
            <returns>
            Reports for current account
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.Get(System.Uri)">
            <summary>
            Get Report by ID
            </summary>
            <remarks>
            Returns a single report specified by id. The Records property is expandable.
            </remarks>
            <param name="url"></param>
            <returns>
            Single Report
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.GetRecent(System.Int32)">
            <summary>
            Get recent reports
            </summary>
            <remarks>
            Returns the most recent reports run for the current account. 10 reports are returned unless otherwise specified.
            </remarks>
            <param name="maxReports"></param>
            <returns>
            List of reports
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.GetRecurring">
            <summary>
            Get recurring reports
            </summary>
            <remarks>
            Returns all recurring reports for the current account.
            </remarks>
            <returns>
            List of reports
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.GetRecord(System.String)">
            <summary>
            Get Report Record by ID
            </summary>
            <remarks>
            Returns a single record.
            </remarks>
            <param name="id"></param>
            <returns>
            Single Record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.GetRecords(System.Uri)">
            <summary>
            Get all Records by Report ID
            </summary>
            <remarks>
            Returns all records for a single report.
            </remarks>
            <param name="url"></param>
            <returns>
            Records for a Report
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.Create(ShareFile.Api.Client.Models.Report,System.Boolean)">
            <summary>
            Create Report
            </summary>
            <example>
            {
            "Title": "Usage Report",
            "ReportType": "Activity",
            "ActivityTypes": "Login,Upload,Download,View",
            "ObjectType": "Account",
            "ObjectId": "accountId",
            "DateOption": "Last30Days",
            "SaveFormat": "Excel"
            }
            </example>
            <remarks>
            Creates a new Report. The sample above is for an Account Activity Report. For more options please refer to the Report
            model documentation.
            </remarks>
            <param name="report"></param>
            <param name="runOnCreate"></param>
            <returns>
            Created Report
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.Update(ShareFile.Api.Client.Models.Report)">
            <summary>
            Update Report
            </summary>
            <example>
            {
            "Title": "Usage Report",
            "ReportType": "Activity",
            "ObjectType": "Account",
            "ObjectId": "a024f83e-b147-437e-9f28-e7d03634af42",
            "DateOption": "Last30Days",
            "Frequency": "Once"
            }
            </example>
            <remarks>
            Updates an existing report
            </remarks>
            <param name="report"></param>
            <returns>
            the updated report
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.Delete(System.Uri)">
            <summary>
            Delete Report
            </summary>
            <remarks>
            Removes a report from the system
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.GetRun(System.Uri)">
            <summary>
            Run Report
            </summary>
            <remarks>
            Run a report and get the run id.
            </remarks>
            <returns>
            ReportRecord
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.Preview(System.Uri)">
            <summary>
            Get a preview location for the report
            </summary>
            <param name="reportUrl"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.GetJsonData(System.String)">
            <summary>
            Get JSON Data
            </summary>
            <remarks>
            Get the JSON data for a report
            </remarks>
            <param name="id"></param>
            <returns>
            JSON Formatted Report Results
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.Move(System.Uri,System.String)">
            <summary>
            Save a folder to a folder location
            </summary>
            <param name="reportUrl"></param>
            <param name="folderId"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ReportsEntity.DownloadData(System.String,System.Boolean)">
            <summary>
            Get spreadsheet data
            </summary>
            <remarks>
            Download spreadsheet data for a report. If parameter "getSigndedUrl" is true,
            this endpoint returns a Download Specification object with a "url" parameter, which will point to the file's location
            </remarks>
            <param name="id"></param>
            <param name="getSignedUrl"></param>
            <returns>
            Excel Formatted Report Results or Download Specification
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISessionsEntity.Get">
            <summary>
            Get Session
            </summary>
            <remarks>
            Retrieve the current authentication session object. If the client is not authenticated,
            this operation will challenge for ShareFile authentication using a 401 response. This method will
            not trigger the SAML authentication flow - use /Sessions/Login instead.
            </remarks>
            <returns>
            The current authentication Context, based on the request SFAPI_AuthID Cookie
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISessionsEntity.Delete">
            <summary>
            Logout
            </summary>
            <remarks>
            Logout the current session - invalidate the current Session ID
            </remarks>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISessionsEntity.Login(System.String,System.String)">
            <summary>
            Login
            </summary>
            <remarks>
            API clients can provide ShareFile Authentication directly to any API operation using OAuth (Bearer).
            However, the client must know that the provided authentication type is supported on the API endpoint; and that SAML is not configured.
            
            This API provides a generic authentication routine for clients. It will challenge for ShareFile credentials
            passing all supported authentication methods; redirect to the SAML IDP if configured to do so; and handle
            certain HTTP headers, like device registration.
            
            If the client is already authenticated, the Session object is returned. If the client is not authenticated, and
            the account is not configured for SAML, then the API will challenge for a local authentication. If the account
            is configured for SAML, then the client will be redirected to the SAML IDP using the SAML passive flow - authentication
            will be performed at the IDP domain instead. The IDP callback will be on the API Acs, which will return a Session
            object if authentication is accepted.
            
            The following HTTP Headers are also processed in this request, and stored with the Session object:
            X-SFAPI-Tool: Tool string (user-agent equivalent for ShareFile)X-SFAPI-ToolVersion: Tool Version stringX-SFAPI-UserInitiated: true or false, indicates whether this is an interactive login, or re-authentication
            initiated by the ToolX-SFAPI-DeviceId: Device Identifier. If set to 'register', a new DeviceID will be generated. This will
            either create or associate an existing DeviceID to this session - indicates user is logging in using this DeviceX-SFAPI-DeviceName: Device Name. Only required/used when a registration process occurs.
            </remarks>
            <param name="authmethod"></param>
            <param name="authcomparison"></param>
            <returns>
            A Session object, if authentication is successful
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISessionsEntity.Acs">
            <summary>
            Get Assertion Consumer Service. This is the IDP callback endpoint in SAML authentication
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SessionsEntity.Get">
            <summary>
            Get Session
            </summary>
            <remarks>
            Retrieve the current authentication session object. If the client is not authenticated,
            this operation will challenge for ShareFile authentication using a 401 response. This method will
            not trigger the SAML authentication flow - use /Sessions/Login instead.
            </remarks>
            <returns>
            The current authentication Context, based on the request SFAPI_AuthID Cookie
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SessionsEntity.Delete">
            <summary>
            Logout
            </summary>
            <remarks>
            Logout the current session - invalidate the current Session ID
            </remarks>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SessionsEntity.Login(System.String,System.String)">
            <summary>
            Login
            </summary>
            <remarks>
            API clients can provide ShareFile Authentication directly to any API operation using OAuth (Bearer).
            However, the client must know that the provided authentication type is supported on the API endpoint; and that SAML is not configured.
            
            This API provides a generic authentication routine for clients. It will challenge for ShareFile credentials
            passing all supported authentication methods; redirect to the SAML IDP if configured to do so; and handle
            certain HTTP headers, like device registration.
            
            If the client is already authenticated, the Session object is returned. If the client is not authenticated, and
            the account is not configured for SAML, then the API will challenge for a local authentication. If the account
            is configured for SAML, then the client will be redirected to the SAML IDP using the SAML passive flow - authentication
            will be performed at the IDP domain instead. The IDP callback will be on the API Acs, which will return a Session
            object if authentication is accepted.
            
            The following HTTP Headers are also processed in this request, and stored with the Session object:
            X-SFAPI-Tool: Tool string (user-agent equivalent for ShareFile)X-SFAPI-ToolVersion: Tool Version stringX-SFAPI-UserInitiated: true or false, indicates whether this is an interactive login, or re-authentication
            initiated by the ToolX-SFAPI-DeviceId: Device Identifier. If set to 'register', a new DeviceID will be generated. This will
            either create or associate an existing DeviceID to this session - indicates user is logging in using this DeviceX-SFAPI-DeviceName: Device Name. Only required/used when a registration process occurs.
            </remarks>
            <param name="authmethod"></param>
            <param name="authcomparison"></param>
            <returns>
            A Session object, if authentication is successful
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SessionsEntity.Acs">
            <summary>
            Get Assertion Consumer Service. This is the IDP callback endpoint in SAML authentication
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.Get(System.Boolean)">
            <summary>
            Get List of Shares
            </summary>
            <remarks>
            Retrieve all outstanding Shares of the authenticated user
            </remarks>
            <param name="includeExpired"></param>
            <returns>
            List of Shares created by the authenticated user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.Get(System.Uri)">
            <summary>
            Get List of Shares
            </summary>
            <remarks>
            Retrieve all outstanding Shares of the authenticated user
            </remarks>
            <param name="includeExpired"></param>
            <returns>
            List of Shares created by the authenticated user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.GetRecipients(System.Uri)">
            <summary>
            Get Recipients of a Share
            </summary>
            <remarks>
            Retrieve the list of Recipients in the share. Recipients represent the target users of the Share, containing
            access information, such as number of times that user downloaded files from the share. Each Recipient is
            identified by an Alias, which is an unique ID given to each user - allowing tracking of downloads for
            non-authenticated users.
            </remarks>
            <param name="url"></param>
            <returns>
            A feed of Share Aliases representing recipients of the Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.GetRecipients(System.Uri,System.String)">
            <summary>
            Get Recipient of a Share
            </summary>
            <remarks>
            Retrieve a single Share Recipient identified by the alias id.
            </remarks>
            <param name="parentUrl"></param>
            <param name="id"></param>
            <returns>
            A Share Alias representing a single recipient of the Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.CreateRecipients(System.Uri,System.String,System.String,System.String,System.String)">
            <summary>
            Create Recipient for a Share
            </summary>
            <remarks>
            Creates a Recipient User for a Share that requires user information
            </remarks>
            <param name="parentUrl"></param>
            <param name="Email"></param>
            <param name="FirstName"></param>
            <param name="LastName"></param>
            <param name="Company"></param>
            <returns>
            A Share Alias representing a single recipient of the Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.GetItems(System.Uri)">
            <summary>
            Get Items of a Share
            </summary>
            <remarks>
            Retrieve the list of Items (files and folders) in the Send Share.
            </remarks>
            <param name="url"></param>
            <returns>
            A feed of Items of the Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.GetItems(System.Uri,System.String)">
            <summary>
            Get Items of a Send Share
            </summary>
            <remarks>
            Retrieve a single Item in the Send Share
            </remarks>
            <param name="shareUrl"></param>
            <param name="itemid"></param>
            <returns>
            An item in the Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.Thumbnail(System.Uri,System.String,System.Int32,System.Boolean)">
            <summary>
            Get Thumbnail of a Share Item
            </summary>
            <remarks>
            Retrieve a thumbnail link for the specified Item in the Share.
            </remarks>
            <param name="shareUrl"></param>
            <param name="itemid"></param>
            <param name="size"></param>
            <param name="redirect"></param>
            <returns>
            A 302 redirection to the Thumbnail link
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.ProtocolLinks(System.Uri,System.String,ShareFile.Api.Client.Models.PreviewPlatform)">
            <summary>
            Get List of Protocol Links of a Share item
            </summary>
            <param name="shareUrl"></param>
            <param name="itemid"></param>
            <param name="platform"></param>
            <returns>
            A list of protocol links depending on the input parameter 'platform', 404 (Not Found) if not supported by the item
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.Download(System.Uri,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Downloads Share Items
            </summary>
            <remarks>
            Downloads items from the Share. The default action will download all Items in the Share.
            If a Share has a single item, the download attachment name
            will use the item name. Otherwise, the download will contain a ZIP archive containing all
            files and folders in the share, named Files.zip.To download Shares that require authentication, make sure this request is authenticated. To download
            shares that require require user information, provide the Name, Email and Company parameters in the URI
            query. Anyone can download files from anonymous shares.You can also download individual Items in the Share. Use the Share(id)/Items(id)/Download action. The
            item ID must be a top-level item in the Share - i.e., you cannot download or address files contained inside
            a shared folder.
            </remarks>
            <param name="shareUrl"></param>
            <param name="itemId"></param>
            <param name="Name"></param>
            <param name="Email"></param>
            <param name="Company"></param>
            <param name="redirect"></param>
            <returns>
            Redirects the caller (302) to the download address for the share contents.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.DownloadWithAlias(System.Uri,System.String,System.String,System.Boolean)">
            <summary>
            Download Items from a Share for a Recipient
            </summary>
            <example>
            GET https://account.sf-api.com/sf/v3/Shares(shareid)/Recipients(aliasid)/DownloadWithAlias?id=itemid
            GET https://account.sf-api.com/sf/v3/Shares(shareid)/Recipients(aliasid)/DownloadWithAlias(itemid)
            </example>
            <remarks>
            Downloads items from the Share. The default action will download all Items in the Share.
            If a Share has a single item, the download attachment name
            will use the item name. Otherwise, the download will contain a ZIP archive containing all
            files and folders in the share, named Files.zip.To download Shares that require user informaion ( Email, First Name, Last Name and Company), make sure
            to create an Recipient (alias)To download Shares that require authentication, make sure this request is authenticated.
            Anyone can download files from anonymous shares.You can also download individual Items in the Share. Use the Shares(id)/Recipients(aliasid)/Download action. The
            item ID must be a top-level item in the Share - i.e., you cannot download or address files contained inside
            a shared folder.
            </remarks>
            <param name="shareUrl"></param>
            <param name="aliasid"></param>
            <param name="itemId"></param>
            <param name="redirect"></param>
            <returns>
            Redirects the caller (302) to the download address for the share contents.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.BulkDownload(System.Uri,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Download Multiple Items from a Share for a Recipient
            </summary>
            <example>
            ["id1","id2"]
            </example>
            <remarks>
            Download Multiple Items from a Share for a Recipient. The download will contain a ZIP archive containing all
            files and folders in the share, named Files.zip.To download Shares that require user informaion ( Email, First Name, Last Name and Company), make sure
            to create an Recipient (alias) and pass in the alaisId.To download Shares that require authentication, make sure this request is authenticated.
            Anyone can download files from anonymous shares.
            </remarks>
            <param name="shareUrl"></param>
            <param name="aliasid"></param>
            <param name="ids"></param>
            <param name="redirect"></param>
            <returns>
            Redirects the caller (302) to the download address for the share contents.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.Create(ShareFile.Api.Client.Models.Share,System.Boolean,System.Boolean)">
            <summary>
            Create Share
            </summary>
            <example>
            {
            "ShareType":"Send",
            "Title":"Sample Send Share",
            "Items": [ { "Id":"itemid01" }, { "Id":"itemid02" } ],
            "Recipients":[ { "User": { "Id":"userid" } }, { "User": { "Email": "user@email" } } ],
            "ExpirationDate": "2013-07-23",
            "RequireLogin": false,
            "RequireUserInfo": false,
            "MaxDownloads": -1,
            "UsesStreamIDs": false
            }
            {
            "ShareType":"Request",
            "Title":"Sample Request Share",
            "Recipients":[ { "User": { "Id":"userid" } }, { "User": { "Email": "user@email" } } ],
            "Parent": { "Id":"folderid" },
            "ExpirationDate": "2013-07-23",
            "RequireLogin": false,
            "RequireUserInfo": false,
            "TrackUntilDate": "2013-07-23",
            "SendFrequency": -1,
            "SendInterval": -1
            }
            </example>
            <remarks>
            Creates a new Send or Request Share.
            Expiration date:
            - if not specified the default is 30 days
            - "9999-12-31" disables share expiration.
            To use stream IDs as item IDs UsesStreamIDs needs to be set to true, and all the IDs in Items need to be specified
            as stream IDs.
            View Only:
            View Only share can be created by either setting "IsViewOnly = true" or "share.ShareAccessRight.ShareAccessRightType = ViewOnline"
            If both "share.IsViewOnly = true" and "share.ShareAccessRight.AccessRightType = FullControl" are passed to this method, then the "Full Control" permission takes higher priority
            and disables "ViewOnly" permission on the share.
            Only one of the two features(ViewOnly, IRM) can be enabled at a time. If you set both "IsViewOnly = true" and "share.ShareAccessRight.ShareAccessRightType = IRM", exception will be thrown
            </remarks>
            <param name="share"></param>
            <param name="notify"></param>
            <param name="direct"></param>
            <returns>
            The new Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.Update(System.Uri,ShareFile.Api.Client.Models.Share,System.Boolean)">
            <summary>
            Update Share
            </summary>
            <example>
            {
            "Title": "New Title",
            "ExpirationDate": "2013-07-23",
            "RequireLogin": false,
            "Items": [ { "Id":"itemid01" }, { "Id":"itemid02" } ],
            }
            </example>
            <remarks>
            Modifies an existing Share. If Items are specified they are added to the share by default. If appendItemsFeed is set to false, the specified Items will replace any existing ones instead.
            
            View Only:
            If a share is not IRM Classified, it can be updated to ViewOnline/ViewOnly share by passing either "IsViewOnly= true" or "Share.ShareAccessRight.AccessRightType = ViewOnline"
            If a share is IRM Classified, then it can be updated to ViewOnline/ViewOnly share only by passing "Share.ShareAccessRight = ViewOnline". This will remove the IRMClassification on this share.
            Only one of the two features(ViewOnly, IRM) can be enabled at a time.
            
            Full Control:
            Passing "Share.ShareAccessRight.AccessRightType = FullControl" will remove IRMClassification and ViewOnly features on the share. If you set both "IsViewOnly = true" and "share.ShareAccessRight.ShareAccessRightType = IRM", exception will be thrown
            </remarks>
            <param name="url"></param>
            <param name="share"></param>
            <param name="appendItemsFeed"></param>
            <returns>
            The modified Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.Delete(System.Uri)">
            <summary>
            Delete Share
            </summary>
            <remarks>
            Removes an existing Share
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.CreateAlias(System.Uri,System.String,System.Boolean)">
            <summary>
            Create Share Alias
            </summary>
            <remarks>
            Creates a share alias for the specified share ID and user email. If a user with the given email address does not
            exist it is created first.
            For shares requiring login an activation email is sent to the created user. If 'notify' is enabled, the user activation is
            included in the share notification email.
            </remarks>
            <param name="url"></param>
            <param name="email"></param>
            <param name="notify"></param>
            <returns>
            Share with the AliasID property set to the created alias ID
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.CreateSend(ShareFile.Api.Client.Models.ShareSendParams)">
            <summary>
            Deliver Send a File Email
            </summary>
            <example>
            {
            "Items":["itemId1", "itemId2"],
            "Emails":["email@sharefile.com", "email2@sharefile.com"],
            "Subject": "Email Subject",
            "Body": "Email Message",
            "CcSender": false,
            "NotifyOnDownload": true,
            "RequireLogin": false,
            "MaxDownloads": 30,
            "ExpirationDays": -1
            }
            </example>
            <remarks>
            Sends an Email to the specified list of addresses, containing a link to the specified Items.
            The default number of expiration days is 30. Setting it to -1 disables share expiration. Note that the
            Emails and Items parameters expect an array of strings, rather than nested JSON objects.
            </remarks>
            <param name="parameters"></param>
            <returns>
            Share object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.CreateRequest(ShareFile.Api.Client.Models.ShareRequestParams)">
            <summary>
            Deliver Request a File Email
            </summary>
            <example>
            {
            "FolderId":"folderId",
            "Emails":["email@sharefile.com", "email2@sharefile.com"],
            "Subject": "Email Subject",
            "Body": "Email Message",
            "CcSender": false,
            "NotifyOnUpload": true,
            "RequireLogin": false,
            "ExpirationDays": -1
            }
            </example>
            <remarks>
            Sends an Email to the specified list of addresses, containing a link to upload to the specified folder.
            The default number of expiration days is 30. Setting it to -1 disables share expiration. Note that the
            Emails parameter expectd an array of strings, rather than nested JSON objects.
            
            View Only:
            View Only share can be created by either setting "IsViewOnly = true" or "share.ShareAccessRight.ShareAccessRightType = ViewOnline"
            If both "share.IsViewOnly = true" and "share.ShareAccessRight.AccessRightType = FullControl" are passed to this method, then the "Full Control" permission takes higher priority
            and disables "ViewOnly" permission on the share.
            Only one of the two features(ViewOnly, IRM) can be enabled at a time. If you set both "IsViewOnly = true" and "share.ShareAccessRight.ShareAccessRightType = IRM", exception will be thrown
            </remarks>
            <param name="parameters"></param>
            <returns>
            Share Object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.Resend(ShareFile.Api.Client.Models.ShareResendParams)">
            <summary>
            Re-deliver an Existing Share Link
            </summary>
            <example>
            {
            "Recipients":["email@sharefile.com", "groupId"],
            "Subject": "Email Subject",
            "Body": "Email Message",
            "CcSender": false,
            "NotifyOnUse": true,
            "ShareId": "shareId"
            }
            </example>
            <remarks>
            Resends an Email to the specified list of addresses, containing a link to a Send or Request Share
            </remarks>
            <param name="parameters"></param>
            <returns>
            The updated Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.Upload(System.Uri,ShareFile.Api.Client.Models.UploadMethod,System.Boolean,System.String,System.Int64,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            Upload File to Request Share
            </summary>
            <example>
            POST https://account.sf-api.com/sf/v3/Shares(id)/Upload2
            {
            "Method":"Method",
            "Raw": false,
            "FileName":"FileName",
            "FileLength": 123
            }
            </example>
            <remarks>
            Prepares the links for uploading files to the target Share.
            This method returns an Upload Specification object. The fields are
            populated based on the upload method, provider, and resume parameters passed to the
            upload call.
            The Method determines how the URLs must be called.
            
            Standard uploads use a single HTTP POST message to the ChunkUri address provided in
            the response. All other fields will be empty. Standard uploads do not support Resume.
            
            Streamed uploads use multiple HTTP POST calls to the ChunkUri address. The client must
            append the parameters index, offset and hash to the end of the ChunkUri address. Index
            is a sequential number representing the data block (zero-based); Offset represents the
            byte offset for the block; and hash contains the MD5 hash of the block. The last HTTP
            POST must also contain finish=true parameter.
            
            Threaded uploads use multiple HTTP POST calls to ChunkUri, and can have a number of
            threads issuing blocks in parallel. Clients must append index, offset and hash to
            the end of ChunkUri, as explained in Streamed. After all chunks were sent, the client
            must call the FinishUri provided in this spec.
            
            For all uploaders, the contents of the POST Body can either be "raw", if the "Raw" parameter
            was provided to the Uploader, or use MIME multi-part form encoding otherwise. Raw uploads
            simply put the block content in the POST body - Content-Length specifies the size. Multi-part
            form encoding has to pass the File as a Form parameter named "File1".
            
            For streamed and threaded, if Resume options were provided to the Upload call, then the
            fields IsResume, ResumeIndex, ResumeOffset and ResumeFileHash MAY be populated. If they are,
            it indicates that the server has identified a partial upload with that specification, and is
            ready to resume on the provided parameters. The clients can then verify the ResumeFileHash to
            ensure the file has not been modified; and continue issuing ChunkUri calls from the ResumeIndex
            ResumeOffset parameters. If the client decides to restart, it should simply ignore the resume
            parameters and send the blocks from Index 0.
            
            For all uploaders: the result code for the HTTP POST calls to Chunk and Finish Uri can either
            be a 401 - indicating authentication is required; 4xx/5xx indicating some kind of error; or
            200 with a Content Body of format 'ERROR:message'. Successful calls will return either a 200
            response with no Body, or with Body of format 'OK'.
            </remarks>
            <param name="url"></param>
            <param name="method"></param>
            <param name="raw"></param>
            <param name="fileName"></param>
            <param name="fileSize"></param>
            <param name="batchId"></param>
            <param name="batchLast"></param>
            <param name="canResume"></param>
            <param name="startOver"></param>
            <param name="unzip"></param>
            <param name="tool"></param>
            <param name="overwrite"></param>
            <param name="title"></param>
            <param name="details"></param>
            <param name="isSend"></param>
            <param name="sendGuid"></param>
            <param name="opid"></param>
            <param name="threadCount"></param>
            <param name="responseFormat"></param>
            <param name="notify"></param>
            <returns>
            an Upload Specification element, containing the links for uploading, and the parameters for resume.
            The caller must know the protocol for sending the prepare, chunk and finish URLs returned in the spec; as well as
            negotiate the resume upload.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.GetRedirection(System.Uri)">
            <summary>
            Get Redirection endpoint Information
            </summary>
            <remarks>
            Returns the redirection endpoint for this Share.
            </remarks>
            <param name="url"></param>
            <returns>
            The Redirection endpoint Information
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.GetInbox(System.String,ShareFile.Api.Client.Models.ShareType,System.Boolean)">
            <summary>
            Get Inbox for Recipient
            </summary>
            <remarks>
            Retrieve all outstanding Shares in the inbox.
            </remarks>
            <param name="userId"></param>
            <returns>
            List of Shares created by the authenticated user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ISharesEntity.Message(System.Uri,System.String,System.Boolean)">
            <summary>
            Get Sent Message Content by Share
            </summary>
            <remarks>
            Returns sent message content. By default the message is returned as a plain string. If asJson is true, the message
            string is wrapped in a Json object with a single "Message" property.
            </remarks>
            <param name="shareUrl"></param>
            <param name="aliasId"></param>
            <returns>
            Sent Message Content
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.Get(System.Boolean)">
            <summary>
            Get List of Shares
            </summary>
            <remarks>
            Retrieve all outstanding Shares of the authenticated user
            </remarks>
            <param name="includeExpired"></param>
            <returns>
            List of Shares created by the authenticated user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.Get(System.Uri)">
            <summary>
            Get List of Shares
            </summary>
            <remarks>
            Retrieve all outstanding Shares of the authenticated user
            </remarks>
            <param name="includeExpired"></param>
            <returns>
            List of Shares created by the authenticated user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.GetRecipients(System.Uri)">
            <summary>
            Get Recipients of a Share
            </summary>
            <remarks>
            Retrieve the list of Recipients in the share. Recipients represent the target users of the Share, containing
            access information, such as number of times that user downloaded files from the share. Each Recipient is
            identified by an Alias, which is an unique ID given to each user - allowing tracking of downloads for
            non-authenticated users.
            </remarks>
            <param name="url"></param>
            <returns>
            A feed of Share Aliases representing recipients of the Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.GetRecipients(System.Uri,System.String)">
            <summary>
            Get Recipient of a Share
            </summary>
            <remarks>
            Retrieve a single Share Recipient identified by the alias id.
            </remarks>
            <param name="parentUrl"></param>
            <param name="id"></param>
            <returns>
            A Share Alias representing a single recipient of the Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.CreateRecipients(System.Uri,System.String,System.String,System.String,System.String)">
            <summary>
            Create Recipient for a Share
            </summary>
            <remarks>
            Creates a Recipient User for a Share that requires user information
            </remarks>
            <param name="parentUrl"></param>
            <param name="Email"></param>
            <param name="FirstName"></param>
            <param name="LastName"></param>
            <param name="Company"></param>
            <returns>
            A Share Alias representing a single recipient of the Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.GetItems(System.Uri)">
            <summary>
            Get Items of a Share
            </summary>
            <remarks>
            Retrieve the list of Items (files and folders) in the Send Share.
            </remarks>
            <param name="url"></param>
            <returns>
            A feed of Items of the Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.GetItems(System.Uri,System.String)">
            <summary>
            Get Items of a Send Share
            </summary>
            <remarks>
            Retrieve a single Item in the Send Share
            </remarks>
            <param name="shareUrl"></param>
            <param name="itemid"></param>
            <returns>
            An item in the Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.Thumbnail(System.Uri,System.String,System.Int32,System.Boolean)">
            <summary>
            Get Thumbnail of a Share Item
            </summary>
            <remarks>
            Retrieve a thumbnail link for the specified Item in the Share.
            </remarks>
            <param name="shareUrl"></param>
            <param name="itemid"></param>
            <param name="size"></param>
            <param name="redirect"></param>
            <returns>
            A 302 redirection to the Thumbnail link
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.ProtocolLinks(System.Uri,System.String,ShareFile.Api.Client.Models.PreviewPlatform)">
            <summary>
            Get List of Protocol Links of a Share item
            </summary>
            <param name="shareUrl"></param>
            <param name="itemid"></param>
            <param name="platform"></param>
            <returns>
            A list of protocol links depending on the input parameter 'platform', 404 (Not Found) if not supported by the item
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.Download(System.Uri,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Downloads Share Items
            </summary>
            <remarks>
            Downloads items from the Share. The default action will download all Items in the Share.
            If a Share has a single item, the download attachment name
            will use the item name. Otherwise, the download will contain a ZIP archive containing all
            files and folders in the share, named Files.zip.To download Shares that require authentication, make sure this request is authenticated. To download
            shares that require require user information, provide the Name, Email and Company parameters in the URI
            query. Anyone can download files from anonymous shares.You can also download individual Items in the Share. Use the Share(id)/Items(id)/Download action. The
            item ID must be a top-level item in the Share - i.e., you cannot download or address files contained inside
            a shared folder.
            </remarks>
            <param name="shareUrl"></param>
            <param name="itemId"></param>
            <param name="Name"></param>
            <param name="Email"></param>
            <param name="Company"></param>
            <param name="redirect"></param>
            <returns>
            Redirects the caller (302) to the download address for the share contents.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.DownloadWithAlias(System.Uri,System.String,System.String,System.Boolean)">
            <summary>
            Download Items from a Share for a Recipient
            </summary>
            <example>
            GET https://account.sf-api.com/sf/v3/Shares(shareid)/Recipients(aliasid)/DownloadWithAlias?id=itemid
            GET https://account.sf-api.com/sf/v3/Shares(shareid)/Recipients(aliasid)/DownloadWithAlias(itemid)
            </example>
            <remarks>
            Downloads items from the Share. The default action will download all Items in the Share.
            If a Share has a single item, the download attachment name
            will use the item name. Otherwise, the download will contain a ZIP archive containing all
            files and folders in the share, named Files.zip.To download Shares that require user informaion ( Email, First Name, Last Name and Company), make sure
            to create an Recipient (alias)To download Shares that require authentication, make sure this request is authenticated.
            Anyone can download files from anonymous shares.You can also download individual Items in the Share. Use the Shares(id)/Recipients(aliasid)/Download action. The
            item ID must be a top-level item in the Share - i.e., you cannot download or address files contained inside
            a shared folder.
            </remarks>
            <param name="shareUrl"></param>
            <param name="aliasid"></param>
            <param name="itemId"></param>
            <param name="redirect"></param>
            <returns>
            Redirects the caller (302) to the download address for the share contents.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.BulkDownload(System.Uri,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Download Multiple Items from a Share for a Recipient
            </summary>
            <example>
            ["id1","id2"]
            </example>
            <remarks>
            Download Multiple Items from a Share for a Recipient. The download will contain a ZIP archive containing all
            files and folders in the share, named Files.zip.To download Shares that require user informaion ( Email, First Name, Last Name and Company), make sure
            to create an Recipient (alias) and pass in the alaisId.To download Shares that require authentication, make sure this request is authenticated.
            Anyone can download files from anonymous shares.
            </remarks>
            <param name="shareUrl"></param>
            <param name="aliasid"></param>
            <param name="ids"></param>
            <param name="redirect"></param>
            <returns>
            Redirects the caller (302) to the download address for the share contents.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.Create(ShareFile.Api.Client.Models.Share,System.Boolean,System.Boolean)">
            <summary>
            Create Share
            </summary>
            <example>
            {
            "ShareType":"Send",
            "Title":"Sample Send Share",
            "Items": [ { "Id":"itemid01" }, { "Id":"itemid02" } ],
            "Recipients":[ { "User": { "Id":"userid" } }, { "User": { "Email": "user@email" } } ],
            "ExpirationDate": "2013-07-23",
            "RequireLogin": false,
            "RequireUserInfo": false,
            "MaxDownloads": -1,
            "UsesStreamIDs": false
            }
            {
            "ShareType":"Request",
            "Title":"Sample Request Share",
            "Recipients":[ { "User": { "Id":"userid" } }, { "User": { "Email": "user@email" } } ],
            "Parent": { "Id":"folderid" },
            "ExpirationDate": "2013-07-23",
            "RequireLogin": false,
            "RequireUserInfo": false,
            "TrackUntilDate": "2013-07-23",
            "SendFrequency": -1,
            "SendInterval": -1
            }
            </example>
            <remarks>
            Creates a new Send or Request Share.
            Expiration date:
            - if not specified the default is 30 days
            - "9999-12-31" disables share expiration.
            To use stream IDs as item IDs UsesStreamIDs needs to be set to true, and all the IDs in Items need to be specified
            as stream IDs.
            View Only:
            View Only share can be created by either setting "IsViewOnly = true" or "share.ShareAccessRight.ShareAccessRightType = ViewOnline"
            If both "share.IsViewOnly = true" and "share.ShareAccessRight.AccessRightType = FullControl" are passed to this method, then the "Full Control" permission takes higher priority
            and disables "ViewOnly" permission on the share.
            Only one of the two features(ViewOnly, IRM) can be enabled at a time. If you set both "IsViewOnly = true" and "share.ShareAccessRight.ShareAccessRightType = IRM", exception will be thrown
            </remarks>
            <param name="share"></param>
            <param name="notify"></param>
            <param name="direct"></param>
            <returns>
            The new Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.Update(System.Uri,ShareFile.Api.Client.Models.Share,System.Boolean)">
            <summary>
            Update Share
            </summary>
            <example>
            {
            "Title": "New Title",
            "ExpirationDate": "2013-07-23",
            "RequireLogin": false,
            "Items": [ { "Id":"itemid01" }, { "Id":"itemid02" } ],
            }
            </example>
            <remarks>
            Modifies an existing Share. If Items are specified they are added to the share by default. If appendItemsFeed is set to false, the specified Items will replace any existing ones instead.
            
            View Only:
            If a share is not IRM Classified, it can be updated to ViewOnline/ViewOnly share by passing either "IsViewOnly= true" or "Share.ShareAccessRight.AccessRightType = ViewOnline"
            If a share is IRM Classified, then it can be updated to ViewOnline/ViewOnly share only by passing "Share.ShareAccessRight = ViewOnline". This will remove the IRMClassification on this share.
            Only one of the two features(ViewOnly, IRM) can be enabled at a time.
            
            Full Control:
            Passing "Share.ShareAccessRight.AccessRightType = FullControl" will remove IRMClassification and ViewOnly features on the share. If you set both "IsViewOnly = true" and "share.ShareAccessRight.ShareAccessRightType = IRM", exception will be thrown
            </remarks>
            <param name="url"></param>
            <param name="share"></param>
            <param name="appendItemsFeed"></param>
            <returns>
            The modified Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.Delete(System.Uri)">
            <summary>
            Delete Share
            </summary>
            <remarks>
            Removes an existing Share
            </remarks>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.CreateAlias(System.Uri,System.String,System.Boolean)">
            <summary>
            Create Share Alias
            </summary>
            <remarks>
            Creates a share alias for the specified share ID and user email. If a user with the given email address does not
            exist it is created first.
            For shares requiring login an activation email is sent to the created user. If 'notify' is enabled, the user activation is
            included in the share notification email.
            </remarks>
            <param name="url"></param>
            <param name="email"></param>
            <param name="notify"></param>
            <returns>
            Share with the AliasID property set to the created alias ID
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.CreateSend(ShareFile.Api.Client.Models.ShareSendParams)">
            <summary>
            Deliver Send a File Email
            </summary>
            <example>
            {
            "Items":["itemId1", "itemId2"],
            "Emails":["email@sharefile.com", "email2@sharefile.com"],
            "Subject": "Email Subject",
            "Body": "Email Message",
            "CcSender": false,
            "NotifyOnDownload": true,
            "RequireLogin": false,
            "MaxDownloads": 30,
            "ExpirationDays": -1
            }
            </example>
            <remarks>
            Sends an Email to the specified list of addresses, containing a link to the specified Items.
            The default number of expiration days is 30. Setting it to -1 disables share expiration. Note that the
            Emails and Items parameters expect an array of strings, rather than nested JSON objects.
            </remarks>
            <param name="parameters"></param>
            <returns>
            Share object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.CreateRequest(ShareFile.Api.Client.Models.ShareRequestParams)">
            <summary>
            Deliver Request a File Email
            </summary>
            <example>
            {
            "FolderId":"folderId",
            "Emails":["email@sharefile.com", "email2@sharefile.com"],
            "Subject": "Email Subject",
            "Body": "Email Message",
            "CcSender": false,
            "NotifyOnUpload": true,
            "RequireLogin": false,
            "ExpirationDays": -1
            }
            </example>
            <remarks>
            Sends an Email to the specified list of addresses, containing a link to upload to the specified folder.
            The default number of expiration days is 30. Setting it to -1 disables share expiration. Note that the
            Emails parameter expectd an array of strings, rather than nested JSON objects.
            
            View Only:
            View Only share can be created by either setting "IsViewOnly = true" or "share.ShareAccessRight.ShareAccessRightType = ViewOnline"
            If both "share.IsViewOnly = true" and "share.ShareAccessRight.AccessRightType = FullControl" are passed to this method, then the "Full Control" permission takes higher priority
            and disables "ViewOnly" permission on the share.
            Only one of the two features(ViewOnly, IRM) can be enabled at a time. If you set both "IsViewOnly = true" and "share.ShareAccessRight.ShareAccessRightType = IRM", exception will be thrown
            </remarks>
            <param name="parameters"></param>
            <returns>
            Share Object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.Resend(ShareFile.Api.Client.Models.ShareResendParams)">
            <summary>
            Re-deliver an Existing Share Link
            </summary>
            <example>
            {
            "Recipients":["email@sharefile.com", "groupId"],
            "Subject": "Email Subject",
            "Body": "Email Message",
            "CcSender": false,
            "NotifyOnUse": true,
            "ShareId": "shareId"
            }
            </example>
            <remarks>
            Resends an Email to the specified list of addresses, containing a link to a Send or Request Share
            </remarks>
            <param name="parameters"></param>
            <returns>
            The updated Share
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.Upload(System.Uri,ShareFile.Api.Client.Models.UploadMethod,System.Boolean,System.String,System.Int64,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            Upload File to Request Share
            </summary>
            <example>
            POST https://account.sf-api.com/sf/v3/Shares(id)/Upload2
            {
            "Method":"Method",
            "Raw": false,
            "FileName":"FileName",
            "FileLength": 123
            }
            </example>
            <remarks>
            Prepares the links for uploading files to the target Share.
            This method returns an Upload Specification object. The fields are
            populated based on the upload method, provider, and resume parameters passed to the
            upload call.
            The Method determines how the URLs must be called.
            
            Standard uploads use a single HTTP POST message to the ChunkUri address provided in
            the response. All other fields will be empty. Standard uploads do not support Resume.
            
            Streamed uploads use multiple HTTP POST calls to the ChunkUri address. The client must
            append the parameters index, offset and hash to the end of the ChunkUri address. Index
            is a sequential number representing the data block (zero-based); Offset represents the
            byte offset for the block; and hash contains the MD5 hash of the block. The last HTTP
            POST must also contain finish=true parameter.
            
            Threaded uploads use multiple HTTP POST calls to ChunkUri, and can have a number of
            threads issuing blocks in parallel. Clients must append index, offset and hash to
            the end of ChunkUri, as explained in Streamed. After all chunks were sent, the client
            must call the FinishUri provided in this spec.
            
            For all uploaders, the contents of the POST Body can either be "raw", if the "Raw" parameter
            was provided to the Uploader, or use MIME multi-part form encoding otherwise. Raw uploads
            simply put the block content in the POST body - Content-Length specifies the size. Multi-part
            form encoding has to pass the File as a Form parameter named "File1".
            
            For streamed and threaded, if Resume options were provided to the Upload call, then the
            fields IsResume, ResumeIndex, ResumeOffset and ResumeFileHash MAY be populated. If they are,
            it indicates that the server has identified a partial upload with that specification, and is
            ready to resume on the provided parameters. The clients can then verify the ResumeFileHash to
            ensure the file has not been modified; and continue issuing ChunkUri calls from the ResumeIndex
            ResumeOffset parameters. If the client decides to restart, it should simply ignore the resume
            parameters and send the blocks from Index 0.
            
            For all uploaders: the result code for the HTTP POST calls to Chunk and Finish Uri can either
            be a 401 - indicating authentication is required; 4xx/5xx indicating some kind of error; or
            200 with a Content Body of format 'ERROR:message'. Successful calls will return either a 200
            response with no Body, or with Body of format 'OK'.
            </remarks>
            <param name="url"></param>
            <param name="method"></param>
            <param name="raw"></param>
            <param name="fileName"></param>
            <param name="fileSize"></param>
            <param name="batchId"></param>
            <param name="batchLast"></param>
            <param name="canResume"></param>
            <param name="startOver"></param>
            <param name="unzip"></param>
            <param name="tool"></param>
            <param name="overwrite"></param>
            <param name="title"></param>
            <param name="details"></param>
            <param name="isSend"></param>
            <param name="sendGuid"></param>
            <param name="opid"></param>
            <param name="threadCount"></param>
            <param name="responseFormat"></param>
            <param name="notify"></param>
            <returns>
            an Upload Specification element, containing the links for uploading, and the parameters for resume.
            The caller must know the protocol for sending the prepare, chunk and finish URLs returned in the spec; as well as
            negotiate the resume upload.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.GetRedirection(System.Uri)">
            <summary>
            Get Redirection endpoint Information
            </summary>
            <remarks>
            Returns the redirection endpoint for this Share.
            </remarks>
            <param name="url"></param>
            <returns>
            The Redirection endpoint Information
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.GetInbox(System.String,ShareFile.Api.Client.Models.ShareType,System.Boolean)">
            <summary>
            Get Inbox for Recipient
            </summary>
            <remarks>
            Retrieve all outstanding Shares in the inbox.
            </remarks>
            <param name="userId"></param>
            <returns>
            List of Shares created by the authenticated user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.SharesEntity.Message(System.Uri,System.String,System.Boolean)">
            <summary>
            Get Sent Message Content by Share
            </summary>
            <remarks>
            Returns sent message content. By default the message is returned as a plain string. If asJson is true, the message
            string is wrapped in a Json object with a single "Message" property.
            </remarks>
            <param name="shareUrl"></param>
            <param name="aliasId"></param>
            <returns>
            Sent Message Content
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IStorageCentersEntity.Get(System.Uri)">
            <summary>
            Get Storage Center
            </summary>
            <param name="url"></param>
            <returns>
            A single Storage Center
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IStorageCentersEntity.Update(System.Uri,ShareFile.Api.Client.Models.StorageCenter)">
            <summary>
            Patch Storage Center
            </summary>
            <example>
            {
            "ExternalAddress":"https://server/",
            "Version":"4.12.20",
            "HostName":"hostname" }
            </example>
            <param name="url"></param>
            <param name="sc"></param>
            <returns>
            Modified Storage Center
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IStorageCentersEntity.Delete(System.Uri)">
            <summary>
            Delete Storage Center
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IStorageCentersEntity.GetByZone(System.Uri)">
            <summary>
            Get List of StorageCenters from Zone
            </summary>
            <remarks>
            Lists Storage Centers of a given Zone
            </remarks>
            <param name="url"></param>
            <returns>
            A list of Storage Centers associated with the provided zone
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IStorageCentersEntity.CreateByZone(System.Uri,ShareFile.Api.Client.Models.StorageCenter)">
            <summary>
            Create StorageCenter
            </summary>
            <example>
            {
            "ExternalAddress":"https://server/",
            "Version":"4.12.20",
            "HostName":"hostname"
            }
            </example>
            <remarks>
            Creates a new Storage Center associated with a specific zone
            </remarks>
            <param name="url"></param>
            <param name="storageCenter"></param>
            <returns>
            The new storage center
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IStorageCentersEntity.UpdateByZone(System.Uri,System.String,ShareFile.Api.Client.Models.StorageCenter)">
            <summary>
            Update StorageCenter
            </summary>
            <example>
            {
            "ExternalAddress":"https://server/",
            "Version":"4.12.20",
            "HostName":"hostname"
            }
            </example>
            <remarks>
            Updates an existing Storage Center
            </remarks>
            <param name="zUrl"></param>
            <param name="scid"></param>
            <param name="storageCenter"></param>
            <returns>
            the modified storage center
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IStorageCentersEntity.DeleteByZone(System.Uri,System.String)">
            <summary>
            Delete StorageCenter
            </summary>
            <remarks>
            Removes an existing storage center
            </remarks>
            <param name="zUrl"></param>
            <param name="scid"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IStorageCentersEntity.GetMetadata(System.Uri,System.String)">
            <summary>
            Get StorageCenter Metadata
            </summary>
            <remarks>
            Gets metadata associated with the specified storage center
            </remarks>
            <param name="zUrl"></param>
            <param name="scid"></param>
            <returns>
            the storage center metadata feed
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IStorageCentersEntity.CreateMetadata(System.Uri,System.String,System.Collections.Generic.IEnumerable{ShareFile.Api.Client.Models.Metadata})">
            <summary>
            Create or update StorageCenter Metadata
            </summary>
            <example>
            [
            {"Name":"metadataName1", "Value":"metadataValue1", "IsPublic":"true"},
            {"Name":"metadataName2", "Value":"metadataValue2", "IsPublic":"false"}
            ]
            </example>
            <remarks>
            Creates or updates Metadata entries associated with the specified storage center
            </remarks>
            <param name="zUrl"></param>
            <param name="scid"></param>
            <param name="metadata"></param>
            <returns>
            the storage center metadata feed
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IStorageCentersEntity.DeleteMetadata(System.Uri,System.String,System.String)">
            <summary>
            Delete StorageCenter Metadata
            </summary>
            <remarks>
            Delete the Metadata entry associated with the specified storage center
            </remarks>
            <param name="zUrl"></param>
            <param name="scid"></param>
            <param name="name"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.StorageCentersEntity.Get(System.Uri)">
            <summary>
            Get Storage Center
            </summary>
            <param name="url"></param>
            <returns>
            A single Storage Center
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.StorageCentersEntity.Update(System.Uri,ShareFile.Api.Client.Models.StorageCenter)">
            <summary>
            Patch Storage Center
            </summary>
            <example>
            {
            "ExternalAddress":"https://server/",
            "Version":"4.12.20",
            "HostName":"hostname" }
            </example>
            <param name="url"></param>
            <param name="sc"></param>
            <returns>
            Modified Storage Center
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.StorageCentersEntity.Delete(System.Uri)">
            <summary>
            Delete Storage Center
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.StorageCentersEntity.GetByZone(System.Uri)">
            <summary>
            Get List of StorageCenters from Zone
            </summary>
            <remarks>
            Lists Storage Centers of a given Zone
            </remarks>
            <param name="url"></param>
            <returns>
            A list of Storage Centers associated with the provided zone
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.StorageCentersEntity.CreateByZone(System.Uri,ShareFile.Api.Client.Models.StorageCenter)">
            <summary>
            Create StorageCenter
            </summary>
            <example>
            {
            "ExternalAddress":"https://server/",
            "Version":"4.12.20",
            "HostName":"hostname"
            }
            </example>
            <remarks>
            Creates a new Storage Center associated with a specific zone
            </remarks>
            <param name="url"></param>
            <param name="storageCenter"></param>
            <returns>
            The new storage center
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.StorageCentersEntity.UpdateByZone(System.Uri,System.String,ShareFile.Api.Client.Models.StorageCenter)">
            <summary>
            Update StorageCenter
            </summary>
            <example>
            {
            "ExternalAddress":"https://server/",
            "Version":"4.12.20",
            "HostName":"hostname"
            }
            </example>
            <remarks>
            Updates an existing Storage Center
            </remarks>
            <param name="zUrl"></param>
            <param name="scid"></param>
            <param name="storageCenter"></param>
            <returns>
            the modified storage center
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.StorageCentersEntity.DeleteByZone(System.Uri,System.String)">
            <summary>
            Delete StorageCenter
            </summary>
            <remarks>
            Removes an existing storage center
            </remarks>
            <param name="zUrl"></param>
            <param name="scid"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.StorageCentersEntity.GetMetadata(System.Uri,System.String)">
            <summary>
            Get StorageCenter Metadata
            </summary>
            <remarks>
            Gets metadata associated with the specified storage center
            </remarks>
            <param name="zUrl"></param>
            <param name="scid"></param>
            <returns>
            the storage center metadata feed
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.StorageCentersEntity.CreateMetadata(System.Uri,System.String,System.Collections.Generic.IEnumerable{ShareFile.Api.Client.Models.Metadata})">
            <summary>
            Create or update StorageCenter Metadata
            </summary>
            <example>
            [
            {"Name":"metadataName1", "Value":"metadataValue1", "IsPublic":"true"},
            {"Name":"metadataName2", "Value":"metadataValue2", "IsPublic":"false"}
            ]
            </example>
            <remarks>
            Creates or updates Metadata entries associated with the specified storage center
            </remarks>
            <param name="zUrl"></param>
            <param name="scid"></param>
            <param name="metadata"></param>
            <returns>
            the storage center metadata feed
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.StorageCentersEntity.DeleteMetadata(System.Uri,System.String,System.String)">
            <summary>
            Delete StorageCenter Metadata
            </summary>
            <remarks>
            Delete the Metadata entry associated with the specified storage center
            </remarks>
            <param name="zUrl"></param>
            <param name="scid"></param>
            <param name="name"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.Get(System.String,System.String)">
            <summary>
            Get User
            </summary>
            <remarks>
            Retrieve a single user, by ID or email, or the currently authenticated user.
            A user can retrieve another user when
            * (1) The current user has AdminManageEmployees role
            * OR
            * (2) The current user has CanManageUsers role and the other user is a client
            </remarks>
            <param name="id"></param>
            <param name="emailAddress"></param>
            <returns>
            the requested User object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.Create(ShareFile.Api.Client.Models.User,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create Client User
            </summary>
            <example>
            {
            "Email":"user.one@domain.com",
            "FirstName":"Name",
            "LastName":"Last Name",
            "Company":"Company",
            "Password":"password",
            "Preferences":
            {
            "CanResetPassword":true,
            "CanViewMySettings":true
            },
            "DefaultZone":
            {
            "Id":"zoneid"
            }
            }
            </example>
            <remarks>
            Creates a new Client User and associates it to an Account
            The following parameters from the input object are used: Email, FirstName, LastName, Company,
            DefaultZone, Password, Preferences.CanResetPassword and Preferences.CanViewMySettingsOther parameters are ignored
            </remarks>
            <param name="user"></param>
            <param name="pushCreatorDefaultSettings"></param>
            <param name="addshared"></param>
            <param name="notify"></param>
            <param name="ifNecessary"></param>
            <param name="addPersonal"></param>
            <returns>
            The new user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.CreateAccountUser(ShareFile.Api.Client.Models.AccountUser,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create Employee
            </summary>
            <example>
            {
            "Email":"user.one@domain.com",
            "FirstName":"Name",
            "LastName":"Last Name",
            "Company":"Company",
            "Password":"password",
            "StorageQuotaLimitGB":50,
            "Preferences":
            {
            "CanResetPassword":true,
            "CanViewMySettings":true
            },
            "DefaultZone":
            {
            "Id":"zoneid"
            },
            "IsAdministrator": false,
            "CanCreateFolders": false,
            "CanUseFileBox": true,
            "CanManageUsers": false,
            "Roles": [
            "CanChangePassword", "CanManageMySettings",
            "CanUseFileBox", "CanManageUsers", "CanCreateFolders", "CanUseDropBox", "CanSelectFolderZone",
            "AdminAccountPolicies", "AdminBilling", "AdminBranding", "AdminChangePlan", "AdminFileBoxAccess",
            "AdminManageEmployees", "AdminRemoteUploadForms", "AdminReporting", "AdminSharedDistGroups",
            "AdminSharedAddressBook", "AdminViewReceipts", "AdminDelegate", "AdminManageFolderTemplates",
            "AdminEmailMessages", "AdminSSO", "AdminSuperGroup", "AdminZones", "AdminCreateSharedGroups", "AdminConnectors"
            ]
            }
            </example>
            <remarks>
            Creates a new Employee User (AccountUser) and associates it to an Account
            The following parameters from the input object are used: Email, FirstName, LastName, Company,
            DefaultZone, Password, IsEmployee, IsAdministrator, CanCreateFolders, CanUseFileBox, CanManageUsers,
            Preferences.CanResetPassword and Preferences.CanViewMySettings.
            Other parameters are ignoredStorageQuotaLimitGB parameter is optional. If not specified or equal to -1 the account default storage quota value will be set for the User.
            </remarks>
            <param name="user"></param>
            <param name="pushCreatorDefaultSettings"></param>
            <param name="addshared"></param>
            <param name="notify"></param>
            <param name="ifNecessary"></param>
            <param name="addPersonal"></param>
            <returns>
            The new employee user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.Update(System.Uri,ShareFile.Api.Client.Models.User)">
            <summary>
            Update User
            </summary>
            <example>
            {
            "FirstName":"FirstName",
            "LastName":"LastName",
            "Company":"Company",
            "Email":"user@domain.com",
            "Security":
            {
            "IsDisabled":false
            },
            "DefaultZone":
            {
            "Id":"newzoneid"
            }
            }
            </example>
            <remarks>
            Modifies an existing user object
            The following parameters can be modified through this call: FirstName, LastName, Company,
            Email, IsDisabled, DefaultZone Id
            </remarks>
            <param name="url"></param>
            <param name="user"></param>
            <returns>
            a modified user record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.UpdateRoles(System.Uri,ShareFile.Api.Client.Models.User)">
            <summary>
            Add Roles
            </summary>
            <example>
            {
            "Roles" : [ "CanManageUsers", "CanSelectFolderZone" ]
            }
            </example>
            <remarks>
            Modifies an existing user object to ADD a new role
            The following roles can be added to the user through this call (depending on User type):
            CanCreateFolders,
            CanSelectFolderZone,
            CanUseFileBox,
            CanManageUsers,
            AdminSharedAddressBook,
            CanChangePassword,
            CanManageMySettings,
            AdminManageDropBox
            </remarks>
            <param name="parentUrl"></param>
            <param name="user"></param>
            <returns>
            a modified user record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.PatchRoles(System.Uri,ShareFile.Api.Client.Models.User)">
            <summary>
            Set Roles
            </summary>
            <example>
            {
            "Roles" : [ "CanManageUsers", "CanSelectFolderZone" ]
            }
            </example>
            <remarks>
            Sets the roles for a user (roles not provided will be disabled.)
            The following roles can be set to the user through this call (depending on User type):
            CanCreateFolders,
            CanSelectFolderZone,
            CanUseFileBox,
            CanManageUsers,
            AdminSharedAddressBook,
            CanChangePassword,
            CanManageMySettings,
            AdminManageDropBox
            </remarks>
            <param name="parentUrl"></param>
            <param name="user"></param>
            <returns>
            a modified user record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.RemoveRoles(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Client.Models.SafeEnum{ShareFile.Api.Client.Models.UserRole}})">
            <summary>
            Remove Roles
            </summary>
            <example>
            
            [ "CanManageUsers", "CanSelectFolderZone" ]
            </example>
            <remarks>
            Removes the roles for user.
            The following roles can be removed from user through this call (depending on User type):
            CanCreateFolders,
            CanSelectFolderZone,
            CanUseFileBox,
            CanManageUsers,
            AdminSharedAddressBook,
            CanChangePassword,
            CanManageMySettings
            </remarks>
            <param name="userUrl"></param>
            <param name="userRoles"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.UpdateAccountUser(System.String,ShareFile.Api.Client.Models.AccountUser)">
            <summary>
            Update Employee or Promote Customer
            </summary>
            <example>
            {
            "FirstName":"FirstName",
            "LastName":"LastName",
            "Company":"Company",
            "Email":"user@domain.com",
            "StorageQuotaLimitGB":100,
            "Bandwidth": 50,
            "Security":
            {
            "IsDisabled":false
            },
            "DefaultZone":
            {
            "Id":"newzoneid"
            }
            }
            </example>
            <remarks>
            Modifies an existing user object
            The following parameters can be modified through this call: FirstName, LastName, Company,
            Email, IsEmployee, IsDisabled, DefaultZone Id, StorageQuotaLimitGB, Bandwidth.During a promotion (the user id points to Customer), the following parameters can be
            modified: CanCreateFolders, CanUseFileBox, CanManageUsers. StorageQuotaLimitGB equal to -1 sets the user quota to the account default storage quota value.Bandwidth equal to -1 sets the user bandwidth to unlimited.
            </remarks>
            <param name="id"></param>
            <param name="user"></param>
            <returns>
            a modified user record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.GetHomeFolder(System.Uri)">
            <summary>
            Get HomeFolder
            </summary>
            <remarks>
            Returns a user's home folder
            </remarks>
            <param name="url"></param>
            <returns>
            A folder record representing the requesting user home folder
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.GetTopFolders(System.Uri)">
            <summary>
            Get User's top Folder
            </summary>
            <param name="url"></param>
            <returns>
            User's Top Folders
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.Box(System.Uri)">
            <summary>
            Get User's FileBox children
            </summary>
            <param name="url"></param>
            <returns>
            User's FileBox children
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.FileBox(System.Uri)">
            <summary>
            Get User's FileBox folder
            </summary>
            <param name="url"></param>
            <returns>
            User's FileBox
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.GetPreferences(System.Uri)">
            <summary>
            Get User Preferences
            </summary>
            <remarks>
            Retrieves the User preferences record - all user-selected prefernces, such as timezone,
            time format, sort preferences, etc.
            </remarks>
            <param name="url"></param>
            <returns>
            the user selected preferences
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.UpdatePreferences(System.Uri,ShareFile.Api.Client.Models.UserPreferences)">
            <summary>
            Update User Preferences
            </summary>
            <example>
            {
            "EnableFlashUpload":"true",
            "EnableJavaUpload":"true",
            "...":"..."
            }
            </example>
            <param name="parentUrl"></param>
            <param name="preferences"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.GetSecurity(System.Uri)">
            <summary>
            Get User Security
            </summary>
            <remarks>
            Retrieve the user security record - current state of the user regarding
            security and password settings.
            </remarks>
            <param name="url"></param>
            <returns>
            the user security status
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.ResetPassword(System.Uri,ShareFile.Api.Client.Models.ODataObject,System.Boolean)">
            <summary>
            Reset Password
            </summary>
            <example>
            {
            "NewPassword":"new password",
            "OldPassword":"old password"
            }
            {
            "NewPassword":"new password",
            "OldPassword":"old password"
            }
            </example>
            <remarks>
            Resets a user password. A user can reset his own password providing the old and new
            passwords. Administrators can issue this call without providing the old password.
            </remarks>
            <param name="url"></param>
            <param name="properties"></param>
            <param name="notify"></param>
            <returns>
            The modified user record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.ForgotPassword(System.String,System.Boolean)">
            <summary>
            Forgot Password
            </summary>
            <remarks>
            Triggers a reset password email
            </remarks>
            <param name="email"></param>
            <param name="resetOnMobile"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.ResendWelcome(System.Uri,System.String)">
            <summary>
            Send Welcome Email
            </summary>
            <remarks>
            Resends the 'welcome' email to the given user
            </remarks>
            <param name="url"></param>
            <param name="customMessage"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.Delete(System.Uri,System.Boolean,System.String,System.String)">
            <summary>
            Delete User
            </summary>
            <remarks>
            Removes an user
            </remarks>
            <param name="url"></param>
            <param name="completely"></param>
            <param name="itemsReassignTo"></param>
            <param name="groupsReassignTo"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.DeleteClients(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Delete multiple client users
            </summary>
            <example>
            
            ["id1","id2"]
            </example>
            <remarks>
            Removes a list of client users. The list should not exceed 100 client user ids.
            </remarks>
            <param name="clientIds"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.BulkDeleteClients(ShareFile.Api.Client.Models.UserBulkOperationRequest)">
            <summary>
            Delete multiple client users
            </summary>
            <example>
            {
            UserIds: ["id1", "id2"]
            }
            </example>
            <remarks>
            Removes a list of client users. The list should not exceed 100 client user ids.
            </remarks>
            <param name="deleteRequest"></param>
            <returns>
            204 if successful
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.DowngradeEmployees(ShareFile.Api.Client.Models.UserBulkDowngradeRequest)">
            <summary>
            Downgrade multiple employee users to clients
            </summary>
            <example>
            {
            UserIds: ["id1", "id2"],
            ReassignItemsToId: "id3",
            ReassignGroupsToId: "id3"
            }
            </example>
            <remarks>
            Downgrades a list of employee users to clients. The list should not exceed 100 employee user ids.
            </remarks>
            <param name="downgradeRequest"></param>
            <returns>
            204 if successful
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.GetAllSharedFolders">
            <summary>
            Get List of User Shared Folders
            </summary>
            <remarks>
            Retrieve the list of shared folders the authenticated user has access to
            </remarks>
            <returns>
            A list of Folder objects, representing shared folders of an user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.GetTopFolders">
            <summary>
            Get List of User Shared Folders
            </summary>
            <remarks>
            Retrieve the top-level folders for this user. This method requires the account to be
            in the new UI model of "My Files", "Shared", "Connectors", "Favorites" tab - otherwise
            it will return an empty list (new UX model is the default since May 2013).
            </remarks>
            <returns>
            A list of Folder objects, representing shared folders of an user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.NetworkShareConnectors">
            <summary>
            Get List of User Shared Folders
            </summary>
            <remarks>
            Retrieve the connector folders that are associated with a network share service
            </remarks>
            <returns>
            A list of Folder objects, representing network shared connector folders of an user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.SharepointConnectors">
            <summary>
            Get List of User Shared Folders
            </summary>
            <remarks>
            Retrieve the connector folders that are associated with a sharepoint service
            </remarks>
            <returns>
            A list of Folder objects, representing sharepoint folders of an user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.Confirm(ShareFile.Api.Client.Models.UserConfirmationSettings)">
            <summary>
            Confirm the current user logging in for the first time
            </summary>
            <example>
            {
            "FirstName":"",
            "LastName":"",
            "Company":"",
            "Password":"",
            "SecurityQuestion":"",
            "SecurityQuestionAnswer":"",
            "DayLightName":"",
            "UTCOffset":"",
            "DateFormat":"",
            "TimeFormat":"",
            "EmailInterval":0,
            "UserNotificationLocale":"Spanish"
            }
            </example>
            <param name="settings"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.GetInfo">
            <summary>
            Get Current User Info
            </summary>
            <returns>
            UserInfo
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.DeleteEmailAddress(System.String)">
            <summary>
            Delete the email address from user
            </summary>
            <param name="email"></param>
            <returns>
            User
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.MakePrimary(System.String)">
            <summary>
            Set email address as the primary email address for CURRENT user
            </summary>
            <param name="email"></param>
            <returns>
            User
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.SendConfirmationEmail(System.String)">
            <summary>
            Send notification email address to this email address for verification
            </summary>
            <param name="email"></param>
            <returns>
            User
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.WebAppLink">
            <summary>
            Create a one-time use login Uri for the Web App.
            </summary>
            <returns>
            Redirection populated with link in Uri field
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.InboxMetadata(System.Uri)">
            <summary>
            Get Inbox Metadata
            </summary>
            <remarks>
            Returns metadata of the inbox.User identifier
            </remarks>
            <returns>
            Inbox metadata
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.GetInbox(System.Uri,ShareFile.Api.Client.Models.ShareType,System.Boolean)">
            <summary>
            Get Inbox for Recipient
            </summary>
            <remarks>
            Retrieve all outstanding Shares in the inbox.User identifier
            </remarks>
            <returns>
            List of Shares created by the authenticated user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.SentMessages(System.Uri)">
            <summary>
            Get Sent Messages
            </summary>
            <remarks>
            Returns sent messages for the given user.User identifier
            </remarks>
            <returns>
            Feed of Shares
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.WebAppManageUser(System.Uri)">
            <summary>
            Create a one-time use login Uri for the Web App.
            </summary>
            <param name="url"></param>
            <returns>
            Redirection populated with link in Uri field
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.WebAppManageUsers">
            <summary>
            Create a one-time use login Uri for the Web App.
            </summary>
            <returns>
            Redirection populated with link in Uri field
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IUsersEntity.WebAppAddEmployee">
            <summary>
            Create a one-time use login Uri for the Web App.
            </summary>
            <returns>
            Redirection populated with link in Uri field
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.Get(System.String,System.String)">
            <summary>
            Get User
            </summary>
            <remarks>
            Retrieve a single user, by ID or email, or the currently authenticated user.
            A user can retrieve another user when
            * (1) The current user has AdminManageEmployees role
            * OR
            * (2) The current user has CanManageUsers role and the other user is a client
            </remarks>
            <param name="id"></param>
            <param name="emailAddress"></param>
            <returns>
            the requested User object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.Create(ShareFile.Api.Client.Models.User,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create Client User
            </summary>
            <example>
            {
            "Email":"user.one@domain.com",
            "FirstName":"Name",
            "LastName":"Last Name",
            "Company":"Company",
            "Password":"password",
            "Preferences":
            {
            "CanResetPassword":true,
            "CanViewMySettings":true
            },
            "DefaultZone":
            {
            "Id":"zoneid"
            }
            }
            </example>
            <remarks>
            Creates a new Client User and associates it to an Account
            The following parameters from the input object are used: Email, FirstName, LastName, Company,
            DefaultZone, Password, Preferences.CanResetPassword and Preferences.CanViewMySettingsOther parameters are ignored
            </remarks>
            <param name="user"></param>
            <param name="pushCreatorDefaultSettings"></param>
            <param name="addshared"></param>
            <param name="notify"></param>
            <param name="ifNecessary"></param>
            <param name="addPersonal"></param>
            <returns>
            The new user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.CreateAccountUser(ShareFile.Api.Client.Models.AccountUser,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create Employee
            </summary>
            <example>
            {
            "Email":"user.one@domain.com",
            "FirstName":"Name",
            "LastName":"Last Name",
            "Company":"Company",
            "Password":"password",
            "StorageQuotaLimitGB":50,
            "Preferences":
            {
            "CanResetPassword":true,
            "CanViewMySettings":true
            },
            "DefaultZone":
            {
            "Id":"zoneid"
            },
            "IsAdministrator": false,
            "CanCreateFolders": false,
            "CanUseFileBox": true,
            "CanManageUsers": false,
            "Roles": [
            "CanChangePassword", "CanManageMySettings",
            "CanUseFileBox", "CanManageUsers", "CanCreateFolders", "CanUseDropBox", "CanSelectFolderZone",
            "AdminAccountPolicies", "AdminBilling", "AdminBranding", "AdminChangePlan", "AdminFileBoxAccess",
            "AdminManageEmployees", "AdminRemoteUploadForms", "AdminReporting", "AdminSharedDistGroups",
            "AdminSharedAddressBook", "AdminViewReceipts", "AdminDelegate", "AdminManageFolderTemplates",
            "AdminEmailMessages", "AdminSSO", "AdminSuperGroup", "AdminZones", "AdminCreateSharedGroups", "AdminConnectors"
            ]
            }
            </example>
            <remarks>
            Creates a new Employee User (AccountUser) and associates it to an Account
            The following parameters from the input object are used: Email, FirstName, LastName, Company,
            DefaultZone, Password, IsEmployee, IsAdministrator, CanCreateFolders, CanUseFileBox, CanManageUsers,
            Preferences.CanResetPassword and Preferences.CanViewMySettings.
            Other parameters are ignoredStorageQuotaLimitGB parameter is optional. If not specified or equal to -1 the account default storage quota value will be set for the User.
            </remarks>
            <param name="user"></param>
            <param name="pushCreatorDefaultSettings"></param>
            <param name="addshared"></param>
            <param name="notify"></param>
            <param name="ifNecessary"></param>
            <param name="addPersonal"></param>
            <returns>
            The new employee user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.Update(System.Uri,ShareFile.Api.Client.Models.User)">
            <summary>
            Update User
            </summary>
            <example>
            {
            "FirstName":"FirstName",
            "LastName":"LastName",
            "Company":"Company",
            "Email":"user@domain.com",
            "Security":
            {
            "IsDisabled":false
            },
            "DefaultZone":
            {
            "Id":"newzoneid"
            }
            }
            </example>
            <remarks>
            Modifies an existing user object
            The following parameters can be modified through this call: FirstName, LastName, Company,
            Email, IsDisabled, DefaultZone Id
            </remarks>
            <param name="url"></param>
            <param name="user"></param>
            <returns>
            a modified user record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.UpdateRoles(System.Uri,ShareFile.Api.Client.Models.User)">
            <summary>
            Add Roles
            </summary>
            <example>
            {
            "Roles" : [ "CanManageUsers", "CanSelectFolderZone" ]
            }
            </example>
            <remarks>
            Modifies an existing user object to ADD a new role
            The following roles can be added to the user through this call (depending on User type):
            CanCreateFolders,
            CanSelectFolderZone,
            CanUseFileBox,
            CanManageUsers,
            AdminSharedAddressBook,
            CanChangePassword,
            CanManageMySettings,
            AdminManageDropBox
            </remarks>
            <param name="parentUrl"></param>
            <param name="user"></param>
            <returns>
            a modified user record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.PatchRoles(System.Uri,ShareFile.Api.Client.Models.User)">
            <summary>
            Set Roles
            </summary>
            <example>
            {
            "Roles" : [ "CanManageUsers", "CanSelectFolderZone" ]
            }
            </example>
            <remarks>
            Sets the roles for a user (roles not provided will be disabled.)
            The following roles can be set to the user through this call (depending on User type):
            CanCreateFolders,
            CanSelectFolderZone,
            CanUseFileBox,
            CanManageUsers,
            AdminSharedAddressBook,
            CanChangePassword,
            CanManageMySettings,
            AdminManageDropBox
            </remarks>
            <param name="parentUrl"></param>
            <param name="user"></param>
            <returns>
            a modified user record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.RemoveRoles(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Client.Models.SafeEnum{ShareFile.Api.Client.Models.UserRole}})">
            <summary>
            Remove Roles
            </summary>
            <example>
            
            [ "CanManageUsers", "CanSelectFolderZone" ]
            </example>
            <remarks>
            Removes the roles for user.
            The following roles can be removed from user through this call (depending on User type):
            CanCreateFolders,
            CanSelectFolderZone,
            CanUseFileBox,
            CanManageUsers,
            AdminSharedAddressBook,
            CanChangePassword,
            CanManageMySettings
            </remarks>
            <param name="userUrl"></param>
            <param name="userRoles"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.UpdateAccountUser(System.String,ShareFile.Api.Client.Models.AccountUser)">
            <summary>
            Update Employee or Promote Customer
            </summary>
            <example>
            {
            "FirstName":"FirstName",
            "LastName":"LastName",
            "Company":"Company",
            "Email":"user@domain.com",
            "StorageQuotaLimitGB":100,
            "Bandwidth": 50,
            "Security":
            {
            "IsDisabled":false
            },
            "DefaultZone":
            {
            "Id":"newzoneid"
            }
            }
            </example>
            <remarks>
            Modifies an existing user object
            The following parameters can be modified through this call: FirstName, LastName, Company,
            Email, IsEmployee, IsDisabled, DefaultZone Id, StorageQuotaLimitGB, Bandwidth.During a promotion (the user id points to Customer), the following parameters can be
            modified: CanCreateFolders, CanUseFileBox, CanManageUsers. StorageQuotaLimitGB equal to -1 sets the user quota to the account default storage quota value.Bandwidth equal to -1 sets the user bandwidth to unlimited.
            </remarks>
            <param name="id"></param>
            <param name="user"></param>
            <returns>
            a modified user record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.GetHomeFolder(System.Uri)">
            <summary>
            Get HomeFolder
            </summary>
            <remarks>
            Returns a user's home folder
            </remarks>
            <param name="url"></param>
            <returns>
            A folder record representing the requesting user home folder
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.GetTopFolders(System.Uri)">
            <summary>
            Get User's top Folder
            </summary>
            <param name="url"></param>
            <returns>
            User's Top Folders
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.Box(System.Uri)">
            <summary>
            Get User's FileBox children
            </summary>
            <param name="url"></param>
            <returns>
            User's FileBox children
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.FileBox(System.Uri)">
            <summary>
            Get User's FileBox folder
            </summary>
            <param name="url"></param>
            <returns>
            User's FileBox
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.GetPreferences(System.Uri)">
            <summary>
            Get User Preferences
            </summary>
            <remarks>
            Retrieves the User preferences record - all user-selected prefernces, such as timezone,
            time format, sort preferences, etc.
            </remarks>
            <param name="url"></param>
            <returns>
            the user selected preferences
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.UpdatePreferences(System.Uri,ShareFile.Api.Client.Models.UserPreferences)">
            <summary>
            Update User Preferences
            </summary>
            <example>
            {
            "EnableFlashUpload":"true",
            "EnableJavaUpload":"true",
            "...":"..."
            }
            </example>
            <param name="parentUrl"></param>
            <param name="preferences"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.GetSecurity(System.Uri)">
            <summary>
            Get User Security
            </summary>
            <remarks>
            Retrieve the user security record - current state of the user regarding
            security and password settings.
            </remarks>
            <param name="url"></param>
            <returns>
            the user security status
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.ResetPassword(System.Uri,ShareFile.Api.Client.Models.ODataObject,System.Boolean)">
            <summary>
            Reset Password
            </summary>
            <example>
            {
            "NewPassword":"new password",
            "OldPassword":"old password"
            }
            {
            "NewPassword":"new password",
            "OldPassword":"old password"
            }
            </example>
            <remarks>
            Resets a user password. A user can reset his own password providing the old and new
            passwords. Administrators can issue this call without providing the old password.
            </remarks>
            <param name="url"></param>
            <param name="properties"></param>
            <param name="notify"></param>
            <returns>
            The modified user record
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.ForgotPassword(System.String,System.Boolean)">
            <summary>
            Forgot Password
            </summary>
            <remarks>
            Triggers a reset password email
            </remarks>
            <param name="email"></param>
            <param name="resetOnMobile"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.ResendWelcome(System.Uri,System.String)">
            <summary>
            Send Welcome Email
            </summary>
            <remarks>
            Resends the 'welcome' email to the given user
            </remarks>
            <param name="url"></param>
            <param name="customMessage"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.Delete(System.Uri,System.Boolean,System.String,System.String)">
            <summary>
            Delete User
            </summary>
            <remarks>
            Removes an user
            </remarks>
            <param name="url"></param>
            <param name="completely"></param>
            <param name="itemsReassignTo"></param>
            <param name="groupsReassignTo"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.DeleteClients(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Delete multiple client users
            </summary>
            <example>
            
            ["id1","id2"]
            </example>
            <remarks>
            Removes a list of client users. The list should not exceed 100 client user ids.
            </remarks>
            <param name="clientIds"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.BulkDeleteClients(ShareFile.Api.Client.Models.UserBulkOperationRequest)">
            <summary>
            Delete multiple client users
            </summary>
            <example>
            {
            UserIds: ["id1", "id2"]
            }
            </example>
            <remarks>
            Removes a list of client users. The list should not exceed 100 client user ids.
            </remarks>
            <param name="deleteRequest"></param>
            <returns>
            204 if successful
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.DowngradeEmployees(ShareFile.Api.Client.Models.UserBulkDowngradeRequest)">
            <summary>
            Downgrade multiple employee users to clients
            </summary>
            <example>
            {
            UserIds: ["id1", "id2"],
            ReassignItemsToId: "id3",
            ReassignGroupsToId: "id3"
            }
            </example>
            <remarks>
            Downgrades a list of employee users to clients. The list should not exceed 100 employee user ids.
            </remarks>
            <param name="downgradeRequest"></param>
            <returns>
            204 if successful
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.GetAllSharedFolders">
            <summary>
            Get List of User Shared Folders
            </summary>
            <remarks>
            Retrieve the list of shared folders the authenticated user has access to
            </remarks>
            <returns>
            A list of Folder objects, representing shared folders of an user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.GetTopFolders">
            <summary>
            Get List of User Shared Folders
            </summary>
            <remarks>
            Retrieve the top-level folders for this user. This method requires the account to be
            in the new UI model of "My Files", "Shared", "Connectors", "Favorites" tab - otherwise
            it will return an empty list (new UX model is the default since May 2013).
            </remarks>
            <returns>
            A list of Folder objects, representing shared folders of an user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.NetworkShareConnectors">
            <summary>
            Get List of User Shared Folders
            </summary>
            <remarks>
            Retrieve the connector folders that are associated with a network share service
            </remarks>
            <returns>
            A list of Folder objects, representing network shared connector folders of an user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.SharepointConnectors">
            <summary>
            Get List of User Shared Folders
            </summary>
            <remarks>
            Retrieve the connector folders that are associated with a sharepoint service
            </remarks>
            <returns>
            A list of Folder objects, representing sharepoint folders of an user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.Confirm(ShareFile.Api.Client.Models.UserConfirmationSettings)">
            <summary>
            Confirm the current user logging in for the first time
            </summary>
            <example>
            {
            "FirstName":"",
            "LastName":"",
            "Company":"",
            "Password":"",
            "SecurityQuestion":"",
            "SecurityQuestionAnswer":"",
            "DayLightName":"",
            "UTCOffset":"",
            "DateFormat":"",
            "TimeFormat":"",
            "EmailInterval":0,
            "UserNotificationLocale":"Spanish"
            }
            </example>
            <param name="settings"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.GetInfo">
            <summary>
            Get Current User Info
            </summary>
            <returns>
            UserInfo
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.DeleteEmailAddress(System.String)">
            <summary>
            Delete the email address from user
            </summary>
            <param name="email"></param>
            <returns>
            User
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.MakePrimary(System.String)">
            <summary>
            Set email address as the primary email address for CURRENT user
            </summary>
            <param name="email"></param>
            <returns>
            User
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.SendConfirmationEmail(System.String)">
            <summary>
            Send notification email address to this email address for verification
            </summary>
            <param name="email"></param>
            <returns>
            User
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.WebAppLink">
            <summary>
            Create a one-time use login Uri for the Web App.
            </summary>
            <returns>
            Redirection populated with link in Uri field
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.InboxMetadata(System.Uri)">
            <summary>
            Get Inbox Metadata
            </summary>
            <remarks>
            Returns metadata of the inbox.User identifier
            </remarks>
            <returns>
            Inbox metadata
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.GetInbox(System.Uri,ShareFile.Api.Client.Models.ShareType,System.Boolean)">
            <summary>
            Get Inbox for Recipient
            </summary>
            <remarks>
            Retrieve all outstanding Shares in the inbox.User identifier
            </remarks>
            <returns>
            List of Shares created by the authenticated user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.SentMessages(System.Uri)">
            <summary>
            Get Sent Messages
            </summary>
            <remarks>
            Returns sent messages for the given user.User identifier
            </remarks>
            <returns>
            Feed of Shares
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.WebAppManageUser(System.Uri)">
            <summary>
            Create a one-time use login Uri for the Web App.
            </summary>
            <param name="url"></param>
            <returns>
            Redirection populated with link in Uri field
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.WebAppManageUsers">
            <summary>
            Create a one-time use login Uri for the Web App.
            </summary>
            <returns>
            Redirection populated with link in Uri field
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.UsersEntity.WebAppAddEmployee">
            <summary>
            Create a one-time use login Uri for the Web App.
            </summary>
            <returns>
            Redirection populated with link in Uri field
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IWebhookClientsEntity.Get(System.Uri)">
            <summary>
            Gets the configuration settings for a webhook client
            </summary>
            <param name="url"></param>
            <returns>
            WebhookClient
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IWebhookClientsEntity.GeneratePrimarySignatureKey(System.Uri)">
            <summary>
            Generates a new primary signature key for the webhook client
            </summary>
            <param name="url"></param>
            <returns>
            WebhookClient
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IWebhookClientsEntity.GenerateSecondarySignatureKey(System.Uri)">
            <summary>
            Generates a new secondary signature key for the webhook client
            </summary>
            <param name="url"></param>
            <returns>
            WebhookClient
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.WebhookClientsEntity.Get(System.Uri)">
            <summary>
            Gets the configuration settings for a webhook client
            </summary>
            <param name="url"></param>
            <returns>
            WebhookClient
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.WebhookClientsEntity.GeneratePrimarySignatureKey(System.Uri)">
            <summary>
            Generates a new primary signature key for the webhook client
            </summary>
            <param name="url"></param>
            <returns>
            WebhookClient
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.WebhookClientsEntity.GenerateSecondarySignatureKey(System.Uri)">
            <summary>
            Generates a new secondary signature key for the webhook client
            </summary>
            <param name="url"></param>
            <returns>
            WebhookClient
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IWebhookSubscriptionsEntity.Get(System.Uri)">
            <summary>
            Gets a WebhookSubscription based on id
            </summary>
            <param name="url"></param>
            <returns>
            WebhookSubscription
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IWebhookSubscriptionsEntity.Get">
            <summary>
            Gets all webhook subscriptions for the current user
            </summary>
            <returns>
            List of WebhookSubscription
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IWebhookSubscriptionsEntity.Delete(System.Uri)">
            <summary>
            Deletes a WebhookSubscription based on id
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IWebhookSubscriptionsEntity.Create(ShareFile.Api.Client.Models.WebhookSubscription)">
            <summary>
            Creates a WebhookSubscription
            </summary>
            <example>
            {
            "SubscriptionContext": {
            "ResourceType": "Folder",
            "ResourceId": "fo123"
            },
            "WebhookUrl": "https://webhook.com",
            "Events":
            [
            { "ResourceType":"File", "OperationName":"Upload" },
            { "ResourceType":"File", "OperationName":"Update" },
            { "ResourceType":"File", "OperationName":"Download" },
            { "ResourceType":"File", "OperationName":"Delete" },
            ]
            }
            </example>
            <remarks>
            The above example subscribes `https://webhook.com` endpoint to be called when a File Upload, Update, Download or Delete
            event happened for folder `fo123`.
            Note: Context Resource Id is required for all but the account context.
            The MasterAdmin role is required to create account context subscriptions.
            </remarks>
            <returns>
            WebhookSubscription
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.WebhookSubscriptionsEntity.Get(System.Uri)">
            <summary>
            Gets a WebhookSubscription based on id
            </summary>
            <param name="url"></param>
            <returns>
            WebhookSubscription
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.WebhookSubscriptionsEntity.Get">
            <summary>
            Gets all webhook subscriptions for the current user
            </summary>
            <returns>
            List of WebhookSubscription
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.WebhookSubscriptionsEntity.Delete(System.Uri)">
            <summary>
            Deletes a WebhookSubscription based on id
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.WebhookSubscriptionsEntity.Create(ShareFile.Api.Client.Models.WebhookSubscription)">
            <summary>
            Creates a WebhookSubscription
            </summary>
            <example>
            {
            "SubscriptionContext": {
            "ResourceType": "Folder",
            "ResourceId": "fo123"
            },
            "WebhookUrl": "https://webhook.com",
            "Events":
            [
            { "ResourceType":"File", "OperationName":"Upload" },
            { "ResourceType":"File", "OperationName":"Update" },
            { "ResourceType":"File", "OperationName":"Download" },
            { "ResourceType":"File", "OperationName":"Delete" },
            ]
            }
            </example>
            <remarks>
            The above example subscribes `https://webhook.com` endpoint to be called when a File Upload, Update, Download or Delete
            event happened for folder `fo123`.
            Note: Context Resource Id is required for all but the account context.
            The MasterAdmin role is required to create account context subscriptions.
            </remarks>
            <returns>
            WebhookSubscription
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IWorkflowsEntity.GetInitiated">
            <summary>
            Gets workflows initiated by the current user.
            </summary>
            <remarks>
            Restrictions:
            * Skip must be a multiple of 25.
            * Top must be 25. It's preferred to not supply this.
            * Sort is only supported for LastUpdatedDate and Due
            </remarks>
            <returns>
            A feed of Workflow objects
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IWorkflowsEntity.GetShared">
            <summary>
            Gets workflows shared with the current user.
            </summary>
            <remarks>
            Restrictions:
            * Skip must be a multiple of 25.
            * Top must be 25. It's preferred to not supply this.
            * Sort is only supported for LastUpdatedDate and Due
            </remarks>
            <returns>
            A feed of Workflow objects
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IWorkflowsEntity.Get(System.Uri)">
            <summary>
            Get a workflow by id.
            </summary>
            <param name="url"></param>
            <returns>
            A Workflow object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IWorkflowsEntity.GetLink(System.Uri)">
            <summary>
            Get a protocol link to view a workflow in a web browser.
            </summary>
            <remarks>
            Only the latest version of each major browser is supported.
            </remarks>
            <param name="url"></param>
            <returns>
            A ItemProtocolLink set for the Workflow
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IWorkflowsEntity.CreateApproval(System.Uri,ShareFile.Api.Client.Models.CreateWorkflowParams)">
            <summary>
            Create an Approval Workflow
            </summary>
            <example>
            {
            "Participants":
            [
            {
            "Contact":
            {
            "Email": "contact@email.com"
            },
            "Role": "Active"
            },
            {
            "Contact":
            {
            "Email": "contact.cc@email.com"
            },
            "Role": "Passive"
            }
            ]
            }
            </example>
            <param name="url"></param>
            <param name="request"></param>
            <returns>
            A new approval workflow
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IWorkflowsEntity.CreateFeedback(System.Uri,ShareFile.Api.Client.Models.CreateWorkflowParams)">
            <summary>
            Create a Feedback Workflow
            </summary>
            <example>
            {
            "Participants":
            [
            {
            "Contact":
            {
            "Email": "contact@email.com"
            },
            "Role": "Active"
            },
            {
            "Contact":
            {
            "Email": "contact.cc@email.com"
            },
            "Role": "Passive"
            }
            ]
            }
            </example>
            <param name="url"></param>
            <param name="request"></param>
            <returns>
            A new feedback workflow
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.WorkflowsEntity.GetInitiated">
            <summary>
            Gets workflows initiated by the current user.
            </summary>
            <remarks>
            Restrictions:
            * Skip must be a multiple of 25.
            * Top must be 25. It's preferred to not supply this.
            * Sort is only supported for LastUpdatedDate and Due
            </remarks>
            <returns>
            A feed of Workflow objects
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.WorkflowsEntity.GetShared">
            <summary>
            Gets workflows shared with the current user.
            </summary>
            <remarks>
            Restrictions:
            * Skip must be a multiple of 25.
            * Top must be 25. It's preferred to not supply this.
            * Sort is only supported for LastUpdatedDate and Due
            </remarks>
            <returns>
            A feed of Workflow objects
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.WorkflowsEntity.Get(System.Uri)">
            <summary>
            Get a workflow by id.
            </summary>
            <param name="url"></param>
            <returns>
            A Workflow object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.WorkflowsEntity.GetLink(System.Uri)">
            <summary>
            Get a protocol link to view a workflow in a web browser.
            </summary>
            <remarks>
            Only the latest version of each major browser is supported.
            </remarks>
            <param name="url"></param>
            <returns>
            A ItemProtocolLink set for the Workflow
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.WorkflowsEntity.CreateApproval(System.Uri,ShareFile.Api.Client.Models.CreateWorkflowParams)">
            <summary>
            Create an Approval Workflow
            </summary>
            <example>
            {
            "Participants":
            [
            {
            "Contact":
            {
            "Email": "contact@email.com"
            },
            "Role": "Active"
            },
            {
            "Contact":
            {
            "Email": "contact.cc@email.com"
            },
            "Role": "Passive"
            }
            ]
            }
            </example>
            <param name="url"></param>
            <param name="request"></param>
            <returns>
            A new approval workflow
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.WorkflowsEntity.CreateFeedback(System.Uri,ShareFile.Api.Client.Models.CreateWorkflowParams)">
            <summary>
            Create a Feedback Workflow
            </summary>
            <example>
            {
            "Participants":
            [
            {
            "Contact":
            {
            "Email": "contact@email.com"
            },
            "Role": "Active"
            },
            {
            "Contact":
            {
            "Email": "contact.cc@email.com"
            },
            "Role": "Passive"
            }
            ]
            }
            </example>
            <param name="url"></param>
            <param name="request"></param>
            <returns>
            A new feedback workflow
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.Get(ShareFile.Api.Client.Models.ZoneService,System.Boolean)">
            <summary>
            Get List of Zones
            </summary>
            <remarks>
            Retrieve the list of Zones accessible to the authenticated user
            This method will concatenate the list of private zones in the user's account and the
            list of public zones accessible to this account. Any user can see the list of zones.
            </remarks>
            <param name="services"></param>
            <param name="includeDisabled"></param>
            <returns>
            The list of public and private zones accessible to this user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.Get(System.Uri,System.Boolean)">
            <summary>
            Get List of Zones
            </summary>
            <remarks>
            Retrieve the list of Zones accessible to the authenticated user
            This method will concatenate the list of private zones in the user's account and the
            list of public zones accessible to this account. Any user can see the list of zones.
            </remarks>
            <param name="services"></param>
            <param name="includeDisabled"></param>
            <returns>
            The list of public and private zones accessible to this user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.Create(ShareFile.Api.Client.Models.Zone)">
            <summary>
            Create Zone
            </summary>
            <example>
            {
            "Name":"Name",
            "HeartbeatTolerance":10,
            "ZoneServices":"StorageZone, SharepointConnector, NetworkShareConnector"
            }
            </example>
            <remarks>
            Creates a new Zone.
            </remarks>
            <returns>
            the created zone
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.Update(System.Uri,ShareFile.Api.Client.Models.Zone)">
            <summary>
            Update Zone
            </summary>
            <example>
            {
            "Name":"Name",
            "HeartbeatTolerance":10,
            "ZoneServices":"StorageZone, SharepointConnector, NetworkShareConnector"
            }
            </example>
            <remarks>
            Updates an existing zone
            </remarks>
            <param name="url"></param>
            <param name="zone"></param>
            <returns>
            The modified zone
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.Delete(System.Uri,System.Boolean,System.String)">
            <summary>
            Delete Zone
            </summary>
            <remarks>
            Removes an existing zone
            </remarks>
            <param name="url"></param>
            <param name="force"></param>
            <param name="newDefaultZoneId"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.ResetSecret(System.Uri)">
            <summary>
            Reset Zone Secret
            </summary>
            <remarks>
            Resets the current Zone Secret to a new Random value
            Caution! This Call will invalidate all Storage Center communications until the Storage Center Zone secret
            is also updated.
            User must be a Zone admin to perform this action
            </remarks>
            <param name="url"></param>
            <returns>
            The modified Zone object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.GetTenants(System.Uri)">
            <summary>
            Get the tenants of a multi-tenant zone
            </summary>
            <param name="parentUrl"></param>
            <returns>
            List of tenant accounts, not including the zone admin account.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.CreateTenants(System.Uri,System.String)">
            <summary>
            Add a tenant account to a multi-tenant zone
            </summary>
            <param name="parentUrl"></param>
            <param name="accountId"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.DeleteTenants(System.Uri,System.String,System.String,System.Boolean)">
            <summary>
            Remove a tenant from a multi-tenant zone
            </summary>
            <param name="parentUrl"></param>
            <param name="id"></param>
            <param name="newDefaultZoneId"></param>
            <param name="expireItems"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.GetMetadata(System.Uri)">
            <summary>
            Get Zone Metadata
            </summary>
            <remarks>
            Gets metadata associated with the specified zone
            </remarks>
            <param name="url"></param>
            <returns>
            the zone metadata feed
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.CreateMetadata(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Client.Models.Metadata})">
            <summary>
            Create or update Zone Metadata
            </summary>
            <example>
            [
            {"Name":"metadataName1", "Value":"metadataValue1", "IsPublic":"true"},
            {"Name":"metadataName2", "Value":"metadataValue2", "IsPublic":"false"}
            ]
            </example>
            <remarks>
            Creates or updates Metadata entries associated with the specified zone
            </remarks>
            <param name="url"></param>
            <param name="metadata"></param>
            <returns>
            the zone metadata feed
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.IZonesEntity.DeleteMetadata(System.Uri,System.String)">
            <summary>
            Delete Zone Metadata
            </summary>
            <remarks>
            Delete the Metadata entry associated with the specified zone
            </remarks>
            <param name="url"></param>
            <param name="name"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.Get(ShareFile.Api.Client.Models.ZoneService,System.Boolean)">
            <summary>
            Get List of Zones
            </summary>
            <remarks>
            Retrieve the list of Zones accessible to the authenticated user
            This method will concatenate the list of private zones in the user's account and the
            list of public zones accessible to this account. Any user can see the list of zones.
            </remarks>
            <param name="services"></param>
            <param name="includeDisabled"></param>
            <returns>
            The list of public and private zones accessible to this user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.Get(System.Uri,System.Boolean)">
            <summary>
            Get List of Zones
            </summary>
            <remarks>
            Retrieve the list of Zones accessible to the authenticated user
            This method will concatenate the list of private zones in the user's account and the
            list of public zones accessible to this account. Any user can see the list of zones.
            </remarks>
            <param name="services"></param>
            <param name="includeDisabled"></param>
            <returns>
            The list of public and private zones accessible to this user
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.Create(ShareFile.Api.Client.Models.Zone)">
            <summary>
            Create Zone
            </summary>
            <example>
            {
            "Name":"Name",
            "HeartbeatTolerance":10,
            "ZoneServices":"StorageZone, SharepointConnector, NetworkShareConnector"
            }
            </example>
            <remarks>
            Creates a new Zone.
            </remarks>
            <returns>
            the created zone
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.Update(System.Uri,ShareFile.Api.Client.Models.Zone)">
            <summary>
            Update Zone
            </summary>
            <example>
            {
            "Name":"Name",
            "HeartbeatTolerance":10,
            "ZoneServices":"StorageZone, SharepointConnector, NetworkShareConnector"
            }
            </example>
            <remarks>
            Updates an existing zone
            </remarks>
            <param name="url"></param>
            <param name="zone"></param>
            <returns>
            The modified zone
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.Delete(System.Uri,System.Boolean,System.String)">
            <summary>
            Delete Zone
            </summary>
            <remarks>
            Removes an existing zone
            </remarks>
            <param name="url"></param>
            <param name="force"></param>
            <param name="newDefaultZoneId"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.ResetSecret(System.Uri)">
            <summary>
            Reset Zone Secret
            </summary>
            <remarks>
            Resets the current Zone Secret to a new Random value
            Caution! This Call will invalidate all Storage Center communications until the Storage Center Zone secret
            is also updated.
            User must be a Zone admin to perform this action
            </remarks>
            <param name="url"></param>
            <returns>
            The modified Zone object
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.GetTenants(System.Uri)">
            <summary>
            Get the tenants of a multi-tenant zone
            </summary>
            <param name="parentUrl"></param>
            <returns>
            List of tenant accounts, not including the zone admin account.
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.CreateTenants(System.Uri,System.String)">
            <summary>
            Add a tenant account to a multi-tenant zone
            </summary>
            <param name="parentUrl"></param>
            <param name="accountId"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.DeleteTenants(System.Uri,System.String,System.String,System.Boolean)">
            <summary>
            Remove a tenant from a multi-tenant zone
            </summary>
            <param name="parentUrl"></param>
            <param name="id"></param>
            <param name="newDefaultZoneId"></param>
            <param name="expireItems"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.GetMetadata(System.Uri)">
            <summary>
            Get Zone Metadata
            </summary>
            <remarks>
            Gets metadata associated with the specified zone
            </remarks>
            <param name="url"></param>
            <returns>
            the zone metadata feed
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.CreateMetadata(System.Uri,System.Collections.Generic.IEnumerable{ShareFile.Api.Client.Models.Metadata})">
            <summary>
            Create or update Zone Metadata
            </summary>
            <example>
            [
            {"Name":"metadataName1", "Value":"metadataValue1", "IsPublic":"true"},
            {"Name":"metadataName2", "Value":"metadataValue2", "IsPublic":"false"}
            ]
            </example>
            <remarks>
            Creates or updates Metadata entries associated with the specified zone
            </remarks>
            <param name="url"></param>
            <param name="metadata"></param>
            <returns>
            the zone metadata feed
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.ZonesEntity.DeleteMetadata(System.Uri,System.String)">
            <summary>
            Delete Zone Metadata
            </summary>
            <remarks>
            Delete the Metadata entry associated with the specified zone
            </remarks>
            <param name="url"></param>
            <param name="name"></param>
            <returns>
            no data on success
            </returns>
        </member>
        <member name="M:ShareFile.Api.Client.Entities.EntityBase.GetEntityUriFromId(System.String)">
            <summary>
            Will return a composed Uri that will point to <see name="Entity"/>(<see name="id"/>) for the BaseUri
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.AccessControl">
            <summary>
            Represents a rule configuring access of a Principal to an Item.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControl.Item">
            <summary>
            Item that was given permission through this rule
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControl.Principal">
            <summary>
            Principal - User or Group - that has been granted permissions through this rule
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControl.CanUpload">
            <summary>
            Defines whether the principal can add files (upload) into the Item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControl.CanDownload">
            <summary>
            Defines whether the principal can read file content (download) from this Item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControl.CanView">
            <summary>
            Defines whether the principal can view items (browse) from this Item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControl.CanDelete">
            <summary>
            Defines whether the principal can remove items from this Item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControl.CanManagePermissions">
            <summary>
            Defines whether the principal can configure Access Controls in this Item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControl.NotifyOnUpload">
            <summary>
            Defines the notification preference for upload events. If set, the principal will receive
            notifications when new files are uploaded into this Item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControl.NotifyOnDownload">
            <summary>
            Defines the notification preference for download events. If set, the principal will receive
            notifiation when items are downloaded from this Item.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControl.IsOwner">
            <summary>
            Defines whether the principal is the owner of this Item
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.AccessControlBulkResult">
            <summary>
            Result of a bulk operation on AccessControls
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControlBulkResult.SuccessEntities">
            <summary>
            A list of entities processed successfully
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControlBulkResult.AsyncOperations">
            <summary>
            A list of AsyncOperations created for processing the bulk operation
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControlBulkResult.FailedEntities">
            <summary>
            A list of entities for which the operation failed
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.AccessControlDomains">
            <summary>
            Represents an access control list of domains that is used to control Login or Folder access for an account.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControlDomains.AccessControlType">
            <summary>
            Specifies that the list is interpreted as a list of allowed or disallowed domains
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControlDomains.Domains">
            <summary>
            A list of domain names
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.AccessControlFailedEntry">
            <summary>
            Details about the cause of the failure for a given AccessControl of a bulk operation
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControlFailedEntry.AccessControl">
            <summary>
            Entity
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControlFailedEntry.Code">
            <summary>
            Failure code
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControlFailedEntry.Message">
            <summary>
            Exception message
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.AccessControlFilter">
            <summary>
            Specifies whether an access control list is interpreted as a list of allowed or disallowed domains
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.AccessControlFilter.AllowDomains">
            <summary>
            allow specified domains
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.AccessControlFilter.DisallowDomains">
            <summary>
            disallow specified domains
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.AccessControlParam">
            <summary>
            Single AccessControl setting parameters for a bulk operation
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControlParam.AccessControl">
            <summary>
            AccessControl.Item is inherited from AccessControlsBulkParams and cannot be specified here
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControlParam.NotifyUser">
            <summary>
            Defines whether this principal should receieve a notice on the permission grant.
            If not specified it is inherited AccessControlsBulkParams
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControlParam.NotifyMessage">
            <summary>
            Custom notification message, if any
            If not specified it is inherited AccessControlsBulkParams
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControlParam.Recursive">
            <summary>
            Defines whether this ACL change should be applied recursively
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.AccessControlsBulkParams">
            <summary>
            AccessControl bulk grant operation parameters
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControlsBulkParams.NotifyUser">
            <summary>
            Defines whether the principal should receieve a notice on the permission grant.
            If an AccessControlParam doesn't specify the property it is inherited from here.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControlsBulkParams.NotifyMessage">
            <summary>
            Custom notification message, if any
            If an AccessControlParam doesn't specify the property it is inherited from here.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControlsBulkParams.AccessControlParams">
            <summary>
            AccessControlParams
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.AccessControlsCloneParams">
            <summary>
            Clone operation parameters
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControlsCloneParams.NotifyUser">
            <summary>
            Defines whether the cloned principals should receieve a notice on the permission grant.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControlsCloneParams.NotifyMessage">
            <summary>
            Custom notification message, if any.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControlsCloneParams.FolderId">
            <summary>
            The source principal's permissions for this folder and all subdirectories
            will be copied into the cloned users.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControlsCloneParams.PrincipalId">
            <summary>
            This principal's permissions will be used as the source for all cloned users.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccessControlsCloneParams.ClonePrincipalIds">
            <summary>
            List of existing principals that will receive cloned permissions.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.Account">
            <summary>
            Represents a Tenant Account in ShareFile.com
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Account.PlanName">
            <summary>
            Basic, Professional, Enterprise
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Account.BillingType">
            <summary>
            Credit Card, Invoice, Comp
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Account.BillingCycle">
            <summary>
            Monthly, Quarterly, Annually
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Account.BaseBandwidth">
            <summary>
            Bandwidth included in plan in megabytes
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Account.BaseDiskSpace">
            <summary>
            Disk space included in megabytes
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Account.BaseUsers">
            <summary>
            Users included in plan
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Account.AdditionalBandwidth">
            <summary>
            Additional bandwidth purchased for account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Account.AdditionalDiskSpace">
            <summary>
            Additional disk space purchased for account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Account.AdditionalUsers">
            <summary>
            Additional users purchased for account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Account.AdditionalBandwidthRate">
            <summary>
            Additional rate for extra bandwidth. NOTE: This is specified in gigbytes, not megabytes.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Account.AdditionalDiskSpaceRate">
            <summary>
            Additional rate for extra diskspace. NOTE: This is specified in gigbytes, not megabytes.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Account.AdditionalUserRate">
            <summary>
            Additional rate for extra users
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Account.DiskSpaceMax">
            <summary>
            Maximum disk space for the account in megabtyes
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Account.BandwidthMax">
            <summary>
            Maximum bandwidth for the account in megabtyes
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Account.PowerToolsRate">
            <summary>
            Additional rate for adding PowerTools.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Account.EncryptionRate">
            <summary>
            Additional rate for stored file encryption
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Account.Subdomain">
            <summary>
            Primary (first) subdomain
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Account.Subdomains">
            <summary>
            All subdomains assigned to account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Account.Services">
            <summary>
            The add-on services available to the account
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.AccountMessageCode">
            <summary>
            Represents the message code for that account
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.AccountPreferences">
            <summary>
            The preferences an admin can set for a ShareFile Account.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.RequireLoginOnDownload">
            <summary>
            Enforce RequireLogin requirement for all Send Shares
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.RequireLoginOnUpload">
            <summary>
            Enforce RequireLogin requirement for all Request Shares
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.DefaultSortField">
            <summary>
            Valid Values: string.Empty, Name, CreatorNameShort, FileSize, CreationDate
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.DefaultSortOrder">
            <summary>
            Valid Values: string.Empty, asc, desc
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.PasswordPolicy">
            <summary>
            The password policy for the Account, specifying password strength, age, and reuse policies.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.WebDAVServerName">
            <summary>
            ShareFile allows users on certain plans to connect with your ShareFile account through WebDAV to various clients.
            ShareFile WebDAV is not available for Enterprise accounts. This tool is not compatible with on-premise storage and cannot be used with company credentials.
            This property describes WebDAV server information. It cannot be modified.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.FtpServerName">
            <summary>
            ShareFile is compatible with most well-known FTP clients, enabling you to connect to your ShareFile account directly from an FTP program.
            This property describes FTP server information. It cannot be modified.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.CanStoreItemsInShareFile">
            <summary>
            Whether the account can store items in the ShareFile control plane (as opposed to
            Connectors). Driven by the EnableCloudStorage and EnablePrivateZones account preferences.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.RecycleBinDays">
            <summary>
            Retention period of items in the recycle bin.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.SyncConcurrentTransferThreadsLimit">
            <summary>
            Maximum number of concurrent uploads and downloads a Sync client should be creating, at any one time.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.EnableSingleIdentity">
            <summary>
            Enable use of Single Identity authentication service for this account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.EnableDriveMapping">
            <summary>
            Enable the use of the Drive Mapper utility for this account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.NotificationLocale">
            <summary>
            Email notification locale. Values: Invariant, English, German, Spanish, French, Dutch, Chinese, Russian, Japanese, Korean, or Portuguese
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.RetentionPolicySysAdminOnly">
            <summary>
            If true, only Account Admins can update a folder's retention policy
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.EnableLocalization">
            <summary>
            Enable localization
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.IsQuotaLimitAvailable">
            <summary>
            Can Account enable/disable quota limit feature
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.EnableQuotaLimit">
            <summary>
            Has the account enabled the quota limit
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.QuotaLimitInGB">
            <summary>
            Quota Limit in gigabytes
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.EnableRenderLibXThumbnails">
            <summary>
            Enables getting thumbnails from Renderer X service
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.EnableRenderAPIThumbnails">
            <summary>
            Enables getting thumbnails from RenderAPI service
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AccountPreferences.EnableRequestList">
            <summary>
            Enables Provided By Client Request List feature
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.ActivationToken">
            <summary>
            User Activation Token
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ActivityReportFilter.ActivityTypes">
            <summary>
            The Activity Types to include in the Report
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.AdvancedSearchResults">
            <summary>
            Collection of search results from an advanced search query
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AdvancedSearchResults.PartialResults">
            <summary>
            Are these only partial results?
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AdvancedSearchResults.Results">
            <summary>
            Collection of search result hits
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AdvancedSearchResults.TimedOut">
            <summary>
            Did the search query timeout?
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.AsyncOperation">
            <summary>
            Represents an Asynchronous operation - any operation that is started but
            the results will take time to complete.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AsyncOperation.Operation">
            <summary>
            Operation type
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AsyncOperation.Account">
            <summary>
            ShareFile Account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AsyncOperation.AuthorityZone">
            <summary>
            Represents the Zone that is driving the asynchronous operation process. It
            may be null if the operation is driven by the control plane.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AsyncOperation.Source">
            <summary>
            Source Item for the operation.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AsyncOperation.User">
            <summary>
            User that initiated the operation
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AsyncOperation.CreationDate">
            <summary>
            Operation creation date
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AsyncOperation.State">
            <summary>
            Operation state. States 'Created' and 'Scheduled' indicate the operation is
            in progress; States 'Success' and 'Failure' indicate the operatoin is finalized
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AsyncOperation.UpdateDate">
            <summary>
            Last time the operation state was modified
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AsyncOperation.Target">
            <summary>
            Target Item for the operation.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AsyncOperation.BatchID">
            <summary>
            Batch Identifier for an asynchronous operation that includes multiple Items - for
            example, a recursive Copy will create a single AsyncOp instance per file, all sharing
            the same BatchID
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AsyncOperation.BatchSourceID">
            <summary>
            Item ID used as source for the Batch operation
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AsyncOperation.BatchTargetID">
            <summary>
            Item ID used as target for the Batch operation
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AsyncOperation.BatchProgress">
            <summary>
            BatchProgress indicates the progress of the Batch operation
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.AsyncOperation.BatchState">
            <summary>
            Batch Operation state. State 'Scheduled' indicate the operation is
            in progress; States 'Success' and 'Failure' indicate the operation is finalized
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.AsyncOperationState">
            <summary>
            Async Operation state
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.AsyncOperationType">
            <summary>
            Support Async Operation types
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.AsyncOperationType.Copy">
            <summary>
            Item Copy Operation
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.AsyncOperationType.Move">
            <summary>
            Item Move Operation
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.AsyncOperationType.ChangeZone">
            <summary>
            Item Change Zone Operation - Scheduled Synchronously
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.AsyncOperationType.ScheduleChangeZone">
            <summary>
            Item Change Zone Operation - Scheduled Asynchronously through the Async Bot
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.AsyncOperationType.Recovery">
            <summary>
            Item Recovery Operation
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.AsyncOperationType.Delete">
            <summary>
            Item Delete Operation
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.AsyncOperationType.DeletePermanent">
            <summary>
            Item Delete Permanent Operation
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.AsyncOperationType.CloudConnectorCopy">
            <summary>
            Item Connector Copy - scheduled by the active client
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.AsyncOperationType.CloudConnectorFileCopy">
            <summary>
            Item Connector File Copy - scheduled by the Asyncbot
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.AsyncOperationType.CloudConnectorMove">
            <summary>
            Item Connector Move - scheduled by the active client
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.AsyncOperationType.CloudConnectorFileMove">
            <summary>
            Item Connector File Move - scheduled by the Asyncbot
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.AsyncOperationType.AccessControlsUpdate">
            <summary>
            Access Controls Insert
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.AsyncOperationType.IntraZoneCopy">
            <summary>
            Async Copy Operation within same zone
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.AsyncOperationType.IntraZoneMove">
            <summary>
            Async Move Operation within same zone
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.AsyncOperationType.ScheduleChangeZoneFileBoxes">
            <summary>
            File Box Change Zone Operation for All File Boxes in a zone
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.Bandwidth">
            <summary>
            The current usage statistics for Bandwidth on the Account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Bandwidth.Max">
            <summary>
            Max bandwidth allowed
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Bandwidth.Used">
            <summary>
            Current bandwidth used
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Bandwidth.Free">
            <summary>
            Current bandwidth free
            Not returned when unlimited bandwidth
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.BaseAccountCreationParameters">
            <summary>
            Abstract class reprensenting the base parameters required to create an account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.BaseAccountCreationParameters.BillingContact">
            <summary>
            Billing Contact for this account, which will be the first user provisioned
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.BaseAccountCreationParameters.ContactInformation">
            <summary>
            Company Contact Information
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.BaseAccountCreationParameters.IsFreeTrial">
            <summary>
            Whether the account should be a Free Trial
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.BaseAccountCreationParameters.RequestedPlan">
            <summary>
            Usage Plan to be provisioned for this account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.BaseAccountCreationParameters.Subdomain">
            <summary>
            Optional Subdomain to set to the account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.BaseAccountCreationParameters.PlanName">
            <summary>
            Plan Name
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.BaseCspAccountParameters.SupportInfo">
            <summary>
            Support contact information for this account
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.BillingContact">
            <summary>
            First User of an Account, set as Billing Contact and Master Admin
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.BrandingLinks">
            <summary>
            Contains account custom branding related links
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.BrandingLinks.LogoUrl">
            <summary>
            Custom logo url
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.BrandingLinks.EmailLogoUrl">
            <summary>
            Custom email logo url
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.BrandingLinks.LoginLogoUrl">
            <summary>
            Custom login logo url
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.BrandingLinks.FavoriteIconUrl">
            <summary>
            Custom browser favorite icon url
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.BrandingLinks.BackgroundImageUrl">
            <summary>
            Custom background image URL
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.BrandingLinks.MastheadImageUrl">
            <summary>
            Background image behind logo in masthead
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.BrandingLinks.LoginPageBackgroundImageUrl">
            <summary>
            Login page Background image
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.BrandingLinks.TermsAndConditionsUrl">
            <summary>
            Custom Terms and Conditions
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Capability.ScopedHostsAndProviders">
            <summary>
            Indicates the list of hosts and providers with which the associated capability can operate.
            There are two known constants that offer a convenient way to refer to the current provider (self) and ShareFile (sf)
            Otherwise, values will be prefixed with https protocol.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Capability.SupportedDataTypes">
            <summary>
            Indicates the data types are supported based on this capability. If there are no restrictions, this value will be empty or null.
            For backwards compatibility, for an empty list will imply only Folders are supported.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.Sharing">
            <summary>
            DEPRECATED: Use CapabilityName.SharingRequest and CapabilityName.SharingSend instead.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.AnonymousSharing">
            <summary>
            DEPRECATED: Use CapabilityName.AnonymousSharingRequest and CapabilityName.AnonymousSharingSend instead.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.ItemDescription">
            <summary>
            Indicates if Description can be added to items. Currently only ShareFile (sf) supports this.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.Favorites">
            <summary>
            Indicates whether items can be favorited. If this capability appears without
            only Folders are supported.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.RightSignature">
            <summary>
            Supports Right Signature Integration
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.SoftLock">
            <summary>
            Provider supports FileLock APIs with SoftLock semantics.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.HardLock">
            <summary>
            Provider supports FileLock APIs with HardLock semantics.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.DownloadByStream">
            <summary>
            Provider supports download items by StreamId
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.FolderDownload">
            <summary>
            Provider supports downloading Folders
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.FolderSend">
            <summary>
            Provider supports sending Folders
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.SendByStream">
            <summary>
            Provider supports sending Items by StreamId
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.SharingRequest">
            <summary>
            Provider supports requesting Files from authenticated users
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.SharingSend">
            <summary>
            Provider supports sending Items to authenticated users
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.AnonymousSharingRequest">
            <summary>
            Provider supports requesting Files from anonymous users
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.AnonymousSharingSend">
            <summary>
            Provider supports sending Items to anonymous users
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.Copy">
            <summary>
            Provider supports copying Items
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.Move">
            <summary>
            Provider supports moving Items
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.UnZipFileUploads">
            <summary>
            Provider supports unzipping file uploads with file extension .zip
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.RightSignature4">
            <summary>
            Provider supports Right Signature 4 Integration
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.DocumentApprovalWorkflow">
            <summary>
            Provider supports Document Approval Workflow Integration
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.ShareAccessRight">
            <summary>
            Provider supports sending list of available ShareAccessRight options
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.ItemSortByName">
            <summary>
            Provider supports items pagination ordered by Name asc or desc
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.ItemSortByCreatorNameShort">
            <summary>
            Provider supports items pagination ordered by CreatorNameShort asc or desc
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.ItemSortByCreationDate">
            <summary>
            Provider supports items pagination ordered by CreationDate asc or desc
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.ItemSortByFileSizeBytes">
            <summary>
            Provider supports items pagination ordered by FileSizeBytes asc or desc
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.ItemFoldersFirstGrouping">
            <summary>
            Provider supports items orderingMode FoldersFirst
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.ItemOperations">
            <summary>
            Provider supports returning ItemOperations enum
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.SearchByParent">
            <summary>
            Supports Simple search with the option of filtering by parent
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.ScopedCopy">
            <summary>
            Indicates Item copy operations are supported for the provided list of host and providers.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.ScopedMove">
            <summary>
            Indicates Item move operations are supported for the provided list of host and providers.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.StructuredDownload">
            <summary>
            StructuredDownload API that supports client requesting a specific folder structure be returned.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.DirectAnonymousSharingSend">
            <summary>
            Indicates that sending Items to anonymous users will result in a third-party Share Uri.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.MetadataTagging">
            <summary>
            Provider supports adding tags to an item (Prominent use in Connectors)
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.ItemMetadata">
            <summary>
            Provider supports updating the Metadata properties of an item
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.CreateMicrosoftFiles">
            <summary>
            Provider supports creating a new document and launching editing session.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.DownloadSpecification">
            <summary>
            Provider supports download APIs that will optionally return a DownloadSpecification instead of file bytes.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.ItemRename">
            <summary>
            Provider supports the item rename operation
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.BulkMove">
            <summary>
            Provider supports the Bulk Move operation
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.CapabilityName.Breadcrumbs">
            <summary>
            Provider supports Breadcrumbs
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ClientCapability.ItemFavorites">
            <summary>
            If supplied, then calls to Items(favorites) will return all favorites (not just folders)
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ClientCapability.CloudConnectorGroups">
            <summary>
            If supplied, then Personal Cloud and Office 365 connectors will be grouped under the c-pcc and c-o365 folders.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.CompanyContactInformation.CompanyName">
            <summary>
            Company Name
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.CompanyContactInformation.PhoneNumber">
            <summary>
            Company Phone number
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.ConnectedApp">
            <summary>
            Represents a user's application that has been connected to the Account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ConnectedApp.Name">
            <summary>
            Name of the application
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ConnectedApp.AppCode">
            <summary>
            Used to determine which official ShareFile App this is, if any
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ConnectedApp.LastLoginDate">
            <summary>
            The last time this client was used to login to the account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ConnectedApp.UserId">
            <summary>
            The user this app mapping is for
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ConnectedApp.Active">
            <summary>
            Whether or not this App can still be used
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ConnectedApp.Devices">
            <summary>
            Devices associated with this App
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.ConnectorGroup">
            <summary>
            Represents a class of connectors associated with a ShareFile Account. For example, it
            represents the group of Network Shares or Sharepoint Sites linked to this account.
            These elements are returned as children of the alias "connector" in Items
            - i.e., /Items(connectors)/Children
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ConnectorGroup.Zones">
            <summary>
            Zones that contain this Connector type
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ConnectorGroup.Provider">
            <summary>
            Provider identifier for this group. This is the 1st element in a ShareFile URL,
            for example - cifs for Network Shares connectors. Items in Network Share connectors
            will always have the url /cifs/vN/...
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.ConnectorGroupZone">
            <summary>
            Relationship class between Connector Groups and Zones. Groups are considered
            global, but to create Symbolic Links, or retrieve URLs, the client has to
            select a specific Zone
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ConnectorGroupZone.Zone">
            <summary>
            Zone that contains this connector class
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ConnectorGroupZone.StorageCenters">
            <summary>
            List of Storage Centers in this Zone that contain this Connector
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ConnectorGroupZone.ApiVersionMin">
            <summary>
            Minimum API version supported by this connector group
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ConnectorGroupZone.ApiVersionMax">
            <summary>
            Maximum API version supported by this connector group
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ConnectorGroupZone.IconUrl">
            <summary>
            URL for the Connector Group Icon.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ConnectorGroupZone.FormUrl">
            <summary>
            URL for the Form that creates or updates connectors
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.Contact">
            <summary>
            Contact
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Contact.FirstName">
            <summary>
            FirstName
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Contact.LastName">
            <summary>
            LastName
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Contact.Company">
            <summary>
            Company
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Contact.EmailMedium">
            <summary>
            First 40 characters of the e-mail address
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Contact.EmailShort">
            <summary>
            First 20 characters of the e-mail address
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Contact.Count">
            <summary>
            Number of members in a distribution group. Will only be filled for distribution group.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Contact.CreatedDate">
            <summary>
            Date this user was created
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.CreateWorkflowParams">
            <summary>
            Defines a request to create a Workflow.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.CreateWorkflowParams.Participants">
            <summary>
            List of Participants for the workflow.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.CreateWorkflowParams.Message">
            <summary>
            Optional message to be included to contact.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.CreateWorkflowParams.IsSequenced">
            <summary>
            Enforce approval order. If true, then participant ordinals must be in sequential order
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.CreateWorkflowParams.RestartOnNewVersion">
            <summary>
            If true, then every approver must re-approve newly uploaded versions.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.CreateWorkflowParams.DistributionMethod">
            <summary>
            Determines if the server will email the workflow links or not.
            If using , then will be populated on the result.
            For Feedback workflows, if set to , then participants are not accepted.For Approval workflows, participants are required for both distribution methods.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.CspTenantAccountParameters.PartnerAccountId">
            <summary>
            Account to be assigned as Partner
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.CspTenantAccountParameters.PartnerAdminEmail">
            <summary>
            User from Partner Account to be added as Admin for the Tenant
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.Device">
            <summary>
            Device
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.DeviceLogEntry">
            <summary>
            Device Log Entry
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.DeviceLogEntry.FileName">
            <summary>
            File name
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.DeviceLogEntry.FileID">
            <summary>
            File Id
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.DeviceLogEntry.Timestamp">
            <summary>
            Timestamp in milliseconds since epoch
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.DeviceLogEntry.AccountID">
            <summary>
            Account Id
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.DeviceLogEntry.UserID">
            <summary>
            User Id
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.DeviceLogEntry.Action">
            <summary>
            Action
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.DeviceLogEntry.AdditionalInfo">
            <summary>
            Additional Info
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.DeviceLogEntryAction">
            <summary>
            Device Log Entry Action
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.DeviceStatus">
            <summary>
            Device Status
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.DeviceStatus.LockedUsers">
            <summary>
            Locked users
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.DeviceStatus.UsersToWipe">
            <summary>
            Users to wipe
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.DeviceUser">
            <summary>
            Device User
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.DeviceUserWipe">
            <summary>
            DeviceUserWipe
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.DeviceUserWipe.WipeToken">
            <summary>
            Wipe token
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.DeviceUserWipe.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.DeviceUserWipe.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.DeviceWipeReport">
            <summary>
            Represents device wipe results
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.DeviceWipeReport.Logs">
            <summary>
            Logs
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.DeviceWipeReport.WipeResults">
            <summary>
            Wipe results
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.DiskSpace">
            <summary>
            The current usage statistics for DiskSpace on the Account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.DiskSpace.Max">
            <summary>
            Max space allowed
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.DiskSpace.Used">
            <summary>
            Current space used
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.DiskSpace.Free">
            <summary>
            Current space free
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.DlpStatus">
            <summary>
            Data Loss Prevention file scan status.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.DlpStatus.Unscanned">
            <summary>
            The file has not been scanned for policy violations.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.DlpStatus.ScannedOK">
            <summary>
            The file has been scanned and no policy violations were found.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.DlpStatus.ScannedRejected">
            <summary>
            The file has been scanned and a policy violation was found.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.DownloadSpecification.PrepareXmlInfo">
            <summary>
            Specifies the prepare operation for storage servers
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.DownloadSpecification.DownloadUrl">
            <summary>
            Specifies the download URL for clients
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.EditingPlatform">
            <summary>
            Platform(s) supported to edit document
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.EditingPlatformInfo">
            <summary>
            Represents the info about editing platforms supported
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.EncryptedEmail">
            <summary>
            Encrypted Email
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmail.Subject">
            <summary>
            Message subject
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmail.ToRecipients">
            <summary>
            Direct To recipients
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmail.CcRecipients">
            <summary>
            Copied recipients
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmail.BccRecipients">
            <summary>
            Only available to the sender.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmail.OriginalEncryptedEmail">
            <summary>
            Original encrypted email.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmail.InReplyTo">
            <summary>
            Encrypted email that this message is in reply to.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmail.Sender">
            <summary>
            Sender of the encrypted email
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmail.Share">
            <summary>
            Only available to the sender.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmail.ShareAlias">
            <summary>
            Used to access the attachments. Only available for a recipient.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmail.Uri">
            <summary>
            Link to view the email in the web portal.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmail.SentDate">
            <summary>
            Date the encrypted email was sent
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.EncryptedEmailCreateParams">
            <summary>
            EncryptedEmail Create Params
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmailCreateParams.RequireUserInfo">
            <summary>
            Whether the EncryptedEmail requires User Information (Name, Email, Company) to be read
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmailCreateParams.RequireLogin">
            <summary>
            Whether the EncryptedEmail requires the recipient to login
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.EncryptedEmailParams">
            <summary>
            EncryptedEmail Creation Parameters
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmailParams.Subject">
            <summary>
            Message Subject
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmailParams.ExpirationDays">
            <summary>
            Days before message expires
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmailParams.NotifyOnUse">
            <summary>
            Whether the Sender will receive an email when the EncryptedEmail is opened
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.EncryptedEmailRecipient">
            <summary>
            Encrypted Email Recipient
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmailRecipient.User">
            <summary>
            User entity for the Recipient
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmailRecipient.FirstName">
            <summary>
            First Name
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmailRecipient.LastName">
            <summary>
            Last Name
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmailRecipient.Company">
            <summary>
            Company Name
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmailRecipient.Email">
            <summary>
            Email address
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmailRecipient.FullName">
            <summary>
            Full Name
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.EncryptedEmailReplyParams">
            <summary>
            EncryptedEmail Reply Params
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmailReplyParams.ToRecipients">
            <summary>
            To Recipients
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmailReplyParams.CcRecipients">
            <summary>
            CC Recipients
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmailReplyParams.BccRecipients">
            <summary>
            BCC Recipients
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.EncryptedEmailSendParams">
            <summary>
            EncryptedEmail Send Parameters
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmailSendParams.Message">
            <summary>
            Item for a plain text file that will serve as the message body
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EncryptedEmailSendParams.Attachments">
            <summary>
            Items that will be attached to the Email
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.EnsEventType">
            <summary>
            Type of ENS Event
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EnsSubscriberConfiguration.IsEnsEnabled">
            <summary>
            Is ENS enabled?
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EnsSubscriberConfiguration.EnsServerUrl">
            <summary>
            The ENS Server URL
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EnsSubscriberConfiguration.Version">
            <summary>
            Version string
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EnsSubscriberConfiguration.RecommendedPollingSyncInterval">
            <summary>
            RecommendedPollingSyncInterval will control how often a cloud check is done when we are not using ENS.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EnsSubscriberConfiguration.RecommendedNotificationSyncInterval">
            <summary>
            RecommendedNotificationSyncInterval will control how soon we respond to notification events with a cloud check when we are using ENS.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EnsSubscriberConfiguration.NotificationConfigurationCount">
            <summary>
            NotificationConfigurationCount will control how often we check to see if we should be using ENS or not.
            This value is a count that gets multiplied by the RecommendedPollingSyncInterval to determine the actual interval.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EnsSubscriberConfiguration.FailSafePollingCount">
            <summary>
            FailSafePollingCount will only be used when ENS is enabled and will get multiplied by the RecommendedNotificationSyncInterval
            to determine how often we do a cloudcheck if we have not received any notifications.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.EnsSubscriberConfiguration.MaxNotificationSyncWaitCount">
            <summary>
            MaxNotificationSyncWaitCount will control how long the sync client waits before doing a cloud check after receiving a series of notification events.
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Models.EntityTypeMap.AddEntity(System.String,System.Type)">
            <summary>
            Add additional models to the type map.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.VosPreviewNotAvailable">
            <summary>
            Preview is not supported for View-only shares
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.UnsupportedVosFileType">
            <summary>
            View-only permissions are available only for PDFs and Microsoft Office files.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.FileIsLocked">
            <summary>
            Checked out files do not support this operation
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.UnsupportedVosWithImgFileType">
            <summary>
            View-only permissions are available only for PDFs, Microsoft Office and Image files.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.IrmClassificationError">
            <summary>
            Default IRM Classification error
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.UnsupportedIrmFileType">
            <summary>
            File type not supported by IRM
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.IrmClassificationDisabled">
            <summary>
            IRM classification disabled
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.IrmClassificationNotFound">
            <summary>
            IRM classification not found
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.DuplicateIrmClassificationName">
            <summary>
            IRM classification with the same name already exists
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.KmsError">
            <summary>
            Error accessing customer's Key Management Service
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.ErrorCreatingNewFile">
            <summary>
            Error trying to create new file
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.UnsupportedCreateNewFileType">
            <summary>
            Unsupported filetype for OfficeOnline CreateNewFile
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.TemporaryConnectivityFailure">
            <summary>
            Connectivity failure (timeout, etc)
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.FilesRestrictedByAntiVirus">
            <summary>
            File is inaccessible due to an anti-virus restriction in place on account
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.BadAddress">
            <summary>
            The address on the account is bad. Could not find a corresponding TaxAreaCode
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.MaintenanceMode">
            <summary>
            Account is unavailable due to maintenance window
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.InvalidTarget">
            <summary>
            Operation target is invalid
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.InsufficientDiskSpace">
            <summary>
            Not enough disk space on the zone's storage location
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.StorageZoneServerError">
            <summary>
            A generic error occurred in the Storage Zone
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.FileUploadConflict">
            <summary>
            A conflict is detected during FileUpload.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.UnlicensedUser">
            <summary>
            Unlicensed user and must be forced to upgrade as valid user.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.MethodNotImplemented">
            <summary>
            Method not implemented.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.UserWithDefaultRestrictedZoneNotAllowed">
            <summary>
            A user with default zone which is 'Restricted' is not allowed to perform certain operation
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ExceptionReason.ZoneUnavailable">
            <summary>
            Zone is unavailable
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.Favorite">
            <summary>
            Class representing an item which has been marked as Favorite
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Favorite.User">
            <summary>
            Creator of the Favorite
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Favorite.Item">
            <summary>
            The item which is marked as Favorite
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Favorite.DisplayPosition">
            <summary>
            The position within the set of Favorite items where this Favorite should be displayed
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Favorite.Alias">
            <summary>
            The alias name of the Favorite
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Favorite.CreationDate">
            <summary>
            Date when the item was marked favorite
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FavoriteFolder.FolderName">
            <summary>
            Name of the favorite folder
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.File">
            <summary>
            File represent a ShareFile File object. File is a subclass of Item. It is
            not a container - it cannot contain other files.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.File.FilePath">
            <summary>
            Represents the Object Storage Identifier for this File. This field is
            used in Object Storage providers - including sharefile.com and Storage Zones. Other
            providers like CIFS and SharePoint do not need external references for object
            blobs and do not populate this field.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.File.Hash">
            <summary>
            MD5 Hash of the File contents.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.File.HasPreview">
            <summary>
            Indicates that the File has an image Preview.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.File.VirusStatus">
            <summary>
            Current Anti-Virus scanning status for this file
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.File.DlpInfo">
            <summary>
            Data Loss Prevention information for this file.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.File.Info">
            <summary>
            Effective Access Control permissions for this file
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.File.LockedBy">
            <summary>
            Indicates the user that has locked the file
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.File.FileLockInfo">
            <summary>
            File lock info
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.File.Version">
            <summary>
            File version.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.File.ESignatureDocument">
            <summary>
            Electronic signature object associated with this item
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.FileAndFolderPolicy">
            <summary>
            Represents a File and Folder Category Policy definition for use within ShareFile's Policy Based Administration
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FileAndFolderPolicy.Settings">
            <summary>
            The settings managed for this Policy
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.FileAndFolderSettingOptions">
            <summary>
            Represents the options applicable to a File and Folder Setting definition for a File and Folder Policy.
            This setting can either be locked to users with a default value or allow users to select from a range.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FileAndFolderSettingOptions.LockedSelection">
            <summary>
            Represents the setting option type selected: Locked or Range
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FileAndFolderSettingOptions.LockedDefault">
            <summary>
            Default value for the locked setting option
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FileAndFolderSettingOptions.RangeMax">
            <summary>
            Maximum value for the range setting option
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FileAndFolderSettingOptions.RangeMin">
            <summary>
            Minimum value for the range setting option
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FileAndFolderSettingOptions.RangeDefault">
            <summary>
            Default value for the range setting option
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.FileAndFolderSettings">
            <summary>
            Represents the settings applicable to a File and Folder Category Policy definition for use within ShareFile's Policy Based Administration
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.FileLock">
            <summary>
            FileLock
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FileLock.LockId">
            <summary>
            Lock Id
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FileLock.Owner">
            <summary>
            User who owns the Lock
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FileLock.ExpirationTimeInMinutes">
            <summary>
            Expiration time in minutes.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FileLock.ExpirationDate">
            <summary>
            Expiration date. Takes precedence over ExpirationTimeInMinutes if both are provided
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.FileVirusStatus">
            <summary>
            Enumeration for Virus Scan status of an Item.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.FileVirusStatus.VirusWarning">
            <summary>
            File was scanned and an A/V warning was received
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.FileVirusStatus.NotScanned">
            <summary>
            File has not been scanned yet
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.FileVirusStatus.Clean">
            <summary>
            File was scanned and no viruses were found
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.FindSubdomainParams">
            <summary>
            Request model for looking up valid subdomains for a user.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FindSubdomainParams.UsernameShort">
            <summary>
            Short reprepsetnation of the username
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FindSubdomainParams.Password">
            <summary>
            User password
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FindSubdomainParams.EmployeeOnly">
            <summary>
            Constrains request to accounts on which the user is an employee.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.FindSubdomainResult">
            <summary>
            Represents an account with which a user is associated.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FindSubdomainResult.UserID">
            <summary>
            UserId
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FindSubdomainResult.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FindSubdomainResult.AccountID">
            <summary>
            AcocuntId
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FindSubdomainResult.CompanyName">
            <summary>
            Company name
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FindSubdomainResult.Subdomain">
            <summary>
            Primary subdomain for the account.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.Folder">
            <summary>
            Represents a ShareFile Folder container. Folder is a subclass of Item. A Folder
            contains a list of Children.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Folder.FileCount">
            <summary>
            Number of Items defined under this Folder, including sub-folder counts.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Folder.Children">
            <summary>
            List of Children defined under this folder.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Folder.HasRemoteChildren">
            <summary>
            Defines whether the request to retreive Children is to be navigated to a remote endpoint.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Folder.Info">
            <summary>
            Effective Access Control Permissions for this Folder
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Folder.Redirection">
            <summary>
            Redirection endpoint for this Item.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Folder.FavoriteFolder">
            <summary>
            Favorite Folder object associated to this item
            (This property would be deprecated in favor of the new 'Favorite' property under Item)
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.FolderInvite">
            <summary>
            This class represents options available in a Folder Invite such as whether the recipient can download, upload, view and get notifications etc.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.Title">
            <summary>
            Title of the folder invite
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.Description">
            <summary>
            Short description for the folder invite
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.CreationDate">
            <summary>
            Date when the folder invititation was created.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.ExpirationDate">
            <summary>
            Expiration date of the folder invite.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.CreatorId">
            <summary>
            Unique identifier for the Creator of the folder invite.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.CreatorNameShort">
            <summary>
            Short version of items creator's name. E.g., J. Doe.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.AccountId">
            <summary>
            AccountId of the folder invite.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.MaxRegistrations">
            <summary>
            Maxixmum registrations allowed for the folder invite.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.TotalRegistrations">
            <summary>
            Total registrations on the the folder invite.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.NotifyCreatorOnRegistration">
            <summary>
            Notify the creator when a user registers for the folder.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.FolderId">
            <summary>
            Unique identifier of the folder whose invite has been created or edited
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.CanDownload">
            <summary>
            Indicates whether the recipient of the invite can download files from the folder.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.CanView">
            <summary>
            Indicates whether the recipient of the invite can view files of the folder.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.CanUpload">
            <summary>
            Indicates whether the recipient of the invite can upload files to the folder.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.CanDelete">
            <summary>
            Indicates whether the recipient of the invite can delete files from the folder.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.NotifyOnUpload">
            <summary>
            Indicates whether the recipient of the invite can get notified when uploding files to the folder.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.NotifyOnDownload">
            <summary>
            Indicates whether the recipient of the invite can get notified when downloading files from the folder.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.InviteUrl">
            <summary>
            Url that redirects the user to registration page.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.IsExistingUser">
            <summary>
            User exists.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.IsConfirmed">
            <summary>
            User exists and already confirmed.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.FolderInvite.HasExceededMaxFailedAttempts">
            <summary>
            Has exceeded Maximum failed attempts.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.ForbiddenOAuthClientNameWords">
            <summary>
            ForbiddenOAuthClientNameWords
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.Group">
            <summary>
            Distribution Group
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Group.Owner">
            <summary>
            The group's owner
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Group.Account">
            <summary>
            Account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Group.IsShared">
            <summary>
            Whether this group is public
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Group.NumberOfContacts">
            <summary>
            Number of group contacts
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Group.Contacts">
            <summary>
            List of group contacts
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.InboxMetadata">
            <summary>
            InboxMetadata contains metadata of the inbox for a user.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.IrmClassification">
            <summary>
            Represents Irm Classification. ShareFile Admin can define properties on this Irm Classification.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.IrmClassification.Name">
            <summary>
            Name of the Irm Classification
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.IrmClassification.Description">
            <summary>
            Description of the Irm Classification if any
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.IrmClassification.PrimaryAccessRightParams">
            <summary>
            AccessRight permissions on an IRM Classification
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.IrmClassification.IsEnabled">
            <summary>
            Use this flag to enable/ disable the Irm Classification.
            If disabled, this Irm Classification won't show up in the List of active IrmClassifications on an account.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.IrmClassification.NumberOfProtectionDays">
            <summary>
            Defines the numner of days after which the user won't be access the documents protected with this classification.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.IrmPrimaryAccessRightParams">
            <summary>
            Represents AccessRight permissions on an IRM Classification
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.IrmPrimaryAccessRightParams.View">
            <summary>
            Allows user to view the documents
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.IrmPrimaryAccessRightParams.LightViewer">
            <summary>
            Allows user to use LightViewer client to view the documents
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.IrmPrimaryAccessRightParams.Print">
            <summary>
            Allows user to print the documents
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.IrmPrimaryAccessRightParams.Edit">
            <summary>
            Allows user to edit the documents
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.IrmPrimaryAccessRightParams.FullControl">
            <summary>
            Allows user to have full control over the document.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.IrmPrimaryAccessRightParams.CopyData">
            <summary>
            Allows user to copy the content into clipboard from the document.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.IrmPrimaryAccessRightParams.ScreenCapture">
            <summary>
            Allows user to use native screen capture tools.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.IrmPrimaryAccessRightParams.Macro">
            <summary>
            Allows user to run macros. User cannot even view a macro file if this access right is set to false.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.IrmPrimaryAccessRightParams.OfflineAccess">
            <summary>
            Allows user to access the documents offline
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.Item">
            <summary>
            Represents a ShareFile Item: an element that can exist inside a ShareFile Folder.
            This include Files and Folders, as well as other classes that are listed inside
            directory structures: Links, Notes and Symbolic Links.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.Name">
            <summary>
            Item Name
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.FileName">
            <summary>
            Item File Name. ShareFile allows Items to have different Display and File names: display
            names are shown during client navigation, while file names are used when the item is
            downloaded.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.Creator">
            <summary>
            User that Created this Item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.Parent">
            <summary>
            Parent container of the Item. A container is usually a Folder object, with a few exceptions -
            the "Account" is the container of top-level folders.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.AccessControls">
            <summary>
            List of Access Controls for this Item. This is not the effective ACL on the Item, just the
            ACLs directly attached to this Item. Use the "Info" reference to retrieve effective ACL
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.Zone">
            <summary>
            The Storage Zone that contains this Item.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.CreationDate">
            <summary>
            Item Creation Date.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.ProgenyEditDate">
            <summary>
            The last modified date of this item and all of its children, recursively. This parameter
            is not supported in all ShareFile providers - it is always set in sharefile.com hosting, but
            not in some StorageZone connectors. The Capability object of the provider indicates whether
            the provider supports this field or not.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.ClientCreatedDate">
            <summary>
            Client device filesystem Created Date of this Item.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.ClientModifiedDate">
            <summary>
            Client device filesystem last Modified Date of this Item.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.ExpirationDate">
            <summary>
            Defines the Retention Policy for this Item. After this date, the item is automatically moved
            to recycle bin.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.Description">
            <summary>
            Item description
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.DiskSpaceLimit">
            <summary>
            Disk space limit for the Item. Define the maximum amount of bytes that this container can
            hold at any given time.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.IsHidden">
            <summary>
            Defines whether the Item has a 'hidden' flag.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.BandwidthLimitInMB">
            <summary>
            Bandwidth limit for the Item. Define the maximum amount of bytes that can be added and
            retrieved from this item.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.Owner">
            <summary>
            User Owner of this Item.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.Account">
            <summary>
            ShareFile Account containing this item.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.FileSizeInKB">
            <summary>
            Item size in Kilobytes. For containers, this field includes all children sizes, recursively.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.Path">
            <summary>
            Contains a ItemID path, separated by /, from the virtual root to this given file. Example
            /accountID/folderID/folderID/itemID
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.CreatorFirstName">
            <summary>
            First name of the user that created this item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.CreatorLastName">
            <summary>
            Last name of the user that created this item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.ExpirationDays">
            <summary>
            Amount of days until this item expireses (see ExpirationDate)
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.FileSizeBytes">
            <summary>
            Item size in bytes. For containers, this field will include all children sizes, recursively.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.PreviewStatus">
            <summary>
            Indicates whether a preview image is available for this Item.
            
            ShareFile.com always create previews for known file types, although there is a delay from the file
            creation until the preview is available. Some Storage Zones Providers do not create previews, depending
            on version and deployment options.
            
            Previews are not created for unknown file types
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.PreviewPlatformsSupported">
            <summary>
            Indicates a list of PreviewPlatforms supported for this item.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.EditingPlatformsSupported">
            <summary>
            Indicates a list of EditingPlatforms supported for this item.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.HasPendingDeletion">
            <summary>
            Indicates that the Item is pending for removal. At the next execution of the Cleanup process, the data
            blob associated with this item will be removed. This parameter is not used for certain Storage Zone
            Providers. For example, in CIFS and SharePoint connectors, removals are performed imediately. The
            Capability "HasRecycleBin" indicates whether this field is used or not in the provider.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.AssociatedFolderTemplateID">
            <summary>
            Folder Template reference. If set, it indicates that this Item was created from a Folder Template. Modifications
            to the folder template are propagated to the associated items.
            
            The Capability FolderTemplate indicates whether the provider supports Folder Templates.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.IsTemplateOwned">
            <summary>
            Indicates whether the item is owned by a Folder Template. If set, it indicates that this Item was created from a
            Folder Template. Modifications to the folder template are propagated to the associated items.
            
            The Capability FolderTemplate indicates whether the provider supports Folder Templates.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.StreamID">
            <summary>
            Identifier for the Item stream. An Item represents a single version of a file system object. The stream identifies
            all versions of the same file system object. For example, when users upload or modify an existing file, a new Item
            is created with the same StreamID. All Item enumerations return only the latest version of a given stream. You can
            access the previous versions of a file using the StreamID reference.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.CreatorNameShort">
            <summary>
            Short version of items creator's name. E.g., J. Doe.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.HasMultipleVersions">
            <summary>
            Specifies whether there are other versions of this item. Not all providers support file versioning. The
            Capability FileVersioning indicates whether the provider supports file versions.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.HasPendingAsyncOp">
            <summary>
            Specifies whether or not an Item has a pending async operation.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.Metadata">
            <summary>
            List of custom metadata object associated with this item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.Favorite">
            <summary>
            Favorite item object associated with the item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Item.SemanticPath">
            <summary>
            Item Path using Folder names
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.ItemDlpInfo">
            <summary>
            Data Loss Prevention information for a specific Item.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ItemDlpInfo.Status">
            <summary>
            File scan status
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ItemInfo.CanEditRetentionPolicy">
            <summary>
            Indicates whether the current user has permission to change folder retention policies (ExpirationDays)
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ItemInfo.CanCreateRequestList">
            <summary>
            Info on a folder to create a request list bundle
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ItemOrderingMode.Default">
            <summary>
            Default ordering mode is to sort with the folders first if no $orderby is specified, otherwise obey the $orderby exclusively
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ItemOrderingMode.FoldersFirst">
            <summary>
            Sort folders to the top of result set prior to applying any $orderby
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ItemOrderingMode.UseFolderOptions">
            <summary>
            Sort folders based on the persisted folder sort options. If the folder options call for "UserPreferences", honor $orderby, otherwise override.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.Link">
            <summary>
            Represents an URL object that can be added to a ShareFile Folder and shared with
            other users.
            
            Some Storage Zones providers do not support Link objects - for example CIFS providers. The
            ItemLink Capability indicates whether Links are supported in a provider
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Link.Uri">
            <summary>
            Universal Reference Identifier for this Link object
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.Metadata">
            <summary>
            Represents a custom metadata entry associated with an Item
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Metadata.Name">
            <summary>
            The name of a custom metadata entry
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Metadata.Value">
            <summary>
            The value of a custom metadata entry
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Metadata.IsPublic">
            <summary>
            Whether the metadata entry is public or private. Used only by the zone or storage center metadata where only zone admins have access to private metadata.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.Note">
            <summary>
            Represents a Note object that can be added to a ShareFile Folder and shared with
            other users.
            
            Some Storage Zones providers do not support Note objects - for example CIFS providers. The
            ItemNote Capability indicates whether Notes are supported in a provider
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.ODataObject">
            <summary>
            Base class for v2 Model classes that implement ODATA metadata and deferred links
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ODataObject.MetadataUrl">
            <summary>
            ODATA Metadata information about the model instance
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ODataObject.Id">
            <summary>
            Object Identifier
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.OutlookInformation">
            <summary>
            Settings used by the ShareFile Outlook Plugin.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformation.DownloadInfoLevel">
            <summary>
            DownloadInfo Level
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformation.UploadInfoLevel">
            <summary>
            UploadInfo Level
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformation.NotifyOnDownload">
            <summary>
            Notify on download of Share
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformation.NotifyOnUpload">
            <summary>
            Notify on upload of Share
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformation.MaxDownloads">
            <summary>
            Max downloads
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformation.LinkExpiration">
            <summary>
            Link expiration
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformation.RequestText">
            <summary>
            Default text when requesting files
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformation.SendText">
            <summary>
            Default text when sending files
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformation.BannerHTML">
            <summary>
            Banner HTML
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformation.UseBanner">
            <summary>
            Use banner
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformation.AutoConvert">
            <summary>
            Auto convert
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformation.ConvertAbove">
            <summary>
            Auto convert
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformation.AttachPaperclip">
            <summary>
            Attach paperclip
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformation.EncryptedEmailRecipientVerification">
            <summary>
            Encrypted Email Recipient Verification
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformation.EncryptedEmailExpiration">
            <summary>
            Default Encrypted Email Expiration
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformation.EncryptedEmailNotifyOnRead">
            <summary>
            Default Encrypted Email Notify on Read
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.OutlookInformationOptionBool">
            <summary>
            OutlookInformationOptionBool
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformationOptionBool.Locked">
            <summary>
            Setting is locked.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformationOptionBool.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.OutlookInformationOptionInt">
            <summary>
            OutlookInformationOptionInt
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformationOptionInt.Locked">
            <summary>
            Setting is locked.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformationOptionInt.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.OutlookInformationOptionString">
            <summary>
            OutlookInformationOptionString
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformationOptionString.Locked">
            <summary>
            Setting is locked.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.OutlookInformationOptionString.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.PasswordPolicy">
            <summary>
            The password policy for the Account, specifying password strength, age, and reuse policies.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PasswordPolicy.MaxAgeDays">
            <summary>
            Number of days a password is allowed to be used before being required to change it.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PasswordPolicy.HistoryCount">
            <summary>
            The number of previously used passwords to disallow when a user updates their password.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PasswordPolicy.MinimumLength">
            <summary>
            The minimum length a password is required to be.
            Must be greater than or equal to 8.
            Cannot be smaller than the combination of required special characters + required numerics + 1 Upper Case character + 1 Lower Case character.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PasswordPolicy.MinimumSpecialCharacters">
            <summary>
            The minimum number of special characters a password must contain.
            Special Characters are defined in the AllowedSpecialCharacters field.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PasswordPolicy.MinimumNumeric">
            <summary>
            The miminum number of numeric characters a password must contain.
            Must be greater than or equal to 1.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PasswordPolicy.AllowedSpecialCharacters">
            <summary>
            Read only field - the special characters allowed in a password.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PasswordPolicy.ValidationRegEx">
            <summary>
            Read only field - The full Regular Expression used to determine if a password meets the strength policy.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PasswordPolicy.ValidationRegExFormula">
            <summary>
            Read only field - Colon separated regular expression rules.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PasswordPolicy.ValidationRegExDescription">
            <summary>
            Read only field - A localized description of the password strength policy
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.PlanFeatures">
            <summary>
            PlanFeatures
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.PlanType">
            <summary>
            PlanType
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.API">
            <summary>
            API
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.Outlook">
            <summary>
            Outlook enabled
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.DriveMapping">
            <summary>
            DriveMapping enabled
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.CLI">
            <summary>
            ShareFile CLI enabled
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.FTP">
            <summary>
            FTP access enabled
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.FTPS">
            <summary>
            FTPS access enabled
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.Sync">
            <summary>
            Sync tool enabled
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.AntiVirus">
            <summary>
            Virus scanning enabled
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.RequireLoginOnDownload">
            <summary>
            Require login on share downloads
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.MaxFileMB">
            <summary>
            Max File Size supported in megabytes
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.PlanStorMB">
            <summary>
            Max plan storage in megabytes
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.PlanBandMB">
            <summary>
            Max plan bandwidth in megabytes
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.SystemName">
            <summary>
            SystemName
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.SystemType">
            <summary>
            SystemType
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.HasOutlookOptions">
            <summary>
            HasOutlookOptions configured
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.SimpleMAPI">
            <summary>
            Outlook Options - SimpleMAPI
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.ForceAttachLink">
            <summary>
            Outlook Options - Force Attach Links
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.UsedStorMB">
            <summary>
            Current storage used in megabytes
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.UsedStorUtcTicks">
            <summary>
            Last time storage used calculated.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.UsedStorBytes">
            <summary>
            Current storage used in bytes.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.IsEmployee">
            <summary>
            User is Employee
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.IsAdministrator">
            <summary>
            User is Administrator
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.CanCreateRootFolders">
            <summary>
            Can create root folders
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.CanUseFileBox">
            <summary>
            Can use file box
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.IsConfirmed">
            <summary>
            User is confirmed
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.CanResetPassword">
            <summary>
            Can reset password
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.PasswordRegEx">
            <summary>
            Password requirements as regular expression
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.CanManageMySettings">
            <summary>
            Can manage my settings
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.HomeFolder">
            <summary>
            Home Folder Id
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PlanFeatures.EnableAutoUpdate">
            <summary>
            Enable Auto Update for tools
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.Policy">
            <summary>
            Represents a Policy definition for use within ShareFile's Policy Based Administration
            Policies allows the admin to control specific areas of ShareFile. There are currently three types
            of policy categories: UserAccessPolicy, StoragePolicy, and FileAndFolderPolicy
            UserAccessPolicy allows the admin to define settings for what a user can and cannot do.
            StoragePolicy allows the admin to define the default storage zone for a user.
            FileAndFolderPolicy allows the admin to control settings for files and folders for a user, such as quota.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Policy.Name">
            <summary>
            Name of Policy
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Policy.IsDefault">
            <summary>
            Indicates this is the default policy for the category specified
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Policy.CreatedBy">
            <summary>
            Creator of Policy
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Policy.CreationDate">
            <summary>
            Created Date
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Policy.UpdatedBy">
            <summary>
            User who last modified Policy or Policy Settings
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Policy.UpdatedDate">
            <summary>
            Date Policy or Policy Settings were last modified
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Policy.Usage">
            <summary>
            Metrics of Users attached to policy
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PowerTools.ShowApps">
            <summary>
            This gives the ability to access Apps page in web app.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PowerTools.EnableShareConnect">
            <summary>
            Access your computer files and apps on your tablet.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PowerTools.EnableCLI">
            <summary>
            SFCLI is a command-line interface to ShareFile. It can be used with a task scheduler to make regular backups or scheduled uploads to ShareFile.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PowerTools.EnableOutlook">
            <summary>
            The ShareFile Outlook Plug-in integrates with Outlook 2007, 2010, 2013 and 2016 to provide an easy interface to ShareFile, allowing you to quickly send and request files through e-mail.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PowerTools.EnableRightSignature">
            <summary>
            Using Right Signature, you can send documents for signature online.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PowerTools.EnableFTP">
            <summary>
            FTP Access allows you to connect to your ShareFile account and upload and download using a typical FTP client, useful if you have clients already familiar with FTP, or business processes scheduled to run over FTP.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PowerTools.EnableSFTP">
            <summary>
            FTPS Access allows you to use FTP with SSL/TLS encryption, for an extra layer of security. If FTPS is enabled but regular FTP Access is disabled, you can ensure that transfers over FTP will always be encrypted.
            Note: Connections using should be made using 'Implicit SSL/TLS' mode over Port 990.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PowerTools.EnableSync">
            <summary>
            Enables sync access.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PowerTools.EnableSyncAutoUpdate">
            <summary>
            Enables sync auto update.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PowerTools.EnableDriveMapping">
            <summary>
            ShareFile Drive Mapper allows Employee users to connect their account as a mapped drive on the Windows file system, without performing a full sync of account content.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PowerTools.EnableWebDAV">
            <summary>
            WebDAV access allows you to connect to your ShareFile account through a WebDAV client on your computer or mobile device. Depending on the client, these files can then be edited, and directly saved back into ShareFile.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PowerTools.SyncOverrideKey">
            <summary>
            Provide or generate key to override Sync access control.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.PreviewPlatformInfo">
            <summary>
            Represents the information about the PreviewPlatform
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PreviewPlatformInfo.PreviewPlatform">
            <summary>
            Indicates the Preview platform
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.PreviewPlatformInfo.ItemProtocolLink">
            <summary>
            Indicates the ItemProtocolLink for this Preview platform
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.Principal">
            <summary>
            Represents an authenticated authority in ShareFile
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Principal.Name">
            <summary>
            User name
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Principal.Email">
            <summary>
            Email address
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Principal.Username">
            <summary>
            Username for the account - the value used for login. This is the same as Email for ShareFile accounts, but
            may be different on Connectors
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Principal.Domain">
            <summary>
            Account domain
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.Query">
            <summary>
            Describes an advanced search query
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Query.ItemTypes">
            <summary>
            Types of items to search for (ex "File", "Folder", etc.)
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Query.ParentID">
            <summary>
            Parent id constraints on search results
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Query.CreatorID">
            <summary>
            Creator id constraints on search results
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Query.SearchQuery">
            <summary>
            Search term to search for
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Query.CreateStartDate">
            <summary>
            Item creation date range constraint start date in UTC
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Query.CreateEndDate">
            <summary>
            Item creation date range constraint end date in UTC
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Query.ItemNameOnly">
            <summary>
            Whether item content should be included in the search or not.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.QueryPaging">
            <summary>
            Paging information for a search query's results
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.QueryPaging.PageNumber">
            <summary>
            Deprecated, use the Skip property to skip some number of results
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.QueryPaging.PageSize">
            <summary>
            Deprecated, use the Count property
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.QueryPaging.Count">
            <summary>
            The number of search results to get
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.QueryPaging.Skip">
            <summary>
            How many results to skip before returning "Count" number results.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.QuerySorting">
            <summary>
            How results should be sorted
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.QuerySorting.SortBy">
            <summary>
            What property to sort the search results by. Set to "" to not sort them
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.QuerySorting.Ascending">
            <summary>
            Whether the sort order should be ascending or not
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.RemoteUpload">
            <summary>
            This class represents Users and the Options like IsPublic, RequireUserInfo and SelectRecipient in a Remote Upload.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.RemoteUpload.Name">
            <summary>
            The Name of this Remote Upload.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.RemoteUpload.Uri">
            <summary>
            Uri to access the Remote Upload through the Web portal
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.RemoteUpload.IsPublic">
            <summary>
            Indicates whether the Remote Upload is public or not.
            One File Drop on your account can be marked as public, meaning that it is accessible from the short link https://example.sharefile.com/filedrop.
            Any additional File Drops on your account can be linked to on your web site using the link at the top of this page
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.RemoteUpload.RequireUserInfo">
            <summary>
            Indicates whether the Remote Upload requires user information ( first name, last name, email , company).
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.RemoteUpload.SelectRecipient">
            <summary>
            When it's true, visitors of this Remote Upload can select a recipient from a list.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.RemoteUpload.Users">
            <summary>
            Users who can have access to this Remote Upload.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.Report">
            <summary>
            Represents a ShareFile Report: a set of configuration data used to generate JSON data
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.AccountId">
            <summary>
            The Account ID associated with this Report
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.Title">
            <summary>
            The name the Report will appear under in the Reporting UI
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.ReportType">
            <summary>
            Access, Activity, Storage, Messaging, BandwidthDetail, BandwidthSummary, EncryptedEmail, StorageSummary, AccessChange, SharesSend, or SharesRequest
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.ObjectType">
            <summary>
            Account, Folder, or User
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.ObjectId">
            <summary>
            If ObjectType is specified, this is the Id of the object to run the Report against
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.DateOption">
            <summary>
            (For non-Access reports) Specific, Today, Yesterday, ThisWeek, LastWeek, ThisMonth, LastMonth, or Last30Days
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.ActivityTypes">
            <summary>
            (For Activity reports) A comma-delimited list of Login, LoginFail, LoginLocked, Download, View, WatermarkDownload, Upload, ZipUpload, Item_Delete, Item_Edit, Move, Item_Restore, NewFolder, NewNote, NewLink, DLP_Scan_Accept, DLP_Scan_Reject, DLP_Share_Allow, DLP_Share_Deny, Item_Archive, TFA_Login, TFA_LoginFail, TFA_InvalidCode, LoginFail_OAuthTokenExpired
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.StartDate">
            <summary>
            If Specific is the DateOption, the beginning of the date range to report on
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.EndDate">
            <summary>
            If specific is the DateOption, the end of the data range to report on
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.LastRunDate">
            <summary>
            The last time this Report was run
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.IsRecurring">
            <summary>
            True if the Report should run regularly
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.IsScheduled">
            <summary>
            Should match IsRecurring
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.IncludeSubFolders">
            <summary>
            If the ObjectType selected is Folder, whether or not subfolders should be included in the Report
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.SaveToFolder">
            <summary>
            True if the result of this Report should be directly saved to a ShareFile folder
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.SaveFormat">
            <summary>
            If SaveToFolder is true, the format the Report should be saved in
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.SaveFolderId">
            <summary>
            If SaveToFolder is true, the Id of the folder the Report should be saved in
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.SaveFolder">
            <summary>
            The Item object representing the folder selected with SaveFolderId
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.Creator">
            <summary>
            The creator of the report
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.CreatorId">
            <summary>
            The user ID of the creator of the Report
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.Records">
            <summary>
            An expandable property that includes all the ReportRecord objects associated with this Report
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.CreateDate">
            <summary>
            When this Report was originally created
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.Frequency">
            <summary>
            If this Report is scheduled and recurring, when the Report should be run again - Once, Daily, Weekly, or Monthly
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.DayOfWeek">
            <summary>
            If the Report is scheduled to run weekly, the day of the week to run on (Sunday is 0, Saturday is 6)
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.DayOfMonth">
            <summary>
            If the Report is scheduled to run monthly, the day of the month to run on
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.EmailNotice">
            <summary>
            If true, the Report will send an email when it finishes executing
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.EmailToNotify">
            <summary>
            If EmailNotice is true, the email address to notify
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Report.Filter">
            <summary>
            Specifies the custom Filters specific to each type of Report
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.ReportRecord">
            <summary>
            Represents a ShareFile ReportRecord: an individual execution of a ShareFile Report
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ReportRecord.StartDate">
            <summary>
            The Start Date of the range the ReportRecord will be run against
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ReportRecord.EndDate">
            <summary>
            The End Date of the range the ReportRecord will be run against
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ReportRecord.StartRunTime">
            <summary>
            The Time this ReportRecord began processing
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ReportRecord.EndRunTime">
            <summary>
            The Time this ReportRecord finished processing
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.RequestedPlan">
            <summary>
            Requested Plan
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.RequestedPlan.BaseBillingRate">
            <summary>
            Billing Rate estimate in US Dollars
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.RequestedPlan.BaseUsers">
            <summary>
            Number of User licenses for the account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.RequestedPlan.BaseDiskSpaceInGB">
            <summary>
            Base amount of Cloud Storage to provision
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.RequireSubdomainResult">
            <summary>
            Response object for RequestSubdomain requests.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.RequireSubdomainResult.RequireSubdomain">
            <summary>
            Indicates if subdomain is required.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.RequireWebPopResult.RequireWebPop">
            <summary>
            Indicates if WebPop is required for authentication.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.ResetPasswordRequest">
            <summary>
            The parameters required to reset password with token
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SalesTaxQuote.TaxRate">
            <summary>
            Tax rate used to calculate the Total Tax, in decimal form, e.g, 7% is 0.07
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SalesTaxQuote.TotalTax">
            <summary>
            Total Tax quoted, in $US
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SalesTaxQuote.ErrorMessage">
            <summary>
            If Tax could not be calculated, this property will provide a message
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.SearchQuery">
            <summary>
            Advanced search query object
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SearchQuery.Query">
            <summary>
            Information about the query to run
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SearchQuery.Paging">
            <summary>
            Paging info about the search results
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SearchQuery.Sort">
            <summary>
            How the search results should be sorted
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SearchQuery.TimeoutInSeconds">
            <summary>
            Timeout for the search request in seconds
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.SearchResults">
            <summary>
            Collection of search results from a search query
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SearchResults.PartialResults">
            <summary>
            Are these only partial results?
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SearchResults.Results">
            <summary>
            Collection of search result hits
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SearchResults.TimedOut">
            <summary>
            Did the search query timeout?
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.Service">
            <summary>
            Represents an add-on service available to a given account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Service.PricePerLicense">
            <summary>
            Unit price per license, per billing cycle
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.ServicesCollection">
            <summary>
            Encapsulates the add-on services available on a given account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ServicesCollection.RightSignature">
            <summary>
            RightSignature account service
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ServicesCollection.ShareConnect">
            <summary>
            ShareConnect account service
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ServicesCollection.ShareFileLegal">
            <summary>
            ShareFile Legal account service
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ServicesCollection.Podio">
            <summary>
            Podio account service
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.Share">
            <summary>
            Shares represent the "Send File" and "Request File" actions initiated by ShareFile users. Shares allows users to give temporary access to specific set of files or folders, allowing other
            users to download or upload files even though they would not have permissions otherwise.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.AliasID">
            <summary>
            When a Share is sent to multiple users, with RequireLogin or RequireUserInfo set, then a different
            Share Alias is created for each user. The email ShareFile sends to these users will contain different
            AliasIDs, allowing ShareFile to track the user activity on the share.
            For anonymous Shares, the AliasID will be the same as the Share ID.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.ShareType">
            <summary>
            Either "Send" or "Request". Send Shares are used to Send files and folders to the specified users. Request
            shares are used to allow users to upload files to the share owner chosen location.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.Title">
            <summary>
            Share title
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.HasSentMessage">
            <summary>
            Flag to indicate if ShareFile has sent email messages for this Share
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.SentMessageTitle">
            <summary>
            Subject of Share email message
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.RequireLogin">
            <summary>
            If set, only authenticated users can download files from this share.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.RequireUserInfo">
            <summary>
            If set, users must provide Name, Email and Company information to download files from the share.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.Parent">
            <summary>
            Folder location that contain the share files (Send); or the folder were files will be uploaded to
            (Request).
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.Creator">
            <summary>
            User that created this Share.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.User">
            <summary>
            User given permission to use this share - used for Aliases.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.Items">
            <summary>
            List of shared Items (for Send Shares only)
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.CreationDate">
            <summary>
            Date the share was created
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.ExpirationDate">
            <summary>
            Date the share expires
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.MaxDownloads">
            <summary>
            Maximum number of downloads each user can perform.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.TotalDownloads">
            <summary>
            Total number of times a share has been downloaded by a user.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.IsViewOnly">
            <summary>
            Used for Virtual Data Room accounts - indicates the files in the share can only be
            downloaded with an applied watermark.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.TrackUntilDate">
            <summary>
            User activity on this share will be tracked up to this date.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.IsConsumed">
            <summary>
            Indicates whether or not this Share has been downloaded
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.IsRead">
            <summary>
            Indicates whether the contents of this share have been viewed by a valid, authenticated recipient
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.UsesStreamIDs">
            <summary>
            When enabled the items are identified by stream IDs instead of item IDs.
            Applies to Send Shares only.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.Uri">
            <summary>
            Uri to access the share through the Web portal
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.Recipients">
            <summary>
            List of users that have access to this share.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.Zone">
            <summary>
            The Storage Zone that contains this Share.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.Signature">
            <summary>
            HMAC Signature for the Share data
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.HasRemoteChildren">
            <summary>
            Defines whether the request to retrieve Share Items is to be navigated to a remote endpoint.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.Redirection">
            <summary>
            Redirection endpoint for this Share.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.ShareItemHistory">
            <summary>
            Shared item history.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.Settings">
            <summary>
            Current Settings for the Share
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.ShareAccessRight">
            <summary>
            Type of the Share
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Share.IrmProtected">
            <summary>
            Flag determining whether the share is protected through IRM (Information Rights Management)
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.ShareAccessRight">
            <summary>
            Model that contains share option type, properties and display names
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareAccessRight.DisplayText">
            <summary>
            Localized text for downstream clients to use for displaying options
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareAccessRight.AccessRightType">
            <summary>
            Share Access Right Type
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.ShareAccessRightType">
            <summary>
            Share type
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.ShareActionType">
            <summary>
            Share action type
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.ShareAlias">
            <summary>
            Share Alias
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareAlias.User">
            <summary>
            User to whom the share is associated.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareAlias.Share">
            <summary>
            Share
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareAlias.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareAlias.Downloads">
            <summary>
            Number of downloads
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareAlias.IsConsumed">
            <summary>
            IsConsumed
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareAlias.IsArchived">
            <summary>
            IsArchived
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareAlias.IsRead">
            <summary>
            IsRead
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareAlias.Uri">
            <summary>
            Uri to access the share through the Web portal
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.ShareFileAccessRights">
            <summary>
            IRM ShareFile specific access rights
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ShareFileAccessRights.NoAccess">
            <summary>
            No Access
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ShareFileAccessRights.View">
            <summary>
            User can only view.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ShareFileAccessRights.LightViewer">
            <summary>
            Can use Light viewer by Seclore to access protected file.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ShareFileAccessRights.Print">
            <summary>
            User can print
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ShareFileAccessRights.Edit">
            <summary>
            User can edit
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ShareFileAccessRights.FullControl">
            <summary>
            Give user the full control on protected file.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ShareFileAccessRights.CopyData">
            <summary>
            Disable copying data
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ShareFileAccessRights.ScreenCapture">
            <summary>
            Disable screen Capture
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ShareFileAccessRights.Macro">
            <summary>
            Disable macros.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ShareFileAccessRights.OfflineAccess">
            <summary>
            Provide offline access.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ShareFileAccessRights.Redistribute">
            <summary>
            Allow users to redistribute protected files.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.ShareRequestParams">
            <summary>
            ShareRequestParams
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareRequestParams.FolderId">
            <summary>
            The Folder Id for this Request. Has precedence over FolderPath
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareRequestParams.FolderPath">
            <summary>
            The path to the Folder for this Request
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareRequestParams.Emails">
            <summary>
            List of emails to whom this Share should be sent
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareRequestParams.Subject">
            <summary>
            The subject of the Share email
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareRequestParams.Body">
            <summary>
            A message to be included in the Share email body
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareRequestParams.CcSender">
            <summary>
            If true, the Share sender will be cc'd in the Share email
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareRequestParams.RequireLogin">
            <summary>
            If true, recipients will need to login to access the Share
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareRequestParams.ExpirationDays">
            <summary>
            Number of days until access to this Share expires
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareRequestParams.NotifyOnUpload">
            <summary>
            If true, the sender will receive an email notification when files are uploaded to the Share
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareRequestParams.IsViewOnly">
            <summary>
            If true, the Share items can only be viewed but not downloaded. Not applicable for Request Shares
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.ShareResendParams">
            <summary>
            Parameters used to re-send an existing share
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareResendParams.ShareId">
            <summary>
            The ID of the existing share
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareResendParams.Recipients">
            <summary>
            These can be email addresses or group IDs
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareResendParams.Body">
            <summary>
            Message included in the share notification
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareResendParams.CcSender">
            <summary>
            Send a copy of the notification to the cender
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.ShareSendParams">
            <summary>
            SendShareParams
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareSendParams.Items">
            <summary>
            List of Item Ids to be sent
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareSendParams.Emails">
            <summary>
            List of emails to whom this Share should be sent
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareSendParams.Subject">
            <summary>
            The subject of the Share email
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareSendParams.Body">
            <summary>
            A message to be included in the Share email body
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareSendParams.CcSender">
            <summary>
            If true, the Share sender will be cc'd in the Share email
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareSendParams.RequireLogin">
            <summary>
            If true, recipients will need to login to access the Share
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareSendParams.SendAnon">
            <summary>
            If true, anyone with the link can access the Share. Cannot be true if RequireLogin is true
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareSendParams.RequireUserInfo">
            <summary>
            If true, a recipient will need to provide their full name and email to access the Share. Cannot be true if RequireLogin is true
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareSendParams.ExpirationDays">
            <summary>
            Number of days until access to this Share expires
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareSendParams.NotifyOnDownload">
            <summary>
            If true, the sender will receive an email notification when the Share items are downloaded
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareSendParams.IsViewOnly">
            <summary>
            If true, the Share items can only be viewed but not downloaded. Requires account preference EnableViewOnly to work
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareSendParams.MaxDownloads">
            <summary>
            Maximum number of times each recipient can download the Share items
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareSendParams.UsesStreamIDs">
            <summary>
            When enabled the items are identified by stream IDs instead of item IDs.
            Applies to Send Shares only. (FINRA enabled accounts cannot use this)
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareSendParams.ShareAccessRight">
            <summary>
            Used to define the share type and share action types
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ShareSettings.NotifyOnUse">
            <summary>
            Notify the creator when Share is used.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.SimpleQuery">
            <summary>
            Describes a simplified advanced search query. Some constraints have been changed to take only a single id
            instead of a list of ids
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SimpleQuery.ItemType">
            <summary>
            Item type to search for (ex "File", "Folder", etc.)
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SimpleQuery.ParentID">
            <summary>
            Parent id constraint on search results
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SimpleQuery.CreatorID">
            <summary>
            Creator id constraint on search results
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SimpleQuery.SearchQuery">
            <summary>
            Search term to search for
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SimpleQuery.CreateStartDate">
            <summary>
            Item creation date range constraint start date in UTC
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SimpleQuery.CreateEndDate">
            <summary>
            Item creation date range constraint end date in UTC
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SimpleQuery.ItemNameOnly">
            <summary>
            Whether item content should be included in the search or not.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.SimpleSearchQuery">
            <summary>
            Simplified advanced search query object. Same as the SearchQuery object, but uses the simplified SimpleQuery child object
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SimpleSearchQuery.Query">
            <summary>
            Information about the query to run
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SimpleSearchQuery.Paging">
            <summary>
            Paging info about the search results
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SimpleSearchQuery.Sort">
            <summary>
            How the search results should be sorted
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SimpleSearchQuery.TimeoutInSeconds">
            <summary>
            Timeout for the search request in seconds
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.SSOInfo">
            <summary>
            SSO Info
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SSOInfo.Info">
            <summary>
            Collection of entries
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SSOInfo.AppControlPlane">
            <summary>
            Top level domain for ShareFile application
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SSOInfo.ApiControlPlane">
            <summary>
            Top level domain for ShareFile API
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.SSOInfoEntry">
            <summary>
            SSO Info Entry
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SSOInfoEntry.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SSOInfoEntry.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.StorageCenter.Metadata">
            <summary>
            List of metadata objects associated with this zone
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.StorageCenterUrls.HealthStatsUrl">
            <summary>
            HealthStats endpoint url
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.StoragePolicy">
            <summary>
            Represents a Storage Category Policy definition for use within ShareFile's Policy Based Administration
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.StoragePolicy.Settings">
            <summary>
            The settings managed for this Policy
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.StorageSettings">
            <summary>
            Represents the settings applicable to a Storage Category Policy definition for use within ShareFile's Policy Based Administration
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.SubdomainAvailabilityResult">
            <summary>
            Response object for SubdomainAvailability requests.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SubdomainAvailabilityResult.IsSubdomainAvailable">
            <summary>
            Indicates if subdomain is available to claim for an account
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.SubscribedResourceEvent">
            <summary>
            The event type a subscription will process
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SubscribedResourceEvent.ResourceType">
            <summary>
            The Event Resource Type
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SubscribedResourceEvent.OperationName">
            <summary>
            The Event Operation Name
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.SubscriptionContext">
            <summary>
            The context for Webhook Subscription, allowing a constraint on which events are received
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SubscriptionContext.ResourceType">
            <summary>
            The Context Resource Type
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.SubscriptionContext.ResourceId">
            <summary>
            The Context Resource Id, Can only be empty for Account Context
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.SymbolicLink">
            <summary>
            Symbolic Links represent a remote folder in a ShareFile file system structure. A
            Symbolic Link uses the URL field to point to another provider. Client must query
            the url location to retrieve Item information. In some cases, the Symbolic Link
            fields may be populated in the remote provider - for example, Storage Zone Connectors
            populate the "Name" field in the ShareFile provider. In this case, clients can use
            the available fields without the remote call to the provider.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.TenantAccountCreationParameters.PartnerAccountId">
            <summary>
            Account to be assigned as Partner
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.TenantAccountCreationParameters.TenantAccountId">
            <summary>
            AccountId to be added as Tenant - Required
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.TenantAccountCreationParameters.PartnerAdminEmail">
            <summary>
            Email from Partner Account user to be added as Admin for the Tenant - Required
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.TenantAccountCreationParameters.MultiTenantZoneId">
            <summary>
            MultiTenantZone to be added to Tenant - Optional
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.ToolInformation">
            <summary>
            Outlook Information
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ToolInformation.ToolName">
            <summary>
            Tool Name
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.ToolInformation.Version">
            <summary>
            Tool Version
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.TwoFactorAuthApp">
            <summary>
            Represents a device or application that provides a Two Factor Authentication login code
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.TwoFactorAuthApp.Name">
            <summary>
            TFA App Name
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.TwoFactorAuthApp.LastLoginDate">
            <summary>
            Last Login Date for the TFA App
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.TwoFactorAuthApp.PasscodeType">
            <summary>
            The type of Passcode, such as Cookie, associated with this App
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.TwoFactorAuthApp.UserId">
            <summary>
            User associated with the TFA App
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UploadRequestParams.BaseFileId">
            <summary>
            BaseFileId is a used to check conflict in file during File Upload.
            BaseFileId is passed by client and contains value of their local copy itemId.
            API will check if the version passed is still current or someone else has updated file since clients last read.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.UploadSpecification">
            <summary>
            Upload Specifications contain the necessary information for uploading new files to
            a ShareFile provider.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UploadSpecification.Method">
            <summary>
            The Upload method that must be used for this upload
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UploadSpecification.PrepareUri">
            <summary>
            If provided, clients must issue a request to this Uri before uploading any data.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UploadSpecification.ChunkUri">
            <summary>
            Specifies the URI the client must send the file data to
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UploadSpecification.FinishUri">
            <summary>
            If provided, specifies the final call the client must perform to finish the upload process
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UploadSpecification.ProgressData">
            <summary>
            Allows the client to check progress of standard uploads
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UploadSpecification.IsResume">
            <summary>
            Specifies a Resumable upload is supproted.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UploadSpecification.ResumeIndex">
            <summary>
            Specifies the initial index for resuming, if IsResume is true.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UploadSpecification.ResumeOffset">
            <summary>
            Specifies the initial file offset by bytes, if IsResume is true
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UploadSpecification.ResumeFileHash">
            <summary>
            Specifies the MD5 hash of the first ResumeOffset bytes of the partial file found at the server
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UploadSpecification.MaxNumberOfThreads">
            <summary>
            Specifies the max number of chunks that can be sent simultaneously for threaded uploads
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.User">
            <summary>
            User
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.User.FullName">
            <summary>
            The first and last name of the user
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.User.FavoriteFolders">
            <summary>
            This property would be deprecated in favor of the new property 'Favorites'
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.User.Favorites">
            <summary>
            List of Favorite items associated with the user
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.User.Groups">
            <summary>
            List of Groups the user belongs. Only available when authenticated user and user match.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.UserAccessPolicy">
            <summary>
            Represents a User Access Category Policy definition for use within ShareFile's Policy Based Administration
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessPolicy.Settings">
            <summary>
            The settings managed for this Policy
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.UserAccessSettings">
            <summary>
            Represents the settings applicable to a User Access Category Policy definition for use within ShareFile's Policy Based Administration
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanCreateFolders">
            <summary>
            Create root-level folders
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanUseFileBox">
            <summary>
            Use Personal File Box
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanManageUsers">
            <summary>
            Manage Client Users
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanAdminSharedAddressBook">
            <summary>
            Edit the shared address book
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanChangePassword">
            <summary>
            Change his/her password
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanManageMySettings">
            <summary>
            See the ‘My settings’ link on the top navigation bar
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.AddToSharedAddressBook">
            <summary>
            Whether or not a user created with this policy assigned should be added to shared company address book
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanSelectFolderZone">
            <summary>
            Select storage zone for root-level folders
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CreateNetworkShareConnectors">
            <summary>
            Create Network Share Connectors
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CreateSharePointConnectors">
            <summary>
            Create SharePoint Connectors
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanAdminAccountSettings">
            <summary>
            Modify account-wide Settings
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanAdminBranding">
            <summary>
            Edit Account Appearance
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanAdminFileBoxAccess">
            <summary>
            Access other users' File Boxes and Sent Items
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanAdminEmailMessages">
            <summary>
            View all emails
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanAdminManageEmployees">
            <summary>
            Manage employee users
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanAdminRemoteUploadForms">
            <summary>
            Manage remote upload forms
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanAdminReporting">
            <summary>
            Access account-wide reporting
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanAdminCreateSharedGroups">
            <summary>
            Create shared distribution groups
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanAdminSharedDistGroups">
            <summary>
            Edit shared distribution groups
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanAdminViewReceipts">
            <summary>
            View receipts/invoices
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanAdminBilling">
            <summary>
            Edit billing information
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanAdminChangePlan">
            <summary>
            Request plan changes
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanAdminSSO">
            <summary>
            Configure single sign-on settings
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanAdminSuperGroup">
            <summary>
            Manage Super User Group membership
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanAdminDelegate">
            <summary>
            Delegate admin privileges to other employee users
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanAdminZones">
            <summary>
            Create and manage Zones
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanAdminConnectors">
            <summary>
            Create and manage Connectors
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanAdminCanAdministerCustomerAccount">
            <summary>
            Manage Tenants
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanManageAccountPolicies">
            <summary>
            Create and manage account policies
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanUseFileDrops">
            <summary>
            Can be added to file drops (drop box)
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanManageFileDrops">
            <summary>
            Create and manage file drops (drop box)
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanManageFolderTemplates">
            <summary>
            Create and manage folder templates
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanPerformArchivedSearch">
            <summary>
            Perform archived search
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanAdminCustomWorkflows">
            <summary>
            Create and manage custom workflows
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanSendDocumentsForSignature">
            <summary>
            Can send documents for signature in RightSignature
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanViewSignatureDocuments">
            <summary>
            Can view all RightSignature documents
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserAccessSettings.CanManageSignatureTemplates">
            <summary>
            Can manage RightSignature templates
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.UserBulkDowngradeRequest">
            <summary>
            User Bulk Downgrade Request
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserBulkDowngradeRequest.ReassignItemsToId">
            <summary>
            If provided, all users in this bulk operation have their items reassigned to this user id
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserBulkDowngradeRequest.ReassignGroupsToId">
            <summary>
            If provided, all users in this bulk operation have their groups reassigned to this user id
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.UserBulkOperationRequest">
            <summary>
            User Bulk Operation Request
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserBulkOperationRequest.UserIds">
            <summary>
            List of user ids to perform this operation on
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.UserConfirmationSettings">
            <summary>
            User Confirmation Settings
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserConfirmationSettings.FirstName">
            <summary>
            First Name
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserConfirmationSettings.LastName">
            <summary>
            Last Name
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserConfirmationSettings.Company">
            <summary>
            Company
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserConfirmationSettings.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserConfirmationSettings.SecurityQuestion">
            <summary>
            Security Question
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserConfirmationSettings.SecurityQuestionAnswer">
            <summary>
            Answer for Security Question
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserConfirmationSettings.DayLightName">
            <summary>
            DayLightName
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserConfirmationSettings.UTCOffset">
            <summary>
            UTC Offset
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserConfirmationSettings.DateFormat">
            <summary>
            Preferred Date Format
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserConfirmationSettings.TimeFormat">
            <summary>
            Preferred Time Format
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserConfirmationSettings.EmailInterval">
            <summary>
            Email notification interval for activities
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserConfirmationSettings.UserNotificationLocale">
            <summary>
            Email notification locale. Values: Invariant, English, German, Spanish, French, Dutch, Chinese, Russian, Japanese, Korean, or Portuguese
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserConfirmationSettings.OAuthClientId">
            <summary>
            Webpop ClientId
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserConfirmationSettings.Email">
            <summary>
            Email address of the user
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.UserConfirmRequirement">
            <summary>
            The parameters we need for user confirm flow
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.UserInfo">
            <summary>
            UserInfo
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserInfo.CompanyName">
            <summary>
            Company Name
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserInfo.PlanName">
            <summary>
            Plan Name
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserInfo.PlanFeatures">
            <summary>
            Plan Features
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserInfo.ApplicationUrl">
            <summary>
            Application URL
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserInfo.StorageCenterUrl">
            <summary>
            Default Storage Center Url
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.UserPolicy">
            <summary>
            Represents a Policy assignment to a User
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserPolicy.UserId">
            <summary>
            User Identifier
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserPolicy.Active">
            <summary>
            Flag to indicate if this Policy is turned on for this User
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserPolicy.Policy">
            <summary>
            The Policy assigned
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserPreferences.UserNotificationLocale">
            <summary>
            Email notification locale. Values: Invariant, English, German, Spanish, French, Dutch, Chinese, Russian, Japanese, Korean, or Portuguese
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.UserRole">
            <summary>
            User Roles
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserSecurity.UserAuthenticationType">
            <summary>
            Calculated value for how the user should authenticate
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserSummaryReportFilter.IncludeEmployees">
            <summary>
            Include Employee Users in the output
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserSummaryReportFilter.IncludeClients">
            <summary>
            Include Client Users in the output
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserSummaryReportFilter.IncludeUsersThatHaveLoggedIn">
            <summary>
            Include Users that have logged in at least once
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserSummaryReportFilter.IncludeUsersThatHaveNotLoggedIn">
            <summary>
            Include Users that have not logged in
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserSummaryReportFilter.IncludeDisabledUsers">
            <summary>
            Include Users that are disabled (Enabled Users are always included)
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserSummaryReportFilter.IncludeSharedAddressBookUsers">
            <summary>
            Include Users that are in the Shared Address Book
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserSummaryReportFilter.IncludeUsersWithAssignedQuota">
            <summary>
            Include Users that have a Quota assigned to them (Users with no Quota are always included)
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserSummaryReportFilter.IncludeUsersWithAssignedPolicies">
            <summary>
            Include Users that have at least one Policy assigned to them (Users with no Policies are always included)
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.UserUsage">
            <summary>
            The current usage statistics for the number of Employee and Client Users on the Account
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserUsage.EmployeeMax">
            <summary>
            Max number of employee users.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserUsage.EmployeeCount">
            <summary>
            Current number of employee users.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.UserUsage.ClientCount">
            <summary>
            Current number of client users.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.WebhookClient">
            <summary>
            Information related to a specific ShareFile Client's webhook configuration
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.WebhookClient.OAuthClientId">
            <summary>
            ShareFile Client Identifier
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.WebhookClient.SignatureKeys">
            <summary>
            The keys used to sign webhook payloads to verify ShareFile is the sender
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.WebhookSignatureKeys">
            <summary>
            Set of keys used to sign webhook payloads
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.WebhookSignatureKeys.PrimaryKey">
            <summary>
            The key used to sign the payload and placed in the SF-WEBHOOK-PRIMARY-SIGNATURE header
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.WebhookSignatureKeys.SecondaryKey">
            <summary>
            The key used to sign the payload and placed in the SF-WEBHOOK-SECONDARY-SIGNATURE header
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.WebhookSubscription">
            <summary>
            Webhook Subscription
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.WebhookSubscription.WebhookUrl">
            <summary>
            Url where the Event payload will be posted to.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.WebhookSubscription.SubscriptionContext">
            <summary>
            The Context of the Events to trigger upon
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.WebhookSubscription.Events">
            <summary>
            List of events to trigger upon
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.Workflow">
            <summary>
            Represents a ShareFile Workflow
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.WorkflowParticipant">
            <summary>
            Represents a participant in a Workflow.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.WorkflowRole">
            <summary>
            Participants role in a workflow.
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.WorkflowRole.Passive">
            <summary>
            Analogous to carbon copy.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.WorkflowStatus">
            <summary>
            Status of a workflow
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.WorkflowType">
            <summary>
            Type of Workflow
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.Zone">
            <summary>
            Zones represent sites that can hold ShareFile data. Zones can be either
            Private - installed at customer's premisses - or Public - managed by
            ShareFile. ShareFile Items are always associated with a given Zone.
            
            Zones have multiple StorageCenters - each represents a physical server
            in that zone.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Zone.Secret">
            <summary>
            Zone secret used for securing communications.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Zone.ZoneType">
            <summary>
            Zone type
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Zone.Account">
            <summary>
            Zone account - only set on Private zones
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Zone.HeartBeatTolerance">
            <summary>
            Specifies how much time between heartbeats before sharefile.com will remove
            a Storage Center from load balancing
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Zone.PingBackInterval">
            <summary>
            Specifies how often sharefile.com will attempt to connect back to the Zone
            and determine if the zone is healthy.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Zone.Version">
            <summary>
            Zone version - this parameter cannot be set, it is determined from the version
            of its storage centers. A zone version is the lowest version of a storage center
            in that zone
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Zone.ZoneServices">
            <summary>
            Comma-delimited list of services enabled in this zone.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Zone.IsHIPAAZone">
            <summary>
            Specifies if the zone is a HIPAA zone
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Zone.IsMultiTenant">
            <summary>
            Specifies if the zone is a multi-tenant zone
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Zone.StorageCenters">
            <summary>
            List of Storage Centers created on this zone. A Storage Center is a stateless
            server that performs the zone services. Operations to this zone will be
            redirected to one of the storage centers - using the configured external
            address.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Models.Zone.Metadata">
            <summary>
            List of metadata objects associated with this zone
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Models.ZoneService">
            <summary>
            Enumeration for listing which services are enabled on the Zone
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ZoneService.None">
            <summary>
            No Services
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ZoneService.StorageZone">
            <summary>
            Object Storage Zone (ShareFile storage)
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ZoneService.NetworkShareConnector">
            <summary>
            Connector to Network Shares (cifs)
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ZoneService.SharepointConnector">
            <summary>
            Connector to SharePoint Sites (sp)
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ZoneService.Preview">
            <summary>
            Supports Preview
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ZoneService.HighConcurrency">
            <summary>
            Highly concurrent zone
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ZoneService.InformationRightsManagement">
            <summary>
            Supports Information Rights Management
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ZoneService.DocumentumConnector">
            <summary>
            Supports Documentum ECM Connector
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ZoneService.AlfrescoConnector">
            <summary>
            Supports OpenText ECM Connector
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ZoneService.OpenTextConnector">
            <summary>
            Supports FileNet ECM Connector
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ZoneService.FileNetConnector">
            <summary>
            Supports Alfresco ECM Connector
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ZoneService.Editing">
            <summary>
            Supports Editing
            </summary>
        </member>
        <member name="F:ShareFile.Api.Client.Models.ZoneService.DirectToFile">
            <summary>
            Supports DirectToFile (ShareFile - Office mobile apps integration)
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Extensions.HttpResponseMessageExtensions.GetSecureRedirect(System.Net.Http.HttpResponseMessage)">
            <summary>
            Gets the redirection if available.
            If an HTTP redirection is returned, then it throws.
            </summary>
            <param name="message"></param>
            <returns></returns>
            <exception cref="T:ShareFile.Api.Client.Exceptions.HttpsExpectedException" />
        </member>
        <member name="M:ShareFile.Api.Client.Extensions.ItemsEntityExtensions.GetAlias(ShareFile.Api.Client.Entities.IItemsEntity,ShareFile.Api.Client.Enums.ItemAlias)">
            <summary>
            Will return a composed Uri that will point to Items(alias) for the BaseUri
            </summary>
            <returns></returns>
        </member>
        <member name="M:ShareFile.Api.Client.Extensions.ItemsEntityExtensions.GetAlias(ShareFile.Api.Client.Entities.IItemsEntity,System.String)">
            <summary>
            Will return a composed Uri that will point to Items(alias) for the BaseUri
            </summary>
            <returns></returns>
        </member>
        <member name="M:ShareFile.Api.Client.Extensions.StringExtensions.ToBase64(System.String)">
            <summary>
            Convert string to Base64 iff <paramref name="val"/> is not already encoded
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ShareFile.Api.Client.Extensions.UriExtensions.GetQueryAsODataParameters(System.Uri)">
            <summary>
            Convert Uri.Query into collection of <see cref="T:ShareFile.Api.Client.Requests.ODataParameter"/>
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="T:ShareFile.Api.Client.Logging.Stopwatch">
            <summary>
            Portable implementation of System.Diagnostics.Stopwatch.  If your platform provides a higher precision implementation, 
            most will, just register with the StopwatchFactory.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Primitives.ShareFileId">
            <summary>
            A compact representation of a ShareFile unique identifier.
            </summary>
        </member>
        <member name="T:ShareFile.Api.Client.Requests.Filters.AndFilter">
            <summary>
            OData Filter for ANDing two filters
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Requests.Filters.AndFilter.#ctor(ShareFile.Api.Client.Requests.Filters.IFilter,ShareFile.Api.Client.Requests.Filters.IFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:ShareFile.Api.Client.Requests.Filters.AndFilter"/> class.
            </summary>
            <param name="left">Left hand side of the filter</param>
            <param name="right">Right hand side of the filter</param>
        </member>
        <member name="M:ShareFile.Api.Client.Requests.Filters.BooleanFilter.#ctor(ShareFile.Api.Client.Requests.Filters.IFilter,ShareFile.Api.Client.Requests.Filters.IFilter,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ShareFile.Api.Client.Requests.Filters.BooleanFilter"/> class.
            </summary>
            <param name="left">Filter for the left hand side of binaryOperation</param>
            <param name="right">Filter for the right hand side of binaryOperation</param>
            <param name="binaryOperator">Desired binary operator</param>
        </member>
        <member name="M:ShareFile.Api.Client.Requests.Filters.BooleanFilter.ToString">
            <summary>
            Compute the filter for use.
            </summary>
            <returns>Constructed filter with <see cref="P:ShareFile.Api.Client.Requests.Filters.BooleanFilter.Left"/> and <see cref="P:ShareFile.Api.Client.Requests.Filters.BooleanFilter.Right"/> filters applied</returns>
        </member>
        <member name="T:ShareFile.Api.Client.Requests.Filters.OrFilter">
            <summary>
            OData Filter for ORing two filters
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Requests.Filters.OrFilter.#ctor(ShareFile.Api.Client.Requests.Filters.IFilter,ShareFile.Api.Client.Requests.Filters.IFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:ShareFile.Api.Client.Requests.Filters.OrFilter"/> class.
            </summary>
            <param name="left">Left hand side of the filter</param>
            <param name="right">Right hand side of the filter</param>
        </member>
        <member name="M:ShareFile.Api.Client.Requests.IQuery`1.Filter(ShareFile.Api.Client.Requests.Filters.IFilter)">
            <summary>
            If a Filter has already been added, it will implicitly converted to a <see cref="T:ShareFile.Api.Client.Requests.Filters.AndFilter"/> 
            with the existing filter as Left and <param name="filter"></param> as Right.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="F:ShareFile.Api.Client.Requests.Providers.BaseRequestProvider.RuntimeRequiresCustomCookieHandling">
            <summary>
            Set this flag True if running as a Portable Class Library
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Requests.Query`1.Filter(ShareFile.Api.Client.Requests.Filters.IFilter)">
            <summary>
            If a Filter has already been added, it will implicitly converted to a <see cref="T:ShareFile.Api.Client.Requests.Filters.AndFilter"/> 
            with the existing filter as Left and <param name="filter"></param> as Right.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="P:ShareFile.Api.Client.Requests.ApiRequest.IsComposed">
            <summary>
            Indicates whether or not the Uri has been composed.
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Requests.ApiRequest.IsUri(System.String,System.Uri@)">
            <summary>
            Check if the provided id is a fully qualified <see cref="P:ShareFile.Api.Client.Requests.ApiRequest.Uri"/>
            </summary>
            <param name="id"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="T:ShareFile.Api.Client.Requests.QueryMetadata">
            <summary>
            Used to store metadata about the query.
            This metadata is for internal use and is not actually sent as part of the API request.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Requests.QueryMetadata.IsExpectedToThrow">
            <summary>
            Gets or sets a value indicating whether or not the request is expected to throw.
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Security.Cryptography.PortableMD5HashProvider.BytesToHex(System.Byte[])">
            <summary>
            Returns the hexadecimal representation of a string.
            </summary>
            <param name="data">Bytes to convert to hex</param>
            <returns>Lowercase hex string of those bytes</returns>
        </member>
        <member name="T:ShareFile.Api.Client.Security.Cryptography.IDigest">
            interface that a message digest conforms to.
        </member>
        <member name="P:ShareFile.Api.Client.Security.Cryptography.IDigest.AlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="M:ShareFile.Api.Client.Security.Cryptography.IDigest.GetDigestSize">
             return the size, in bytes, of the digest produced by this message digest.
            
             @return the size, in bytes, of the digest produced by this message digest.
        </member>
        <member name="M:ShareFile.Api.Client.Security.Cryptography.IDigest.GetByteLength">
             return the size, in bytes, of the internal buffer used by this digest.
            
             @return the size, in bytes, of the internal buffer used by this digest.
        </member>
        <member name="M:ShareFile.Api.Client.Security.Cryptography.IDigest.Update(System.Byte)">
             update the message digest with a single byte.
            
             @param inByte the input byte to be entered.
        </member>
        <member name="M:ShareFile.Api.Client.Security.Cryptography.IDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param input the byte array containing the data.
             @param inOff the offset into the byte array where the data starts.
             @param len the length of the data.
        </member>
        <member name="M:ShareFile.Api.Client.Security.Cryptography.IDigest.DoFinal(System.Byte[],System.Int32)">
             Close the digest, producing the final digest Message. The doFinal
             call leaves the digest reset.
            
             @param output the array the digest is to be copied into.
             @param outOff the offset into the out array the digest is to start at.
        </member>
        <member name="M:ShareFile.Api.Client.Security.Cryptography.IDigest.Reset">
            reset the digest back to it's initial state.
        </member>
        <member name="T:ShareFile.Api.Client.Security.Cryptography.MD5Digest">
            implementation of MD5 as outlined in "Handbook of Applied Cryptography", pages 346 - 347.
        </member>
        <member name="M:ShareFile.Api.Client.Security.Cryptography.MD5Digest.#ctor(ShareFile.Api.Client.Security.Cryptography.MD5Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:ShareFile.Api.Client.Security.Cryptography.MD5Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="M:ShareFile.Api.Client.IShareFileClient.AddAuthenticationId(System.Uri,System.String,System.String,System.String)">
            <summary>
            Use this method if you've previously acquired an AuthenticationId through other means.
            </summary>
            <param name="host"></param>
            <param name="authenticationId"></param>
            <param name="path"></param>
            <param name="cookieName"></param>
        </member>
        <member name="M:ShareFile.Api.Client.IShareFileClient.AddCredentials(System.Uri,System.String,System.Net.NetworkCredential)">
            <summary>
            
            </summary>
            <param name="uri"></param>
            <param name="authenticationType"></param>
            <param name="networkCredential"></param>
        </member>
        <member name="M:ShareFile.Api.Client.IShareFileClient.AddOAuthCredentials(System.Uri,System.String)">
            <summary>
            </summary>
            <param name="host"></param>
            <param name="oauthToken"></param>
        </member>
        <member name="M:ShareFile.Api.Client.IShareFileClient.AddOAuthCredentials(ShareFile.Api.Client.Security.Authentication.OAuth2.OAuthToken)">
            <summary>
            </summary>
            <param name="oauthToken"></param>
        </member>
        <member name="M:ShareFile.Api.Client.IShareFileClient.RegisterType``2">
            <summary>
            Substitute TNew for TReplace when instantiating TReplace for responses.
            Helpful if you need some additional properties on responses to work with.
            </summary>
            <typeparam name="TNew"></typeparam>
            <typeparam name="TReplace"></typeparam>
        </member>
        <member name="M:ShareFile.Api.Client.ShareFileClient.PreprocessUploadSpecRequest(ShareFile.Api.Client.Transfers.UploadSpecificationRequest)">
            <summary>
            Use some naive metrics for deciding which <see cref="T:ShareFile.Api.Client.Models.UploadMethod"/>  should be used.
            </summary>
            <param name="uploadSpecificationRequest"></param>
        </member>
        <member name="M:ShareFile.Api.Client.ShareFileClient.GetAsyncFileUploader(ShareFile.Api.Client.Transfers.UploadSpecificationRequest,System.IO.Stream,ShareFile.Api.Client.Transfers.Uploaders.FileUploaderConfig,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="uploadSpecificationRequest"></param>
            <param name="file"></param>
            <param name="config"></param>
            <param name="expirationDays">Will only be obeyed by ShareFile apps</param>
            <returns></returns>
        </member>
        <member name="M:ShareFile.Api.Client.ShareFileClient.GetFileUploader(ShareFile.Api.Client.Transfers.UploadSpecificationRequest,System.IO.Stream,ShareFile.Api.Client.Transfers.Uploaders.FileUploaderConfig,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="uploadSpecificationRequest"></param>
            <param name="file"></param>
            <param name="config"></param>
            <param name="expirationDays">Will only be obeyed by ShareFile apps</param>
            <returns></returns>
        </member>
        <member name="M:ShareFile.Api.Client.ShareFileClient.AddAuthenticationId(System.Uri,System.String,System.String,System.String)">
            <summary>
            Use this method if you've previously acquired an AuthenticationId through other means.
            </summary>
            <param name="host"></param>
            <param name="authenticationId"></param>
            <param name="path"></param>
            <param name="cookieName"></param>
        </member>
        <member name="M:ShareFile.Api.Client.ShareFileClient.RegisterType``2">
            <summary>
            Substitute TNew for TReplace when instantiating TReplace for responses.
            </summary>
            <typeparam name="TNew"></typeparam>
            <typeparam name="TReplace"></typeparam>
        </member>
        <member name="M:ShareFile.Api.Client.ShareFileClient.RegisterSyncRequestExecutor(ShareFile.Api.Client.Requests.Executors.ISyncRequestExecutor)">
            <summary>
            This RequestExecutor will be used for all requests created by this ShareFileClient instance, overriding the global RequestExecutorFactory.
            </summary>
            <param name="syncRequestExecutor"></param>
        </member>
        <member name="M:ShareFile.Api.Client.ShareFileClient.RegisterAsyncRequestExecutor(ShareFile.Api.Client.Requests.Executors.IAsyncRequestExecutor)">
            <summary>
            This RequestExecutor will be used for all requests created by this ShareFileClient instance, overriding the global RequestExecutorFactory. 
            </summary>
            <param name="asyncRequestExecutor"></param>
        </member>
        <member name="M:ShareFile.Api.Client.ShareFileClient.AddCredentials(System.Uri,System.String,System.Net.NetworkCredential)">
            <summary>
            
            </summary>
            <param name="uri"></param>
            <param name="authenticationType"></param>
            <param name="networkCredential"></param>
        </member>
        <member name="M:ShareFile.Api.Client.ShareFileClient.AddOAuthCredentials(System.Uri,System.String)">
            <summary>
            </summary>
            <param name="host"></param>
            <param name="oauthToken"></param>
        </member>
        <member name="M:ShareFile.Api.Client.ShareFileClient.AddOAuthCredentials(ShareFile.Api.Client.Security.Authentication.OAuth2.OAuthToken)">
            <summary>
            </summary>
            <param name="oauthToken"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Transfers.Downloaders.AsyncDownloaderBase.PrepareDownloadAsync(System.Threading.CancellationToken)">
            <summary>
            Prepares the downloader instance.
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Transfers.Downloaders.AsyncDownloaderBase.DownloadToAsync(System.IO.Stream,System.Threading.CancellationToken,System.Collections.Generic.Dictionary{System.String,System.Object},ShareFile.Api.Client.Transfers.Downloaders.RangeRequest)">
            <summary>
            Downloads the file to the provided Stream.
            </summary>
            <param name="stream"></param>
            <param name="transferMetadata"></param>
            <param name="cancellationToken"></param>
            <param name="rangeRequest">
                Overrides Config.RangeRequest. ShareFile may have some restrictions on the number of times a range request can be issued for a given download session.  
                There is a chance that providing this can result in failures.
            </param>
        </member>
        <member name="M:ShareFile.Api.Client.Transfers.Downloaders.SyncDownloaderBase.PrepareDownload(System.Threading.CancellationToken)">
            <summary>
            Prepares the downloader instance.
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Transfers.Downloaders.SyncDownloaderBase.DownloadTo(System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken,ShareFile.Api.Client.Transfers.Downloaders.RangeRequest)">
            <summary>
            Downloads the file to the provided Stream.
            </summary>
            <param name="stream"></param>
            <param name="transferMetadata"></param>
            <param name="cancellationToken"></param>
            <param name="rangeRequest">
                Overrides Config.RangeRequest. ShareFile may have some restrictions on the number of times a range request can be issued for a given download session.  
                There is a chance that providing this can result in failures.
            </param>
        </member>
        <member name="P:ShareFile.Api.Client.Transfers.Uploaders.FilePartConfig.MinFileSizeForMultithreaded">
            <summary>
            Files smaller than this size will always be single-threaded. Defaults to 8MB.
            <para>
            The number of threads is scaled based on file size. 8MB will be 2 threads, 16MB will be 3 threads, etc.
            </para>
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Transfers.Uploaders.ScalingPartUploader.LastConsecutiveByteUploaded">
            <summary>
            Gets the last byte that was uploaded with no missing bytes before it.
            <para>If bytes 1,2,3,6,7 where uploaded, then this will return 3.</para>
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Transfers.Uploaders.UploaderBase.NotifyProgress(ShareFile.Api.Client.Transfers.TransferProgress)">
            <summary>
            Used by some external tests
            </summary>
            <param name="progress"></param>
        </member>
        <member name="M:ShareFile.Api.Client.Transfers.Uploaders.UploaderBase.GetChunkUriForStandardUploads">
            <summary>
            Use specifically for Standard Uploads. The API call isn't guaranteed to include fmt=json on the query string
            this is necessary to get file metadata back as part of the upload response.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ShareFile.Api.Client.Transfers.Uploaders.UploaderBase.ValidateChunkResponse(System.Net.Http.HttpResponseMessage,System.String)">
            <summary>
            Attempts to parse the chunk response. Throws if there was an upload error.
            </summary>
            <param name="responseMessage"></param>
            <param name="responseContent"></param>
            <exception cref="T:ShareFile.Api.Client.Exceptions.UploadException" />
        </member>
        <member name="M:ShareFile.Api.Client.Transfers.Uploaders.UploaderBase.ValidateUploadResponse(System.Net.Http.HttpResponseMessage,System.String,System.String)">
            <summary>
            Attempts to parse the upload response. Throws if there was an upload error.
            </summary>
            <param name="responseMessage"></param>
            <param name="responseContent"></param>
            <param name="localHash">The locally computed file hash</param>
            <returns></returns>
            <exception cref="T:ShareFile.Api.Client.Exceptions.UploadException" />
        </member>
        <member name="M:ShareFile.Api.Client.Transfers.Uploaders.UploaderBase.ParseODataExceptionAndThrow(System.String)">
            <summary>
            Attempt to parse the input into an <see cref="T:ShareFile.Api.Client.Exceptions.ODataException"/> and wrap it in a <see cref="T:ShareFile.Api.Client.Exceptions.UploadException"/>.
            This will always throw an <see cref="T:ShareFile.Api.Client.Exceptions.UploadException"/>
            </summary>
            <param name="errorResponse">The json message to parse</param>
            <exception cref="T:ShareFile.Api.Client.Exceptions.UploadException" />
        </member>
        <member name="P:ShareFile.Api.Client.Transfers.UploadedFile.LocalHash">
            <summary>
            The locally computed file hash.
            Note: we don't compute this value for all uploads (namely Standard uploads). It will be null in that case.
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Transfers.UploadSpecificationRequest.Raw">
            <summary>
            Set is no longer supported; value will be overwritten during uploader constructor
            </summary>
        </member>
        <member name="P:ShareFile.Api.Client.Transfers.UploadSpecificationRequest.ForceUnique">
            <summary>
            Will make a best effort to ensure a file is uploaded by modifying 
            FileName if it encounters a collision.  This is NOT supported on all
            providers.
            </summary>
        </member>
        <member name="M:ShareFile.Api.Client.Transfers.UploadSpecificationRequest.ToRequestParams">
            <summary>
            Convert to <see cref="T:ShareFile.Api.Client.Models.UploadRequestParams"/> used for Upload2.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
